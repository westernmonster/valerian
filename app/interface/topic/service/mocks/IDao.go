// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "valerian/app/interface/topic/model"

import sqalx "valerian/library/database/sqalx"

// IDao is an autogenerated mock type for the IDao type
type IDao struct {
	mock.Mock
}

// AccountCache provides a mock function with given fields: c, accountID
func (_m *IDao) AccountCache(c context.Context, accountID int64) (*model.Account, error) {
	ret := _m.Called(c, accountID)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Account); ok {
		r0 = rf(c, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountTopicSettingCache provides a mock function with given fields: c, aid, topicID
func (_m *IDao) AccountTopicSettingCache(c context.Context, aid int64, topicID int64) (*model.AccountTopicSetting, error) {
	ret := _m.Called(c, aid, topicID)

	var r0 *model.AccountTopicSetting
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *model.AccountTopicSetting); ok {
		r0 = rf(c, aid, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountTopicSetting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(c, aid, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddAccountArticleAttr provides a mock function with given fields: c, node, item
func (_m *IDao) AddAccountArticleAttr(c context.Context, node sqalx.Node, item *model.AccountArticleAttr) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.AccountArticleAttr) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddAccountTopicSetting provides a mock function with given fields: c, node, item
func (_m *IDao) AddAccountTopicSetting(c context.Context, node sqalx.Node, item *model.AccountTopicSetting) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.AccountTopicSetting) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddArticle provides a mock function with given fields: c, node, item
func (_m *IDao) AddArticle(c context.Context, node sqalx.Node, item *model.Article) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.Article) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddArticleFile provides a mock function with given fields: c, node, item
func (_m *IDao) AddArticleFile(c context.Context, node sqalx.Node, item *model.ArticleFile) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.ArticleFile) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddArticleHistory provides a mock function with given fields: c, node, item
func (_m *IDao) AddArticleHistory(c context.Context, node sqalx.Node, item *model.ArticleHistory) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.ArticleHistory) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddAuthTopic provides a mock function with given fields: c, node, item
func (_m *IDao) AddAuthTopic(c context.Context, node sqalx.Node, item *model.AuthTopic) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.AuthTopic) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTopic provides a mock function with given fields: c, node, item
func (_m *IDao) AddTopic(c context.Context, node sqalx.Node, item *model.Topic) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.Topic) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTopicCatalog provides a mock function with given fields: c, node, item
func (_m *IDao) AddTopicCatalog(c context.Context, node sqalx.Node, item *model.TopicCatalog) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.TopicCatalog) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTopicFollowRequest provides a mock function with given fields: c, node, item
func (_m *IDao) AddTopicFollowRequest(c context.Context, node sqalx.Node, item *model.TopicFollowRequest) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.TopicFollowRequest) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTopicMember provides a mock function with given fields: c, node, item
func (_m *IDao) AddTopicMember(c context.Context, node sqalx.Node, item *model.TopicMember) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.TopicMember) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleCache provides a mock function with given fields: c, articleID
func (_m *IDao) ArticleCache(c context.Context, articleID int64) (*model.ArticleResp, error) {
	ret := _m.Called(c, articleID)

	var r0 *model.ArticleResp
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.ArticleResp); ok {
		r0 = rf(c, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ArticleResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleFileCache provides a mock function with given fields: c, articleID
func (_m *IDao) ArticleFileCache(c context.Context, articleID int64) ([]*model.ArticleFileResp, error) {
	ret := _m.Called(c, articleID)

	var r0 []*model.ArticleFileResp
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.ArticleFileResp); ok {
		r0 = rf(c, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ArticleFileResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleHistoryCache provides a mock function with given fields: c, articleVersionID
func (_m *IDao) ArticleHistoryCache(c context.Context, articleVersionID int64) ([]*model.ArticleHistoryResp, error) {
	ret := _m.Called(c, articleVersionID)

	var r0 []*model.ArticleHistoryResp
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.ArticleHistoryResp); ok {
		r0 = rf(c, articleVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ArticleHistoryResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, articleVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthTopicsCache provides a mock function with given fields: c, topicID
func (_m *IDao) AuthTopicsCache(c context.Context, topicID int64) ([]*model.AuthTopic, error) {
	ret := _m.Called(c, topicID)

	var r0 []*model.AuthTopic
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.AuthTopic); ok {
		r0 = rf(c, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AuthTopic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *IDao) Close() {
	_m.Called()
}

// DB provides a mock function with given fields:
func (_m *IDao) DB() sqalx.Node {
	ret := _m.Called()

	var r0 sqalx.Node
	if rf, ok := ret.Get(0).(func() sqalx.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqalx.Node)
		}
	}

	return r0
}

// DelAccountArticleAttr provides a mock function with given fields: c, node, id
func (_m *IDao) DelAccountArticleAttr(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelAccountCache provides a mock function with given fields: c, accountID
func (_m *IDao) DelAccountCache(c context.Context, accountID int64) error {
	ret := _m.Called(c, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelAccountTopicSetting provides a mock function with given fields: c, node, id
func (_m *IDao) DelAccountTopicSetting(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelAccountTopicSettingCache provides a mock function with given fields: c, aid, topicID
func (_m *IDao) DelAccountTopicSettingCache(c context.Context, aid int64, topicID int64) error {
	ret := _m.Called(c, aid, topicID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(c, aid, topicID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelArticle provides a mock function with given fields: c, node, id
func (_m *IDao) DelArticle(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelArticleCache provides a mock function with given fields: c, articleID
func (_m *IDao) DelArticleCache(c context.Context, articleID int64) error {
	ret := _m.Called(c, articleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, articleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelArticleFile provides a mock function with given fields: c, node, id
func (_m *IDao) DelArticleFile(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelArticleFileCache provides a mock function with given fields: c, articleID
func (_m *IDao) DelArticleFileCache(c context.Context, articleID int64) error {
	ret := _m.Called(c, articleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, articleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelArticleHistoryCache provides a mock function with given fields: c, articleVersionID
func (_m *IDao) DelArticleHistoryCache(c context.Context, articleVersionID int64) error {
	ret := _m.Called(c, articleVersionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, articleVersionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelAuthTopic provides a mock function with given fields: c, node, id
func (_m *IDao) DelAuthTopic(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelAuthTopicsCache provides a mock function with given fields: c, topicID
func (_m *IDao) DelAuthTopicsCache(c context.Context, topicID int64) error {
	ret := _m.Called(c, topicID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, topicID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelTopic provides a mock function with given fields: c, node, id
func (_m *IDao) DelTopic(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelTopicCache provides a mock function with given fields: c, topicID
func (_m *IDao) DelTopicCache(c context.Context, topicID int64) error {
	ret := _m.Called(c, topicID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, topicID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelTopicCatalog provides a mock function with given fields: c, node, id
func (_m *IDao) DelTopicCatalog(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelTopicCatalogCache provides a mock function with given fields: c, topicID
func (_m *IDao) DelTopicCatalogCache(c context.Context, topicID int64) error {
	ret := _m.Called(c, topicID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, topicID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelTopicFollowRequest provides a mock function with given fields: c, node, id
func (_m *IDao) DelTopicFollowRequest(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelTopicMember provides a mock function with given fields: c, node, id
func (_m *IDao) DelTopicMember(c context.Context, node sqalx.Node, id int64) error {
	ret := _m.Called(c, node, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) error); ok {
		r0 = rf(c, node, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelTopicMembersCache provides a mock function with given fields: c, topicID
func (_m *IDao) DelTopicMembersCache(c context.Context, topicID int64) error {
	ret := _m.Called(c, topicID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, topicID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountArticleAttr provides a mock function with given fields: c, node, aid, articleID
func (_m *IDao) GetAccountArticleAttr(c context.Context, node sqalx.Node, aid int64, articleID int64) (*model.AccountArticleAttr, error) {
	ret := _m.Called(c, node, aid, articleID)

	var r0 *model.AccountArticleAttr
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64, int64) *model.AccountArticleAttr); ok {
		r0 = rf(c, node, aid, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountArticleAttr)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64, int64) error); ok {
		r1 = rf(c, node, aid, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByID provides a mock function with given fields: c, node, id
func (_m *IDao) GetAccountByID(c context.Context, node sqalx.Node, id int64) (*model.Account, error) {
	ret := _m.Called(c, node, id)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) *model.Account); ok {
		r0 = rf(c, node, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountTopicSetting provides a mock function with given fields: c, node, aid, topicID
func (_m *IDao) GetAccountTopicSetting(c context.Context, node sqalx.Node, aid int64, topicID int64) (*model.AccountTopicSetting, error) {
	ret := _m.Called(c, node, aid, topicID)

	var r0 *model.AccountTopicSetting
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64, int64) *model.AccountTopicSetting); ok {
		r0 = rf(c, node, aid, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountTopicSetting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64, int64) error); ok {
		r1 = rf(c, node, aid, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountTopicSettings provides a mock function with given fields: c, node, aid
func (_m *IDao) GetAccountTopicSettings(c context.Context, node sqalx.Node, aid int64) ([]*model.AccountTopicSetting, error) {
	ret := _m.Called(c, node, aid)

	var r0 []*model.AccountTopicSetting
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) []*model.AccountTopicSetting); ok {
		r0 = rf(c, node, aid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AccountTopicSetting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, aid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleByID provides a mock function with given fields: c, node, id
func (_m *IDao) GetArticleByID(c context.Context, node sqalx.Node, id int64) (*model.Article, error) {
	ret := _m.Called(c, node, id)

	var r0 *model.Article
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) *model.Article); ok {
		r0 = rf(c, node, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleFavCount provides a mock function with given fields: c, node, articleID
func (_m *IDao) GetArticleFavCount(c context.Context, node sqalx.Node, articleID int64) (int, error) {
	ret := _m.Called(c, node, articleID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) int); ok {
		r0 = rf(c, node, articleID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleFileByID provides a mock function with given fields: c, node, id
func (_m *IDao) GetArticleFileByID(c context.Context, node sqalx.Node, id int64) (*model.ArticleFile, error) {
	ret := _m.Called(c, node, id)

	var r0 *model.ArticleFile
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) *model.ArticleFile); ok {
		r0 = rf(c, node, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ArticleFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleFiles provides a mock function with given fields: c, node, articleID
func (_m *IDao) GetArticleFiles(c context.Context, node sqalx.Node, articleID int64) ([]*model.ArticleFile, error) {
	ret := _m.Called(c, node, articleID)

	var r0 []*model.ArticleFile
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) []*model.ArticleFile); ok {
		r0 = rf(c, node, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ArticleFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleHistories provides a mock function with given fields: c, node, articleVersionID
func (_m *IDao) GetArticleHistories(c context.Context, node sqalx.Node, articleVersionID int64) ([]*model.ArticleHistory, error) {
	ret := _m.Called(c, node, articleVersionID)

	var r0 []*model.ArticleHistory
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) []*model.ArticleHistory); ok {
		r0 = rf(c, node, articleVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ArticleHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, articleVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleHistoriesMaxSeq provides a mock function with given fields: c, node, articleVersionID
func (_m *IDao) GetArticleHistoriesMaxSeq(c context.Context, node sqalx.Node, articleVersionID int64) (int, error) {
	ret := _m.Called(c, node, articleVersionID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) int); ok {
		r0 = rf(c, node, articleVersionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, articleVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleHistoryByID provides a mock function with given fields: c, node, id
func (_m *IDao) GetArticleHistoryByID(c context.Context, node sqalx.Node, id int64) (*model.ArticleHistory, error) {
	ret := _m.Called(c, node, id)

	var r0 *model.ArticleHistory
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) *model.ArticleHistory); ok {
		r0 = rf(c, node, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ArticleHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleLikeCount provides a mock function with given fields: c, node, articleID
func (_m *IDao) GetArticleLikeCount(c context.Context, node sqalx.Node, articleID int64) (int, error) {
	ret := _m.Called(c, node, articleID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) int); ok {
		r0 = rf(c, node, articleID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthTopicByCond provides a mock function with given fields: c, node, cond
func (_m *IDao) GetAuthTopicByCond(c context.Context, node sqalx.Node, cond map[string]interface{}) (*model.AuthTopic, error) {
	ret := _m.Called(c, node, cond)

	var r0 *model.AuthTopic
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) *model.AuthTopic); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthTopic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthTopicByID provides a mock function with given fields: c, node, id
func (_m *IDao) GetAuthTopicByID(c context.Context, node sqalx.Node, id int64) (*model.AuthTopic, error) {
	ret := _m.Called(c, node, id)

	var r0 *model.AuthTopic
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) *model.AuthTopic); ok {
		r0 = rf(c, node, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthTopic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthTopics provides a mock function with given fields: c, node
func (_m *IDao) GetAuthTopics(c context.Context, node sqalx.Node) ([]*model.AuthTopic, error) {
	ret := _m.Called(c, node)

	var r0 []*model.AuthTopic
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node) []*model.AuthTopic); ok {
		r0 = rf(c, node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AuthTopic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node) error); ok {
		r1 = rf(c, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthTopicsByCond provides a mock function with given fields: c, node, cond
func (_m *IDao) GetAuthTopicsByCond(c context.Context, node sqalx.Node, cond map[string]interface{}) ([]*model.AuthTopic, error) {
	ret := _m.Called(c, node, cond)

	var r0 []*model.AuthTopic
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) []*model.AuthTopic); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AuthTopic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthTopicsResp provides a mock function with given fields: c, node, topicID
func (_m *IDao) GetAuthTopicsResp(c context.Context, node sqalx.Node, topicID int64) ([]*model.AuthTopicResp, error) {
	ret := _m.Called(c, node, topicID)

	var r0 []*model.AuthTopicResp
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) []*model.AuthTopicResp); ok {
		r0 = rf(c, node, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AuthTopicResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocaleByCondition provides a mock function with given fields: c, node, cond
func (_m *IDao) GetLocaleByCondition(c context.Context, node sqalx.Node, cond map[string]interface{}) (*model.Locale, error) {
	ret := _m.Called(c, node, cond)

	var r0 *model.Locale
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) *model.Locale); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Locale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicByCond provides a mock function with given fields: c, node, cond
func (_m *IDao) GetTopicByCond(c context.Context, node sqalx.Node, cond map[string]interface{}) (*model.Topic, error) {
	ret := _m.Called(c, node, cond)

	var r0 *model.Topic
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) *model.Topic); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicByID provides a mock function with given fields: c, node, id
func (_m *IDao) GetTopicByID(c context.Context, node sqalx.Node, id int64) (*model.Topic, error) {
	ret := _m.Called(c, node, id)

	var r0 *model.Topic
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) *model.Topic); ok {
		r0 = rf(c, node, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicCatalogByCond provides a mock function with given fields: c, node, cond
func (_m *IDao) GetTopicCatalogByCond(c context.Context, node sqalx.Node, cond map[string]interface{}) (*model.TopicCatalog, error) {
	ret := _m.Called(c, node, cond)

	var r0 *model.TopicCatalog
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) *model.TopicCatalog); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TopicCatalog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicCatalogByID provides a mock function with given fields: c, node, id
func (_m *IDao) GetTopicCatalogByID(c context.Context, node sqalx.Node, id int64) (*model.TopicCatalog, error) {
	ret := _m.Called(c, node, id)

	var r0 *model.TopicCatalog
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) *model.TopicCatalog); ok {
		r0 = rf(c, node, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TopicCatalog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicCatalogChildrenCount provides a mock function with given fields: c, node, topicID, parentID
func (_m *IDao) GetTopicCatalogChildrenCount(c context.Context, node sqalx.Node, topicID int64, parentID int64) (int, error) {
	ret := _m.Called(c, node, topicID, parentID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64, int64) int); ok {
		r0 = rf(c, node, topicID, parentID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64, int64) error); ok {
		r1 = rf(c, node, topicID, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicCatalogs provides a mock function with given fields: c, node
func (_m *IDao) GetTopicCatalogs(c context.Context, node sqalx.Node) ([]*model.TopicCatalog, error) {
	ret := _m.Called(c, node)

	var r0 []*model.TopicCatalog
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node) []*model.TopicCatalog); ok {
		r0 = rf(c, node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TopicCatalog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node) error); ok {
		r1 = rf(c, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicCatalogsByCond provides a mock function with given fields: c, node, cond
func (_m *IDao) GetTopicCatalogsByCond(c context.Context, node sqalx.Node, cond map[string]interface{}) ([]*model.TopicCatalog, error) {
	ret := _m.Called(c, node, cond)

	var r0 []*model.TopicCatalog
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) []*model.TopicCatalog); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TopicCatalog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicFollowRequest provides a mock function with given fields: c, node, topicID, aid
func (_m *IDao) GetTopicFollowRequest(c context.Context, node sqalx.Node, topicID int64, aid int64) (*model.TopicFollowRequest, error) {
	ret := _m.Called(c, node, topicID, aid)

	var r0 *model.TopicFollowRequest
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64, int64) *model.TopicFollowRequest); ok {
		r0 = rf(c, node, topicID, aid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TopicFollowRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64, int64) error); ok {
		r1 = rf(c, node, topicID, aid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicFollowRequests provides a mock function with given fields: c, node, topicID, status
func (_m *IDao) GetTopicFollowRequests(c context.Context, node sqalx.Node, topicID int64, status int) ([]*model.TopicFollowRequest, error) {
	ret := _m.Called(c, node, topicID, status)

	var r0 []*model.TopicFollowRequest
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64, int) []*model.TopicFollowRequest); ok {
		r0 = rf(c, node, topicID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TopicFollowRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64, int) error); ok {
		r1 = rf(c, node, topicID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicMemberByCond provides a mock function with given fields: c, node, cond
func (_m *IDao) GetTopicMemberByCond(c context.Context, node sqalx.Node, cond map[string]interface{}) (*model.TopicMember, error) {
	ret := _m.Called(c, node, cond)

	var r0 *model.TopicMember
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) *model.TopicMember); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TopicMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicMemberByID provides a mock function with given fields: c, node, id
func (_m *IDao) GetTopicMemberByID(c context.Context, node sqalx.Node, id int64) (*model.TopicMember, error) {
	ret := _m.Called(c, node, id)

	var r0 *model.TopicMember
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) *model.TopicMember); ok {
		r0 = rf(c, node, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TopicMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicMembers provides a mock function with given fields: c, node
func (_m *IDao) GetTopicMembers(c context.Context, node sqalx.Node) ([]*model.TopicMember, error) {
	ret := _m.Called(c, node)

	var r0 []*model.TopicMember
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node) []*model.TopicMember); ok {
		r0 = rf(c, node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TopicMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node) error); ok {
		r1 = rf(c, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicMembersByCond provides a mock function with given fields: c, node, cond
func (_m *IDao) GetTopicMembersByCond(c context.Context, node sqalx.Node, cond map[string]interface{}) ([]*model.TopicMember, error) {
	ret := _m.Called(c, node, cond)

	var r0 []*model.TopicMember
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) []*model.TopicMember); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TopicMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicMembersCount provides a mock function with given fields: c, node, topicID
func (_m *IDao) GetTopicMembersCount(c context.Context, node sqalx.Node, topicID int64) (int, error) {
	ret := _m.Called(c, node, topicID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64) int); ok {
		r0 = rf(c, node, topicID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64) error); ok {
		r1 = rf(c, node, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicMembersPaged provides a mock function with given fields: c, node, topicID, page, pageSize
func (_m *IDao) GetTopicMembersPaged(c context.Context, node sqalx.Node, topicID int64, page int, pageSize int) (int, []*model.TopicMember, error) {
	ret := _m.Called(c, node, topicID, page, pageSize)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, int64, int, int) int); ok {
		r0 = rf(c, node, topicID, page, pageSize)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []*model.TopicMember
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, int64, int, int) []*model.TopicMember); ok {
		r1 = rf(c, node, topicID, page, pageSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.TopicMember)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, sqalx.Node, int64, int, int) error); ok {
		r2 = rf(c, node, topicID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopics provides a mock function with given fields: c, node
func (_m *IDao) GetTopics(c context.Context, node sqalx.Node) ([]*model.Topic, error) {
	ret := _m.Called(c, node)

	var r0 []*model.Topic
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node) []*model.Topic); ok {
		r0 = rf(c, node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node) error); ok {
		r1 = rf(c, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicsByCond provides a mock function with given fields: c, node, cond
func (_m *IDao) GetTopicsByCond(c context.Context, node sqalx.Node, cond map[string]interface{}) ([]*model.Topic, error) {
	ret := _m.Called(c, node, cond)

	var r0 []*model.Topic
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, map[string]interface{}) []*model.Topic); ok {
		r0 = rf(c, node, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sqalx.Node, map[string]interface{}) error); ok {
		r1 = rf(c, node, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: c
func (_m *IDao) Ping(c context.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAccountCache provides a mock function with given fields: c, m
func (_m *IDao) SetAccountCache(c context.Context, m *model.Account) error {
	ret := _m.Called(c, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Account) error); ok {
		r0 = rf(c, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAccountTopicSettingCache provides a mock function with given fields: c, m
func (_m *IDao) SetAccountTopicSettingCache(c context.Context, m *model.AccountTopicSetting) error {
	ret := _m.Called(c, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AccountTopicSetting) error); ok {
		r0 = rf(c, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetArticleCache provides a mock function with given fields: c, m
func (_m *IDao) SetArticleCache(c context.Context, m *model.ArticleResp) error {
	ret := _m.Called(c, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ArticleResp) error); ok {
		r0 = rf(c, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetArticleFileCache provides a mock function with given fields: c, articleID, m
func (_m *IDao) SetArticleFileCache(c context.Context, articleID int64, m []*model.ArticleFileResp) error {
	ret := _m.Called(c, articleID, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*model.ArticleFileResp) error); ok {
		r0 = rf(c, articleID, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetArticleHistoryCache provides a mock function with given fields: c, articleVersionID, m
func (_m *IDao) SetArticleHistoryCache(c context.Context, articleVersionID int64, m []*model.ArticleHistoryResp) error {
	ret := _m.Called(c, articleVersionID, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*model.ArticleHistoryResp) error); ok {
		r0 = rf(c, articleVersionID, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAuthTopicsCache provides a mock function with given fields: c, topicID, m
func (_m *IDao) SetAuthTopicsCache(c context.Context, topicID int64, m []*model.AuthTopic) error {
	ret := _m.Called(c, topicID, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*model.AuthTopic) error); ok {
		r0 = rf(c, topicID, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTopicCache provides a mock function with given fields: c, m
func (_m *IDao) SetTopicCache(c context.Context, m *model.TopicResp) error {
	ret := _m.Called(c, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TopicResp) error); ok {
		r0 = rf(c, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTopicCatalogCache provides a mock function with given fields: c, topicID, m
func (_m *IDao) SetTopicCatalogCache(c context.Context, topicID int64, m []*model.TopicLevel1Catalog) error {
	ret := _m.Called(c, topicID, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*model.TopicLevel1Catalog) error); ok {
		r0 = rf(c, topicID, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTopicMembersCache provides a mock function with given fields: c, topicID, count, page, pageSize, data
func (_m *IDao) SetTopicMembersCache(c context.Context, topicID int64, count int, page int, pageSize int, data []*model.TopicMember) error {
	ret := _m.Called(c, topicID, count, page, pageSize, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, int, []*model.TopicMember) error); ok {
		r0 = rf(c, topicID, count, page, pageSize, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TopicCache provides a mock function with given fields: c, topicID
func (_m *IDao) TopicCache(c context.Context, topicID int64) (*model.TopicResp, error) {
	ret := _m.Called(c, topicID)

	var r0 *model.TopicResp
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.TopicResp); ok {
		r0 = rf(c, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TopicResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicCatalogCache provides a mock function with given fields: c, topicID
func (_m *IDao) TopicCatalogCache(c context.Context, topicID int64) ([]*model.TopicLevel1Catalog, error) {
	ret := _m.Called(c, topicID)

	var r0 []*model.TopicLevel1Catalog
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.TopicLevel1Catalog); ok {
		r0 = rf(c, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TopicLevel1Catalog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicMembersCache provides a mock function with given fields: c, topicID, page, pageSize
func (_m *IDao) TopicMembersCache(c context.Context, topicID int64, page int, pageSize int) (int, []*model.TopicMember, error) {
	ret := _m.Called(c, topicID, page, pageSize)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) int); ok {
		r0 = rf(c, topicID, page, pageSize)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []*model.TopicMember
	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) []*model.TopicMember); ok {
		r1 = rf(c, topicID, page, pageSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.TopicMember)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, int, int) error); ok {
		r2 = rf(c, topicID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateAccountArticleAttr provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateAccountArticleAttr(c context.Context, node sqalx.Node, item *model.AccountArticleAttr) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.AccountArticleAttr) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountTopicSetting provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateAccountTopicSetting(c context.Context, node sqalx.Node, item *model.AccountTopicSetting) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.AccountTopicSetting) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateArticle provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateArticle(c context.Context, node sqalx.Node, item *model.Article) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.Article) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateArticleFile provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateArticleFile(c context.Context, node sqalx.Node, item *model.ArticleFile) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.ArticleFile) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAuthTopic provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateAuthTopic(c context.Context, node sqalx.Node, item *model.AuthTopic) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.AuthTopic) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopic provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateTopic(c context.Context, node sqalx.Node, item *model.Topic) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.Topic) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopicCatalog provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateTopicCatalog(c context.Context, node sqalx.Node, item *model.TopicCatalog) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.TopicCatalog) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopicFollowRequest provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateTopicFollowRequest(c context.Context, node sqalx.Node, item *model.TopicFollowRequest) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.TopicFollowRequest) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopicMember provides a mock function with given fields: c, node, item
func (_m *IDao) UpdateTopicMember(c context.Context, node sqalx.Node, item *model.TopicMember) error {
	ret := _m.Called(c, node, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqalx.Node, *model.TopicMember) error); ok {
		r0 = rf(c, node, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
