syntax = "proto3";
package service.topic;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
message EmptyStruct {
}

message TopicFeedResp {
    repeated TopicFeedInfo items = 1 [(gogoproto.jsontag) = 'items'];
}


message TopicFeedInfo {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    int64 TopicID = 2 [(gogoproto.jsontag) = "topic_id"];

    string ActionType = 3 [(gogoproto.jsontag) = "action_type"];

    int64 ActionTime = 4 [(gogoproto.jsontag) = "action_time"];

    string ActionText = 5 [(gogoproto.jsontag) = "action_text"];

    int64 ActorID = 6 [(gogoproto.jsontag) = "actor_id"];

    string ActorType = 7 [(gogoproto.jsontag) = "actor_type"];

    int64 TargetID = 8 [(gogoproto.jsontag) = "target_id"];

    string TargetType = 9 [(gogoproto.jsontag) = "target_type"];

    // unix timestamp
    int64 CreatedAt = 10 [(gogoproto.jsontag) = "created_at"];

    // unix timestamp
    int64 UpdatedAt = 11 [(gogoproto.jsontag) = "updated_at"];


}


message TopicFeedReq {
    int64 TopicID = 1 [(gogoproto.jsontag) = "topic_id"];
    int32 Limit = 2 [(gogoproto.jsontag) = "limit"];
    int32 Offset = 3 [(gogoproto.jsontag) = "offset"];
}


service TopicFeed {
    rpc  GetTopicFeedPaged(TopicFeedReq) returns (TopicFeedResp);
}




