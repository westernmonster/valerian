syntax = "proto3";
package service.like;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
message EmptyStruct {
}

message LikeInfo {
    bool IsLike = 1 [(gogoproto.jsontag) = "is_like"];
}


message LikeReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "account_id"];
    int64 TargetID = 2 [(gogoproto.jsontag) = "target_id"];
    string TargetType = 3 [(gogoproto.jsontag) = "target_type"];
    bool UseMaster = 4;
}



message DislikeInfo {
    bool IsDislike = 1 [(gogoproto.jsontag) = "is_like"];
}


message DislikeReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "account_id"];
    int64 TargetID = 2 [(gogoproto.jsontag) = "target_id"];
    string TargetType = 3 [(gogoproto.jsontag) = "target_type"];
    bool UseMaster = 4;
}

service Like {
    rpc  IsLike(LikeReq) returns (LikeInfo);
    rpc  Like(LikeReq) returns (EmptyStruct);
    rpc  CancelLike(LikeReq) returns (EmptyStruct);

    rpc  IsDislike(DislikeReq) returns (DislikeInfo);
    rpc  Dislike(DislikeReq) returns (EmptyStruct);
    rpc  CancelDislike(DislikeReq) returns (EmptyStruct);
}






