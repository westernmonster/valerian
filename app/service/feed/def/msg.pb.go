// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package def

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCatalogArticleAdded struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"article_id"`
	TopicID              int64    `protobuf:"varint,2,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,3,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgCatalogArticleAdded) Reset()         { *m = MsgCatalogArticleAdded{} }
func (m *MsgCatalogArticleAdded) String() string { return proto.CompactTextString(m) }
func (*MsgCatalogArticleAdded) ProtoMessage()    {}
func (*MsgCatalogArticleAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}
func (m *MsgCatalogArticleAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCatalogArticleAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCatalogArticleAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCatalogArticleAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCatalogArticleAdded.Merge(m, src)
}
func (m *MsgCatalogArticleAdded) XXX_Size() int {
	return m.Size()
}
func (m *MsgCatalogArticleAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCatalogArticleAdded.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCatalogArticleAdded proto.InternalMessageInfo

func (m *MsgCatalogArticleAdded) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *MsgCatalogArticleAdded) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgCatalogArticleAdded) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgCatalogArticleAdded) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgCatalogArticleDeleted struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"article_id"`
	TopicID              int64    `protobuf:"varint,2,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,3,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgCatalogArticleDeleted) Reset()         { *m = MsgCatalogArticleDeleted{} }
func (m *MsgCatalogArticleDeleted) String() string { return proto.CompactTextString(m) }
func (*MsgCatalogArticleDeleted) ProtoMessage()    {}
func (*MsgCatalogArticleDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}
func (m *MsgCatalogArticleDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCatalogArticleDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCatalogArticleDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCatalogArticleDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCatalogArticleDeleted.Merge(m, src)
}
func (m *MsgCatalogArticleDeleted) XXX_Size() int {
	return m.Size()
}
func (m *MsgCatalogArticleDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCatalogArticleDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCatalogArticleDeleted proto.InternalMessageInfo

func (m *MsgCatalogArticleDeleted) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *MsgCatalogArticleDeleted) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgCatalogArticleDeleted) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgCatalogArticleDeleted) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgArticleCreated struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"article_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgArticleCreated) Reset()         { *m = MsgArticleCreated{} }
func (m *MsgArticleCreated) String() string { return proto.CompactTextString(m) }
func (*MsgArticleCreated) ProtoMessage()    {}
func (*MsgArticleCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{2}
}
func (m *MsgArticleCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArticleCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArticleCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArticleCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArticleCreated.Merge(m, src)
}
func (m *MsgArticleCreated) XXX_Size() int {
	return m.Size()
}
func (m *MsgArticleCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArticleCreated.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArticleCreated proto.InternalMessageInfo

func (m *MsgArticleCreated) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *MsgArticleCreated) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgArticleCreated) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgArticleUpdated struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"article_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgArticleUpdated) Reset()         { *m = MsgArticleUpdated{} }
func (m *MsgArticleUpdated) String() string { return proto.CompactTextString(m) }
func (*MsgArticleUpdated) ProtoMessage()    {}
func (*MsgArticleUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{3}
}
func (m *MsgArticleUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArticleUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArticleUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArticleUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArticleUpdated.Merge(m, src)
}
func (m *MsgArticleUpdated) XXX_Size() int {
	return m.Size()
}
func (m *MsgArticleUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArticleUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArticleUpdated proto.InternalMessageInfo

func (m *MsgArticleUpdated) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *MsgArticleUpdated) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgArticleUpdated) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgArticleDeleted struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"article_id"`
	CreatedBy            int64    `protobuf:"varint,2,opt,name=CreatedBy,proto3" json:"created_by"`
	ActorID              int64    `protobuf:"varint,3,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgArticleDeleted) Reset()         { *m = MsgArticleDeleted{} }
func (m *MsgArticleDeleted) String() string { return proto.CompactTextString(m) }
func (*MsgArticleDeleted) ProtoMessage()    {}
func (*MsgArticleDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{4}
}
func (m *MsgArticleDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArticleDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArticleDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArticleDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArticleDeleted.Merge(m, src)
}
func (m *MsgArticleDeleted) XXX_Size() int {
	return m.Size()
}
func (m *MsgArticleDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArticleDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArticleDeleted proto.InternalMessageInfo

func (m *MsgArticleDeleted) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *MsgArticleDeleted) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *MsgArticleDeleted) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgArticleDeleted) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgArticleLiked struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"article_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgArticleLiked) Reset()         { *m = MsgArticleLiked{} }
func (m *MsgArticleLiked) String() string { return proto.CompactTextString(m) }
func (*MsgArticleLiked) ProtoMessage()    {}
func (*MsgArticleLiked) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{5}
}
func (m *MsgArticleLiked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArticleLiked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArticleLiked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArticleLiked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArticleLiked.Merge(m, src)
}
func (m *MsgArticleLiked) XXX_Size() int {
	return m.Size()
}
func (m *MsgArticleLiked) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArticleLiked.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArticleLiked proto.InternalMessageInfo

func (m *MsgArticleLiked) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *MsgArticleLiked) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgArticleLiked) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgArticleFaved struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"article_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgArticleFaved) Reset()         { *m = MsgArticleFaved{} }
func (m *MsgArticleFaved) String() string { return proto.CompactTextString(m) }
func (*MsgArticleFaved) ProtoMessage()    {}
func (*MsgArticleFaved) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{6}
}
func (m *MsgArticleFaved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArticleFaved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArticleFaved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArticleFaved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArticleFaved.Merge(m, src)
}
func (m *MsgArticleFaved) XXX_Size() int {
	return m.Size()
}
func (m *MsgArticleFaved) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArticleFaved.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArticleFaved proto.InternalMessageInfo

func (m *MsgArticleFaved) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *MsgArticleFaved) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgArticleFaved) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgReviseAdded struct {
	ReviseID             int64    `protobuf:"varint,1,opt,name=ReviseID,proto3" json:"revise_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgReviseAdded) Reset()         { *m = MsgReviseAdded{} }
func (m *MsgReviseAdded) String() string { return proto.CompactTextString(m) }
func (*MsgReviseAdded) ProtoMessage()    {}
func (*MsgReviseAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{7}
}
func (m *MsgReviseAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReviseAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReviseAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReviseAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReviseAdded.Merge(m, src)
}
func (m *MsgReviseAdded) XXX_Size() int {
	return m.Size()
}
func (m *MsgReviseAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReviseAdded.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReviseAdded proto.InternalMessageInfo

func (m *MsgReviseAdded) GetReviseID() int64 {
	if m != nil {
		return m.ReviseID
	}
	return 0
}

func (m *MsgReviseAdded) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgReviseAdded) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgReviseUpdated struct {
	ReviseID             int64    `protobuf:"varint,1,opt,name=ReviseID,proto3" json:"revise_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgReviseUpdated) Reset()         { *m = MsgReviseUpdated{} }
func (m *MsgReviseUpdated) String() string { return proto.CompactTextString(m) }
func (*MsgReviseUpdated) ProtoMessage()    {}
func (*MsgReviseUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{8}
}
func (m *MsgReviseUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReviseUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReviseUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReviseUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReviseUpdated.Merge(m, src)
}
func (m *MsgReviseUpdated) XXX_Size() int {
	return m.Size()
}
func (m *MsgReviseUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReviseUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReviseUpdated proto.InternalMessageInfo

func (m *MsgReviseUpdated) GetReviseID() int64 {
	if m != nil {
		return m.ReviseID
	}
	return 0
}

func (m *MsgReviseUpdated) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgReviseUpdated) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgReviseDeleted struct {
	ReviseID             int64    `protobuf:"varint,1,opt,name=ReviseID,proto3" json:"revise_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgReviseDeleted) Reset()         { *m = MsgReviseDeleted{} }
func (m *MsgReviseDeleted) String() string { return proto.CompactTextString(m) }
func (*MsgReviseDeleted) ProtoMessage()    {}
func (*MsgReviseDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{9}
}
func (m *MsgReviseDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReviseDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReviseDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReviseDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReviseDeleted.Merge(m, src)
}
func (m *MsgReviseDeleted) XXX_Size() int {
	return m.Size()
}
func (m *MsgReviseDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReviseDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReviseDeleted proto.InternalMessageInfo

func (m *MsgReviseDeleted) GetReviseID() int64 {
	if m != nil {
		return m.ReviseID
	}
	return 0
}

func (m *MsgReviseDeleted) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgReviseDeleted) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgReviseLiked struct {
	ReviseID             int64    `protobuf:"varint,1,opt,name=ReviseID,proto3" json:"revise_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgReviseLiked) Reset()         { *m = MsgReviseLiked{} }
func (m *MsgReviseLiked) String() string { return proto.CompactTextString(m) }
func (*MsgReviseLiked) ProtoMessage()    {}
func (*MsgReviseLiked) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{10}
}
func (m *MsgReviseLiked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReviseLiked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReviseLiked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReviseLiked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReviseLiked.Merge(m, src)
}
func (m *MsgReviseLiked) XXX_Size() int {
	return m.Size()
}
func (m *MsgReviseLiked) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReviseLiked.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReviseLiked proto.InternalMessageInfo

func (m *MsgReviseLiked) GetReviseID() int64 {
	if m != nil {
		return m.ReviseID
	}
	return 0
}

func (m *MsgReviseLiked) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgReviseLiked) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgReviseFaved struct {
	ReviseID             int64    `protobuf:"varint,1,opt,name=ReviseID,proto3" json:"revise_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgReviseFaved) Reset()         { *m = MsgReviseFaved{} }
func (m *MsgReviseFaved) String() string { return proto.CompactTextString(m) }
func (*MsgReviseFaved) ProtoMessage()    {}
func (*MsgReviseFaved) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{11}
}
func (m *MsgReviseFaved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReviseFaved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReviseFaved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReviseFaved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReviseFaved.Merge(m, src)
}
func (m *MsgReviseFaved) XXX_Size() int {
	return m.Size()
}
func (m *MsgReviseFaved) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReviseFaved.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReviseFaved proto.InternalMessageInfo

func (m *MsgReviseFaved) GetReviseID() int64 {
	if m != nil {
		return m.ReviseID
	}
	return 0
}

func (m *MsgReviseFaved) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgReviseFaved) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgDiscussionAdded struct {
	DiscussionID         int64    `protobuf:"varint,1,opt,name=DiscussionID,proto3" json:"discussion_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgDiscussionAdded) Reset()         { *m = MsgDiscussionAdded{} }
func (m *MsgDiscussionAdded) String() string { return proto.CompactTextString(m) }
func (*MsgDiscussionAdded) ProtoMessage()    {}
func (*MsgDiscussionAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{12}
}
func (m *MsgDiscussionAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscussionAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscussionAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscussionAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscussionAdded.Merge(m, src)
}
func (m *MsgDiscussionAdded) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscussionAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscussionAdded.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscussionAdded proto.InternalMessageInfo

func (m *MsgDiscussionAdded) GetDiscussionID() int64 {
	if m != nil {
		return m.DiscussionID
	}
	return 0
}

func (m *MsgDiscussionAdded) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgDiscussionAdded) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgDiscussionUpdated struct {
	DiscussionID         int64    `protobuf:"varint,1,opt,name=DiscussionID,proto3" json:"discussion_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgDiscussionUpdated) Reset()         { *m = MsgDiscussionUpdated{} }
func (m *MsgDiscussionUpdated) String() string { return proto.CompactTextString(m) }
func (*MsgDiscussionUpdated) ProtoMessage()    {}
func (*MsgDiscussionUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{13}
}
func (m *MsgDiscussionUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscussionUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscussionUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscussionUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscussionUpdated.Merge(m, src)
}
func (m *MsgDiscussionUpdated) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscussionUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscussionUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscussionUpdated proto.InternalMessageInfo

func (m *MsgDiscussionUpdated) GetDiscussionID() int64 {
	if m != nil {
		return m.DiscussionID
	}
	return 0
}

func (m *MsgDiscussionUpdated) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgDiscussionUpdated) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgDiscussionDeleted struct {
	DiscussionID         int64    `protobuf:"varint,1,opt,name=DiscussionID,proto3" json:"discussion_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgDiscussionDeleted) Reset()         { *m = MsgDiscussionDeleted{} }
func (m *MsgDiscussionDeleted) String() string { return proto.CompactTextString(m) }
func (*MsgDiscussionDeleted) ProtoMessage()    {}
func (*MsgDiscussionDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{14}
}
func (m *MsgDiscussionDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscussionDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscussionDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscussionDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscussionDeleted.Merge(m, src)
}
func (m *MsgDiscussionDeleted) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscussionDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscussionDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscussionDeleted proto.InternalMessageInfo

func (m *MsgDiscussionDeleted) GetDiscussionID() int64 {
	if m != nil {
		return m.DiscussionID
	}
	return 0
}

func (m *MsgDiscussionDeleted) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgDiscussionDeleted) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgDiscussionLiked struct {
	DiscussionID         int64    `protobuf:"varint,1,opt,name=DiscussionID,proto3" json:"discussion_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgDiscussionLiked) Reset()         { *m = MsgDiscussionLiked{} }
func (m *MsgDiscussionLiked) String() string { return proto.CompactTextString(m) }
func (*MsgDiscussionLiked) ProtoMessage()    {}
func (*MsgDiscussionLiked) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{15}
}
func (m *MsgDiscussionLiked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscussionLiked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscussionLiked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscussionLiked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscussionLiked.Merge(m, src)
}
func (m *MsgDiscussionLiked) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscussionLiked) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscussionLiked.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscussionLiked proto.InternalMessageInfo

func (m *MsgDiscussionLiked) GetDiscussionID() int64 {
	if m != nil {
		return m.DiscussionID
	}
	return 0
}

func (m *MsgDiscussionLiked) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgDiscussionLiked) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgDiscussionFaved struct {
	DiscussionID         int64    `protobuf:"varint,1,opt,name=DiscussionID,proto3" json:"discussion_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgDiscussionFaved) Reset()         { *m = MsgDiscussionFaved{} }
func (m *MsgDiscussionFaved) String() string { return proto.CompactTextString(m) }
func (*MsgDiscussionFaved) ProtoMessage()    {}
func (*MsgDiscussionFaved) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{16}
}
func (m *MsgDiscussionFaved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDiscussionFaved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDiscussionFaved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDiscussionFaved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDiscussionFaved.Merge(m, src)
}
func (m *MsgDiscussionFaved) XXX_Size() int {
	return m.Size()
}
func (m *MsgDiscussionFaved) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDiscussionFaved.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDiscussionFaved proto.InternalMessageInfo

func (m *MsgDiscussionFaved) GetDiscussionID() int64 {
	if m != nil {
		return m.DiscussionID
	}
	return 0
}

func (m *MsgDiscussionFaved) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgDiscussionFaved) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgMemberFollowed struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"account_id"`
	TargetAccountID      int64    `protobuf:"varint,2,opt,name=TargetAccountID,proto3" json:"target_account_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgMemberFollowed) Reset()         { *m = MsgMemberFollowed{} }
func (m *MsgMemberFollowed) String() string { return proto.CompactTextString(m) }
func (*MsgMemberFollowed) ProtoMessage()    {}
func (*MsgMemberFollowed) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{17}
}
func (m *MsgMemberFollowed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMemberFollowed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMemberFollowed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMemberFollowed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMemberFollowed.Merge(m, src)
}
func (m *MsgMemberFollowed) XXX_Size() int {
	return m.Size()
}
func (m *MsgMemberFollowed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMemberFollowed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMemberFollowed proto.InternalMessageInfo

func (m *MsgMemberFollowed) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *MsgMemberFollowed) GetTargetAccountID() int64 {
	if m != nil {
		return m.TargetAccountID
	}
	return 0
}

func (m *MsgMemberFollowed) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicAdded struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicAdded) Reset()         { *m = MsgTopicAdded{} }
func (m *MsgTopicAdded) String() string { return proto.CompactTextString(m) }
func (*MsgTopicAdded) ProtoMessage()    {}
func (*MsgTopicAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{18}
}
func (m *MsgTopicAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicAdded.Merge(m, src)
}
func (m *MsgTopicAdded) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicAdded.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicAdded proto.InternalMessageInfo

func (m *MsgTopicAdded) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicAdded) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicAdded) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicDeleted struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicDeleted) Reset()         { *m = MsgTopicDeleted{} }
func (m *MsgTopicDeleted) String() string { return proto.CompactTextString(m) }
func (*MsgTopicDeleted) ProtoMessage()    {}
func (*MsgTopicDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{19}
}
func (m *MsgTopicDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicDeleted.Merge(m, src)
}
func (m *MsgTopicDeleted) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicDeleted proto.InternalMessageInfo

func (m *MsgTopicDeleted) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicDeleted) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicDeleted) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicFollowed struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicFollowed) Reset()         { *m = MsgTopicFollowed{} }
func (m *MsgTopicFollowed) String() string { return proto.CompactTextString(m) }
func (*MsgTopicFollowed) ProtoMessage()    {}
func (*MsgTopicFollowed) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{20}
}
func (m *MsgTopicFollowed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicFollowed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicFollowed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicFollowed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicFollowed.Merge(m, src)
}
func (m *MsgTopicFollowed) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicFollowed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicFollowed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicFollowed proto.InternalMessageInfo

func (m *MsgTopicFollowed) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicFollowed) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicFollowed) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicFaved struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicFaved) Reset()         { *m = MsgTopicFaved{} }
func (m *MsgTopicFaved) String() string { return proto.CompactTextString(m) }
func (*MsgTopicFaved) ProtoMessage()    {}
func (*MsgTopicFaved) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{21}
}
func (m *MsgTopicFaved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicFaved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicFaved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicFaved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicFaved.Merge(m, src)
}
func (m *MsgTopicFaved) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicFaved) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicFaved.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicFaved proto.InternalMessageInfo

func (m *MsgTopicFaved) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicFaved) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicFaved) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicLeaved struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicLeaved) Reset()         { *m = MsgTopicLeaved{} }
func (m *MsgTopicLeaved) String() string { return proto.CompactTextString(m) }
func (*MsgTopicLeaved) ProtoMessage()    {}
func (*MsgTopicLeaved) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{22}
}
func (m *MsgTopicLeaved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicLeaved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicLeaved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicLeaved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicLeaved.Merge(m, src)
}
func (m *MsgTopicLeaved) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicLeaved) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicLeaved.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicLeaved proto.InternalMessageInfo

func (m *MsgTopicLeaved) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicLeaved) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicLeaved) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicFollowRequested struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicFollowRequested) Reset()         { *m = MsgTopicFollowRequested{} }
func (m *MsgTopicFollowRequested) String() string { return proto.CompactTextString(m) }
func (*MsgTopicFollowRequested) ProtoMessage()    {}
func (*MsgTopicFollowRequested) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{23}
}
func (m *MsgTopicFollowRequested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicFollowRequested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicFollowRequested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicFollowRequested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicFollowRequested.Merge(m, src)
}
func (m *MsgTopicFollowRequested) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicFollowRequested) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicFollowRequested.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicFollowRequested proto.InternalMessageInfo

func (m *MsgTopicFollowRequested) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicFollowRequested) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicFollowRequested) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicFollowRejected struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicFollowRejected) Reset()         { *m = MsgTopicFollowRejected{} }
func (m *MsgTopicFollowRejected) String() string { return proto.CompactTextString(m) }
func (*MsgTopicFollowRejected) ProtoMessage()    {}
func (*MsgTopicFollowRejected) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{24}
}
func (m *MsgTopicFollowRejected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicFollowRejected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicFollowRejected.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicFollowRejected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicFollowRejected.Merge(m, src)
}
func (m *MsgTopicFollowRejected) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicFollowRejected) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicFollowRejected.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicFollowRejected proto.InternalMessageInfo

func (m *MsgTopicFollowRejected) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicFollowRejected) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicFollowRejected) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicFollowApproved struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicFollowApproved) Reset()         { *m = MsgTopicFollowApproved{} }
func (m *MsgTopicFollowApproved) String() string { return proto.CompactTextString(m) }
func (*MsgTopicFollowApproved) ProtoMessage()    {}
func (*MsgTopicFollowApproved) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{25}
}
func (m *MsgTopicFollowApproved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicFollowApproved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicFollowApproved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicFollowApproved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicFollowApproved.Merge(m, src)
}
func (m *MsgTopicFollowApproved) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicFollowApproved) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicFollowApproved.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicFollowApproved proto.InternalMessageInfo

func (m *MsgTopicFollowApproved) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicFollowApproved) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicFollowApproved) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgTopicInviteSent struct {
	InviteID             int64    `protobuf:"varint,1,opt,name=InviteID,proto3" json:"invite_id"`
	TopicID              int64    `protobuf:"varint,2,opt,name=TopicID,proto3" json:"topic_id"`
	ActorID              int64    `protobuf:"varint,3,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgTopicInviteSent) Reset()         { *m = MsgTopicInviteSent{} }
func (m *MsgTopicInviteSent) String() string { return proto.CompactTextString(m) }
func (*MsgTopicInviteSent) ProtoMessage()    {}
func (*MsgTopicInviteSent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{26}
}
func (m *MsgTopicInviteSent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopicInviteSent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopicInviteSent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopicInviteSent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopicInviteSent.Merge(m, src)
}
func (m *MsgTopicInviteSent) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopicInviteSent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopicInviteSent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopicInviteSent proto.InternalMessageInfo

func (m *MsgTopicInviteSent) GetInviteID() int64 {
	if m != nil {
		return m.InviteID
	}
	return 0
}

func (m *MsgTopicInviteSent) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *MsgTopicInviteSent) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgTopicInviteSent) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

type MsgCommentLiked struct {
	CommentID            int64    `protobuf:"varint,1,opt,name=CommentID,proto3" json:"comment_id"`
	ActorID              int64    `protobuf:"varint,2,opt,name=ActorID,proto3" json:"actor_id"`
	ActionTime           int64    `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgCommentLiked) Reset()         { *m = MsgCommentLiked{} }
func (m *MsgCommentLiked) String() string { return proto.CompactTextString(m) }
func (*MsgCommentLiked) ProtoMessage()    {}
func (*MsgCommentLiked) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{27}
}
func (m *MsgCommentLiked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommentLiked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommentLiked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommentLiked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommentLiked.Merge(m, src)
}
func (m *MsgCommentLiked) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommentLiked) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommentLiked.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommentLiked proto.InternalMessageInfo

func (m *MsgCommentLiked) GetCommentID() int64 {
	if m != nil {
		return m.CommentID
	}
	return 0
}

func (m *MsgCommentLiked) GetActorID() int64 {
	if m != nil {
		return m.ActorID
	}
	return 0
}

func (m *MsgCommentLiked) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgCatalogArticleAdded)(nil), "def.MsgCatalogArticleAdded")
	proto.RegisterType((*MsgCatalogArticleDeleted)(nil), "def.MsgCatalogArticleDeleted")
	proto.RegisterType((*MsgArticleCreated)(nil), "def.MsgArticleCreated")
	proto.RegisterType((*MsgArticleUpdated)(nil), "def.MsgArticleUpdated")
	proto.RegisterType((*MsgArticleDeleted)(nil), "def.MsgArticleDeleted")
	proto.RegisterType((*MsgArticleLiked)(nil), "def.MsgArticleLiked")
	proto.RegisterType((*MsgArticleFaved)(nil), "def.MsgArticleFaved")
	proto.RegisterType((*MsgReviseAdded)(nil), "def.MsgReviseAdded")
	proto.RegisterType((*MsgReviseUpdated)(nil), "def.MsgReviseUpdated")
	proto.RegisterType((*MsgReviseDeleted)(nil), "def.MsgReviseDeleted")
	proto.RegisterType((*MsgReviseLiked)(nil), "def.MsgReviseLiked")
	proto.RegisterType((*MsgReviseFaved)(nil), "def.MsgReviseFaved")
	proto.RegisterType((*MsgDiscussionAdded)(nil), "def.MsgDiscussionAdded")
	proto.RegisterType((*MsgDiscussionUpdated)(nil), "def.MsgDiscussionUpdated")
	proto.RegisterType((*MsgDiscussionDeleted)(nil), "def.MsgDiscussionDeleted")
	proto.RegisterType((*MsgDiscussionLiked)(nil), "def.MsgDiscussionLiked")
	proto.RegisterType((*MsgDiscussionFaved)(nil), "def.MsgDiscussionFaved")
	proto.RegisterType((*MsgMemberFollowed)(nil), "def.MsgMemberFollowed")
	proto.RegisterType((*MsgTopicAdded)(nil), "def.MsgTopicAdded")
	proto.RegisterType((*MsgTopicDeleted)(nil), "def.MsgTopicDeleted")
	proto.RegisterType((*MsgTopicFollowed)(nil), "def.MsgTopicFollowed")
	proto.RegisterType((*MsgTopicFaved)(nil), "def.MsgTopicFaved")
	proto.RegisterType((*MsgTopicLeaved)(nil), "def.MsgTopicLeaved")
	proto.RegisterType((*MsgTopicFollowRequested)(nil), "def.MsgTopicFollowRequested")
	proto.RegisterType((*MsgTopicFollowRejected)(nil), "def.MsgTopicFollowRejected")
	proto.RegisterType((*MsgTopicFollowApproved)(nil), "def.MsgTopicFollowApproved")
	proto.RegisterType((*MsgTopicInviteSent)(nil), "def.MsgTopicInviteSent")
	proto.RegisterType((*MsgCommentLiked)(nil), "def.MsgCommentLiked")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x98, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb5, 0x0d, 0x82, 0x66, 0x49, 0x1a, 0x62, 0xf1, 0x11, 0x71, 0x88, 0x51, 0x0f, 0x08,
	0xa4, 0xd2, 0x1c, 0x10, 0x67, 0x94, 0x0f, 0x55, 0x8a, 0x54, 0x5f, 0x42, 0x38, 0x47, 0xce, 0x7a,
	0x6b, 0x16, 0x62, 0x6f, 0xf0, 0x6e, 0x82, 0xfa, 0x16, 0x7c, 0x09, 0x41, 0xcf, 0x88, 0x17, 0xe0,
	0x05, 0xb8, 0x51, 0x6e, 0x3c, 0x81, 0x85, 0x72, 0xf4, 0x53, 0x20, 0xef, 0xf8, 0x23, 0x6e, 0x2f,
	0x50, 0x61, 0x65, 0xb9, 0x75, 0x67, 0xfe, 0xd6, 0xfc, 0x76, 0x67, 0xa7, 0x33, 0x1b, 0x5c, 0xf5,
	0x84, 0xbb, 0x3f, 0x0f, 0xb8, 0xe4, 0x46, 0xc5, 0xa1, 0x47, 0xb7, 0x1f, 0xb8, 0x4c, 0x3e, 0x5b,
	0x4c, 0xf7, 0x09, 0xf7, 0x3a, 0x2e, 0x77, 0x79, 0x47, 0xf9, 0xa6, 0x8b, 0x23, 0xb5, 0x52, 0x0b,
	0xf5, 0x17, 0x7c, 0xb3, 0xfb, 0x1d, 0xe1, 0x9b, 0x96, 0x70, 0xfb, 0xb6, 0xb4, 0x67, 0xdc, 0xed,
	0x06, 0x92, 0x91, 0x19, 0xed, 0x3a, 0x0e, 0x75, 0x8c, 0x3d, 0x5c, 0x4d, 0xd6, 0xc3, 0x41, 0x0b,
	0xdd, 0x41, 0xf7, 0x2a, 0xbd, 0x9d, 0x28, 0x34, 0xb1, 0x0d, 0xc6, 0x09, 0x73, 0x46, 0xb9, 0xc0,
	0xb8, 0x8b, 0xaf, 0x8c, 0xf9, 0x9c, 0x91, 0xe1, 0xa0, 0xb5, 0xa5, 0xb4, 0xb5, 0x28, 0x34, 0xb7,
	0x65, 0x6c, 0x8a, 0x95, 0xa9, 0x33, 0xd6, 0x75, 0x89, 0xe4, 0xc1, 0x70, 0xd0, 0xaa, 0xe4, 0x3a,
	0x3b, 0x36, 0x29, 0x5d, 0xe2, 0x34, 0x3a, 0x18, 0x77, 0x89, 0x64, 0xdc, 0x1f, 0x33, 0x8f, 0xb6,
	0x2e, 0x29, 0x69, 0x23, 0x0a, 0xcd, 0xab, 0xb6, 0xb2, 0x4e, 0x24, 0xf3, 0xe8, 0x68, 0x4d, 0xb2,
	0xfb, 0x03, 0xe1, 0xd6, 0xb9, 0x9d, 0x0c, 0xe8, 0x8c, 0xca, 0xff, 0x6f, 0x2f, 0x27, 0x08, 0x37,
	0x2d, 0x91, 0x6e, 0xa2, 0x1f, 0x50, 0xfb, 0x42, 0x9b, 0x48, 0xe1, 0xb6, 0x4a, 0x84, 0x7b, 0x3a,
	0x77, 0x74, 0x82, 0x3b, 0x2d, 0xc0, 0x5d, 0x2c, 0xfd, 0x7b, 0xb8, 0x9a, 0x1c, 0x79, 0xef, 0x38,
	0xc1, 0x53, 0x6a, 0x02, 0xc6, 0xc9, 0xf4, 0x78, 0x94, 0x0b, 0xca, 0xbb, 0x04, 0x1f, 0x11, 0x6e,
	0xe4, 0x5b, 0x39, 0x64, 0x2f, 0xf4, 0x39, 0xe5, 0x22, 0xda, 0x81, 0xbd, 0xd4, 0x07, 0xed, 0x3d,
	0xc2, 0x3b, 0x96, 0x70, 0x47, 0x74, 0xc9, 0x44, 0xf2, 0x8f, 0xec, 0x3e, 0xde, 0x86, 0x65, 0x06,
	0x56, 0x8f, 0x42, 0xb3, 0x1a, 0x28, 0x5b, 0x1c, 0x2d, 0x73, 0x97, 0x87, 0xf5, 0x01, 0xe1, 0x6b,
	0x19, 0x56, 0x5a, 0x33, 0xda, 0x81, 0xa5, 0xf5, 0xa2, 0x03, 0x58, 0x21, 0x91, 0x70, 0xfb, 0xb5,
	0xc3, 0x82, 0x9b, 0xaf, 0x03, 0xd6, 0x67, 0x84, 0x0d, 0x4b, 0xb8, 0x03, 0x26, 0xc8, 0x42, 0x08,
	0xc6, 0x7d, 0xb8, 0xfa, 0x8f, 0x70, 0x2d, 0x37, 0x65, 0x78, 0xcd, 0x28, 0x34, 0xeb, 0x4e, 0x66,
	0x8f, 0x23, 0x17, 0x64, 0xe5, 0x61, 0x7e, 0x41, 0xf8, 0x7a, 0x01, 0x33, 0x2d, 0x05, 0xed, 0x41,
	0xd3, 0xd2, 0xd0, 0x0d, 0xf4, 0x5c, 0xe2, 0xa1, 0x54, 0xb4, 0xc7, 0x84, 0xd2, 0xd1, 0x0d, 0xf3,
	0x2b, 0x8c, 0x0f, 0x16, 0xf5, 0xa6, 0x34, 0x38, 0xe0, 0xb3, 0x19, 0x7f, 0x95, 0xb4, 0x36, 0x42,
	0xf8, 0xc2, 0x97, 0x67, 0x5a, 0x1b, 0x18, 0xa1, 0xb5, 0xa5, 0x02, 0xe3, 0x31, 0x6e, 0x8c, 0xed,
	0xc0, 0xa5, 0x32, 0xff, 0x06, 0x20, 0x6f, 0x44, 0xa1, 0xd9, 0x94, 0xca, 0x35, 0x59, 0xfb, 0xf4,
	0xac, 0xfa, 0xef, 0xa9, 0x5f, 0x23, 0x5c, 0xb7, 0x84, 0xab, 0xc6, 0x52, 0xa8, 0xfb, 0xb5, 0x09,
	0x16, 0xfd, 0xe1, 0x04, 0xfb, 0x6f, 0x0f, 0xf2, 0x2d, 0x4c, 0x08, 0x2a, 0x4e, 0x5a, 0x3a, 0x1b,
	0x87, 0x7a, 0x07, 0xbd, 0x4e, 0xc5, 0xc9, 0x92, 0xbb, 0x71, 0xaa, 0xf5, 0xec, 0x41, 0x55, 0x6c,
	0x1c, 0xe9, 0x0d, 0x34, 0x39, 0x15, 0xe7, 0x90, 0xea, 0xc1, 0x74, 0x82, 0xf0, 0xad, 0x62, 0xf2,
	0x46, 0xf4, 0xe5, 0x82, 0x0a, 0x2d, 0x6e, 0xd6, 0x27, 0x78, 0x46, 0x17, 0xe0, 0x9e, 0x53, 0xa2,
	0x29, 0x5b, 0x77, 0x3e, 0x0f, 0xb8, 0x16, 0x49, 0xfd, 0x06, 0x6d, 0x01, 0xe2, 0xf8, 0x4b, 0x26,
	0xe9, 0x13, 0xea, 0xcb, 0x78, 0xa2, 0x82, 0x55, 0x71, 0xa2, 0x62, 0xca, 0xa6, 0x26, 0xaa, 0xd4,
	0xbd, 0xf9, 0xb7, 0x7a, 0xf2, 0x16, 0xea, 0x73, 0xcf, 0xa3, 0xbe, 0xcc, 0x9e, 0x69, 0xc9, 0xba,
	0xd8, 0x30, 0x08, 0x18, 0x55, 0xc3, 0xc8, 0x04, 0xa5, 0x9d, 0x6e, 0xaf, 0x76, 0xba, 0x6a, 0xa3,
	0x9f, 0xab, 0x36, 0xfa, 0xb5, 0x6a, 0xa3, 0xe9, 0x65, 0xf5, 0x8b, 0xcf, 0xc3, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xad, 0xae, 0x62, 0x31, 0x32, 0x12, 0x00, 0x00,
}

func (m *MsgCatalogArticleAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCatalogArticleAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCatalogArticleAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x18
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCatalogArticleDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCatalogArticleDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCatalogArticleDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x18
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgArticleCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArticleCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArticleCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgArticleUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArticleUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArticleUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgArticleDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArticleDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArticleDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x18
	}
	if m.CreatedBy != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgArticleLiked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArticleLiked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArticleLiked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgArticleFaved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArticleFaved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArticleFaved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReviseAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReviseAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReviseAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ReviseID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ReviseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReviseUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReviseUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReviseUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ReviseID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ReviseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReviseDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReviseDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReviseDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ReviseID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ReviseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReviseLiked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReviseLiked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReviseLiked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ReviseID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ReviseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReviseFaved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReviseFaved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReviseFaved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.ReviseID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ReviseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDiscussionAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscussionAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscussionAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.DiscussionID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.DiscussionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDiscussionUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscussionUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscussionUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.DiscussionID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.DiscussionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDiscussionDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscussionDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscussionDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.DiscussionID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.DiscussionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDiscussionLiked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscussionLiked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscussionLiked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.DiscussionID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.DiscussionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDiscussionFaved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDiscussionFaved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDiscussionFaved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.DiscussionID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.DiscussionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgMemberFollowed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMemberFollowed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMemberFollowed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.TargetAccountID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TargetAccountID))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicFollowed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicFollowed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicFollowed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicFaved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicFaved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicFaved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicLeaved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicLeaved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicLeaved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicFollowRequested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicFollowRequested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicFollowRequested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicFollowRejected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicFollowRejected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicFollowRejected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicFollowApproved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicFollowApproved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicFollowApproved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopicInviteSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopicInviteSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopicInviteSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x18
	}
	if m.TopicID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x10
	}
	if m.InviteID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.InviteID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommentLiked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommentLiked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommentLiked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionTime != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ActorID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActorID))
		i--
		dAtA[i] = 0x10
	}
	if m.CommentID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.CommentID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCatalogArticleAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovMsg(uint64(m.ArticleID))
	}
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgCatalogArticleDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovMsg(uint64(m.ArticleID))
	}
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgArticleCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovMsg(uint64(m.ArticleID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgArticleUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovMsg(uint64(m.ArticleID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgArticleDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovMsg(uint64(m.ArticleID))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovMsg(uint64(m.CreatedBy))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgArticleLiked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovMsg(uint64(m.ArticleID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgArticleFaved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovMsg(uint64(m.ArticleID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgReviseAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviseID != 0 {
		n += 1 + sovMsg(uint64(m.ReviseID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgReviseUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviseID != 0 {
		n += 1 + sovMsg(uint64(m.ReviseID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgReviseDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviseID != 0 {
		n += 1 + sovMsg(uint64(m.ReviseID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgReviseLiked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviseID != 0 {
		n += 1 + sovMsg(uint64(m.ReviseID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgReviseFaved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviseID != 0 {
		n += 1 + sovMsg(uint64(m.ReviseID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgDiscussionAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscussionID != 0 {
		n += 1 + sovMsg(uint64(m.DiscussionID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgDiscussionUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscussionID != 0 {
		n += 1 + sovMsg(uint64(m.DiscussionID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgDiscussionDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscussionID != 0 {
		n += 1 + sovMsg(uint64(m.DiscussionID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgDiscussionLiked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscussionID != 0 {
		n += 1 + sovMsg(uint64(m.DiscussionID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgDiscussionFaved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscussionID != 0 {
		n += 1 + sovMsg(uint64(m.DiscussionID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgMemberFollowed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovMsg(uint64(m.AccountID))
	}
	if m.TargetAccountID != 0 {
		n += 1 + sovMsg(uint64(m.TargetAccountID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicFollowed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicFaved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicLeaved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicFollowRequested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicFollowRejected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicFollowApproved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgTopicInviteSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InviteID != 0 {
		n += 1 + sovMsg(uint64(m.InviteID))
	}
	if m.TopicID != 0 {
		n += 1 + sovMsg(uint64(m.TopicID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgCommentLiked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommentID != 0 {
		n += 1 + sovMsg(uint64(m.CommentID))
	}
	if m.ActorID != 0 {
		n += 1 + sovMsg(uint64(m.ActorID))
	}
	if m.ActionTime != 0 {
		n += 1 + sovMsg(uint64(m.ActionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCatalogArticleAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCatalogArticleAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCatalogArticleAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCatalogArticleDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCatalogArticleDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCatalogArticleDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArticleCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArticleCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArticleCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArticleUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArticleUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArticleUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArticleDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArticleDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArticleDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArticleLiked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArticleLiked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArticleLiked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArticleFaved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArticleFaved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArticleFaved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReviseAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReviseAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReviseAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseID", wireType)
			}
			m.ReviseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReviseUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReviseUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReviseUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseID", wireType)
			}
			m.ReviseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReviseDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReviseDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReviseDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseID", wireType)
			}
			m.ReviseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReviseLiked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReviseLiked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReviseLiked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseID", wireType)
			}
			m.ReviseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReviseFaved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReviseFaved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReviseFaved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseID", wireType)
			}
			m.ReviseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscussionAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscussionAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscussionAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussionID", wireType)
			}
			m.DiscussionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscussionUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscussionUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscussionUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussionID", wireType)
			}
			m.DiscussionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscussionDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscussionDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscussionDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussionID", wireType)
			}
			m.DiscussionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscussionLiked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscussionLiked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscussionLiked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussionID", wireType)
			}
			m.DiscussionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDiscussionFaved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDiscussionFaved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDiscussionFaved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussionID", wireType)
			}
			m.DiscussionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMemberFollowed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMemberFollowed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMemberFollowed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAccountID", wireType)
			}
			m.TargetAccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetAccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicFollowed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicFollowed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicFollowed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicFaved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicFaved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicFaved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicLeaved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicLeaved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicLeaved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicFollowRequested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicFollowRequested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicFollowRequested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicFollowRejected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicFollowRejected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicFollowRejected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicFollowApproved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicFollowApproved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicFollowApproved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopicInviteSent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopicInviteSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopicInviteSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteID", wireType)
			}
			m.InviteID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommentLiked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommentLiked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommentLiked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentID", wireType)
			}
			m.CommentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorID", wireType)
			}
			m.ActorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMsg
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)
