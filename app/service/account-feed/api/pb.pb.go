// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
type EmptyStruct struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{0}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(m, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

type AccountFeedResp struct {
	Items                []*AccountFeedInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AccountFeedResp) Reset()         { *m = AccountFeedResp{} }
func (m *AccountFeedResp) String() string { return proto.CompactTextString(m) }
func (*AccountFeedResp) ProtoMessage()    {}
func (*AccountFeedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{1}
}
func (m *AccountFeedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountFeedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountFeedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountFeedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountFeedResp.Merge(m, src)
}
func (m *AccountFeedResp) XXX_Size() int {
	return m.Size()
}
func (m *AccountFeedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountFeedResp.DiscardUnknown(m)
}

var xxx_messageInfo_AccountFeedResp proto.InternalMessageInfo

func (m *AccountFeedResp) GetItems() []*AccountFeedInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type AccountFeedInfo struct {
	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	AccountID  int64  `protobuf:"varint,2,opt,name=AccountID,proto3" json:"account_id"`
	ActionType string `protobuf:"bytes,3,opt,name=ActionType,proto3" json:"action_type"`
	ActionTime int64  `protobuf:"varint,4,opt,name=ActionTime,proto3" json:"action_time"`
	ActionText string `protobuf:"bytes,5,opt,name=ActionText,proto3" json:"action_text"`
	TargetID   int64  `protobuf:"varint,8,opt,name=TargetID,proto3" json:"target_id"`
	TargetType string `protobuf:"bytes,9,opt,name=TargetType,proto3" json:"target_type"`
	// unix timestamp
	CreatedAt int64 `protobuf:"varint,10,opt,name=CreatedAt,proto3" json:"created_at"`
	// unix timestamp
	UpdatedAt            int64    `protobuf:"varint,11,opt,name=UpdatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountFeedInfo) Reset()         { *m = AccountFeedInfo{} }
func (m *AccountFeedInfo) String() string { return proto.CompactTextString(m) }
func (*AccountFeedInfo) ProtoMessage()    {}
func (*AccountFeedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{2}
}
func (m *AccountFeedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountFeedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountFeedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountFeedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountFeedInfo.Merge(m, src)
}
func (m *AccountFeedInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccountFeedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountFeedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountFeedInfo proto.InternalMessageInfo

func (m *AccountFeedInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AccountFeedInfo) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *AccountFeedInfo) GetActionType() string {
	if m != nil {
		return m.ActionType
	}
	return ""
}

func (m *AccountFeedInfo) GetActionTime() int64 {
	if m != nil {
		return m.ActionTime
	}
	return 0
}

func (m *AccountFeedInfo) GetActionText() string {
	if m != nil {
		return m.ActionText
	}
	return ""
}

func (m *AccountFeedInfo) GetTargetID() int64 {
	if m != nil {
		return m.TargetID
	}
	return 0
}

func (m *AccountFeedInfo) GetTargetType() string {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *AccountFeedInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *AccountFeedInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type AccountFeedReq struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"account_id"`
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,proto3" json:"limit"`
	Offset               int32    `protobuf:"varint,3,opt,name=Offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountFeedReq) Reset()         { *m = AccountFeedReq{} }
func (m *AccountFeedReq) String() string { return proto.CompactTextString(m) }
func (*AccountFeedReq) ProtoMessage()    {}
func (*AccountFeedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{3}
}
func (m *AccountFeedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountFeedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountFeedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountFeedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountFeedReq.Merge(m, src)
}
func (m *AccountFeedReq) XXX_Size() int {
	return m.Size()
}
func (m *AccountFeedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountFeedReq.DiscardUnknown(m)
}

var xxx_messageInfo_AccountFeedReq proto.InternalMessageInfo

func (m *AccountFeedReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *AccountFeedReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AccountFeedReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyStruct)(nil), "service.accountfeed.EmptyStruct")
	proto.RegisterType((*AccountFeedResp)(nil), "service.accountfeed.AccountFeedResp")
	proto.RegisterType((*AccountFeedInfo)(nil), "service.accountfeed.AccountFeedInfo")
	proto.RegisterType((*AccountFeedReq)(nil), "service.accountfeed.AccountFeedReq")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0x49, 0x63, 0xca, 0x66, 0xc2, 0xee, 0xe2, 0x2c, 0x48, 0xd8, 0x8b, 0xa6, 0xc4, 0xbd,
	0xa8, 0xa0, 0x29, 0xac, 0x4f, 0xd0, 0xd8, 0x55, 0x0a, 0x82, 0x32, 0xae, 0x20, 0xde, 0xd4, 0x34,
	0x39, 0x89, 0x03, 0xa6, 0x33, 0x9b, 0x9c, 0xc8, 0xf6, 0xda, 0x37, 0xf1, 0x69, 0xbc, 0xf4, 0x09,
	0x82, 0xf4, 0x32, 0x4f, 0x21, 0x99, 0x09, 0x9b, 0x14, 0x85, 0x5e, 0x65, 0xe6, 0x9f, 0xef, 0xff,
	0xcf, 0x61, 0xce, 0x84, 0x9c, 0xc8, 0x4d, 0x20, 0x0b, 0x81, 0x82, 0x5e, 0x94, 0x50, 0x7c, 0xe7,
	0x31, 0x04, 0x51, 0x1c, 0x8b, 0x6a, 0x8b, 0x29, 0x40, 0x72, 0xf9, 0x22, 0xe3, 0xf8, 0xb5, 0xda,
	0x04, 0xb1, 0xc8, 0xe7, 0x99, 0xc8, 0xc4, 0x5c, 0xb1, 0x9b, 0x2a, 0x55, 0x3b, 0xb5, 0x51, 0x2b,
	0x9d, 0xe1, 0x9f, 0x12, 0xe7, 0x26, 0x97, 0xb8, 0xfb, 0x80, 0x45, 0x15, 0xa3, 0xff, 0x89, 0x9c,
	0x2f, 0x74, 0xd8, 0x6b, 0x80, 0x84, 0x41, 0x29, 0xe9, 0x0d, 0xb1, 0x38, 0x42, 0x5e, 0xba, 0xc6,
	0xd4, 0x9c, 0x39, 0xd7, 0x57, 0xc1, 0x7f, 0xaa, 0x06, 0x03, 0xd3, 0x6a, 0x9b, 0x8a, 0xd0, 0x6e,
	0x6a, 0x4f, 0xdb, 0x98, 0xfe, 0xf8, 0x3f, 0xcd, 0x83, 0xe8, 0x96, 0xa2, 0x4f, 0xc8, 0x68, 0xb5,
	0x74, 0x8d, 0xa9, 0x31, 0x33, 0xc3, 0x71, 0x53, 0x7b, 0x23, 0x9e, 0xb0, 0xd1, 0x6a, 0x49, 0x9f,
	0x13, 0xbb, 0x43, 0x57, 0x4b, 0x77, 0xa4, 0x8e, 0xcf, 0x9a, 0xda, 0x23, 0x5d, 0xc5, 0x35, 0x4f,
	0x58, 0x0f, 0xd0, 0x39, 0x21, 0x8b, 0x18, 0xb9, 0xd8, 0xde, 0xee, 0x24, 0xb8, 0xe6, 0xd4, 0x98,
	0xd9, 0xe1, 0x79, 0x53, 0x7b, 0x4e, 0xa4, 0xd4, 0x35, 0xee, 0x24, 0xb0, 0x01, 0x32, 0x30, 0xf0,
	0x1c, 0xdc, 0x47, 0x2a, 0xff, 0xc0, 0xc0, 0xf3, 0xde, 0xc0, 0xf3, 0xa1, 0x01, 0xee, 0xd1, 0xb5,
	0xfe, 0xad, 0x00, 0xf7, 0xc8, 0x06, 0x08, 0x7d, 0x46, 0x4e, 0x6e, 0xa3, 0x22, 0x83, 0xb6, 0xff,
	0x13, 0x95, 0x7f, 0xda, 0xd4, 0x9e, 0x8d, 0x4a, 0x6b, 0xdb, 0x7f, 0x38, 0x6e, 0xb3, 0xf5, 0x5a,
	0x75, 0x6f, 0xf7, 0xd9, 0x1d, 0xac, 0xbb, 0xef, 0x91, 0xf6, 0x72, 0x5e, 0x15, 0x10, 0x21, 0x24,
	0x0b, 0x74, 0x49, 0x7f, 0x39, 0xb1, 0x16, 0xd7, 0x11, 0xb2, 0x1e, 0x68, 0xe9, 0x8f, 0x32, 0xe9,
	0x68, 0xa7, 0xa7, 0x2b, 0x2d, 0x2a, 0xfa, 0x01, 0xf0, 0x7f, 0x18, 0xe4, 0xec, 0x60, 0xfe, 0x77,
	0x87, 0xb3, 0x30, 0x8e, 0xcd, 0xc2, 0x23, 0xd6, 0x5b, 0x9e, 0x73, 0x54, 0x53, 0xb3, 0xf4, 0x33,
	0xf8, 0xd6, 0x0a, 0x4c, 0xeb, 0xd4, 0x27, 0xe3, 0x77, 0x69, 0x5a, 0x02, 0xaa, 0x41, 0x59, 0x21,
	0x69, 0x6a, 0x6f, 0x2c, 0x94, 0xc2, 0xba, 0x93, 0x6b, 0x41, 0x9c, 0x41, 0x13, 0xf4, 0x0b, 0xb9,
	0x78, 0x03, 0x38, 0x50, 0xde, 0x47, 0x19, 0x24, 0xf4, 0xe9, 0xb1, 0x87, 0xc8, 0xe0, 0xee, 0xf2,
	0xea, 0x38, 0x54, 0xca, 0xf0, 0xf1, 0xaf, 0xfd, 0xc4, 0xf8, 0xbd, 0x9f, 0x18, 0x7f, 0xf6, 0x13,
	0xe3, 0xb3, 0x19, 0x49, 0xbe, 0x19, 0xab, 0xdf, 0xe3, 0xe5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1b, 0x65, 0x10, 0x10, 0x6e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountFeedClient is the client API for AccountFeed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountFeedClient interface {
	GetAccountFeedPaged(ctx context.Context, in *AccountFeedReq, opts ...grpc.CallOption) (*AccountFeedResp, error)
}

type accountFeedClient struct {
	cc *grpc.ClientConn
}

func NewAccountFeedClient(cc *grpc.ClientConn) AccountFeedClient {
	return &accountFeedClient{cc}
}

func (c *accountFeedClient) GetAccountFeedPaged(ctx context.Context, in *AccountFeedReq, opts ...grpc.CallOption) (*AccountFeedResp, error) {
	out := new(AccountFeedResp)
	err := c.cc.Invoke(ctx, "/service.accountfeed.AccountFeed/GetAccountFeedPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountFeedServer is the server API for AccountFeed service.
type AccountFeedServer interface {
	GetAccountFeedPaged(context.Context, *AccountFeedReq) (*AccountFeedResp, error)
}

// UnimplementedAccountFeedServer can be embedded to have forward compatible implementations.
type UnimplementedAccountFeedServer struct {
}

func (*UnimplementedAccountFeedServer) GetAccountFeedPaged(ctx context.Context, req *AccountFeedReq) (*AccountFeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountFeedPaged not implemented")
}

func RegisterAccountFeedServer(s *grpc.Server, srv AccountFeedServer) {
	s.RegisterService(&_AccountFeed_serviceDesc, srv)
}

func _AccountFeed_GetAccountFeedPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountFeedServer).GetAccountFeedPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.accountfeed.AccountFeed/GetAccountFeedPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountFeedServer).GetAccountFeedPaged(ctx, req.(*AccountFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountFeed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.accountfeed.AccountFeed",
	HandlerType: (*AccountFeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountFeedPaged",
			Handler:    _AccountFeed_GetAccountFeedPaged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AccountFeedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountFeedResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountFeedResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountFeedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountFeedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountFeedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TargetType) > 0 {
		i -= len(m.TargetType)
		copy(dAtA[i:], m.TargetType)
		i = encodeVarintPb(dAtA, i, uint64(len(m.TargetType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TargetID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TargetID))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ActionText) > 0 {
		i -= len(m.ActionText)
		copy(dAtA[i:], m.ActionText)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ActionText)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ActionTime != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ActionTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ActionType) > 0 {
		i -= len(m.ActionType)
		copy(dAtA[i:], m.ActionType)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ActionType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountFeedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountFeedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountFeedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountFeedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountFeedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	l = len(m.ActionType)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ActionTime != 0 {
		n += 1 + sovPb(uint64(m.ActionTime))
	}
	l = len(m.ActionText)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.TargetID != 0 {
		n += 1 + sovPb(uint64(m.TargetID))
	}
	l = len(m.TargetType)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountFeedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountFeedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountFeedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountFeedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AccountFeedInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountFeedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountFeedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountFeedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTime", wireType)
			}
			m.ActionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountFeedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountFeedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountFeedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb   = fmt.Errorf("proto: integer overflow")
)
