syntax = "proto3";
package service.fav;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
message EmptyStruct {
}

message FavInfo {
    bool IsFav = 1 [(gogoproto.jsontag) = "is_fav"];
}


message FavReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "account_id"];
    int64 TargetID = 2 [(gogoproto.jsontag) = "target_id"];
    string TargetType = 3 [(gogoproto.jsontag) = "target_type"];
    bool UseMaster = 4;
}

message UserFavsReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "aid"];
    int32 Limit = 2 [(gogoproto.jsontag) = "limit"];
    int32 Offset = 3 [(gogoproto.jsontag) = "offset"];
    string TargetType = 4 [(gogoproto.jsontag) = "target_type"];
}

message FavItem {
    int64 ID = 1;
    string TargetType  = 2;
    int64 TargetID = 3;
    int64 CreatedAt = 4;
    int64 UpdatedAt = 5;
    int64 AccountID = 6;
}

message FavsResp {
    repeated FavItem Items = 1;
}

message IDsResp {
    repeated int64 IDs = 1 [(gogoproto.jsontag) = 'ids'];
}


service Fav {
    rpc  IsFav(FavReq) returns (FavInfo);
    rpc  Fav(FavReq) returns (EmptyStruct);
    rpc  GetUserFavIDsPaged(UserFavsReq) returns (IDsResp);
    rpc  GetUserFavsPaged(UserFavsReq) returns (FavsResp);
    rpc  Unfav(FavReq) returns (EmptyStruct);
}




