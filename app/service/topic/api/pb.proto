syntax = "proto3";
package service.topic;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message TopicInfo {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    string Name = 2 [(gogoproto.jsontag) = "name"];

    oneof Avatar {
        string  AvatarValue = 3 [(gogoproto.jsontag) = "avatar"] ;
    }

    oneof Bg {
        string  BgValue = 4 [(gogoproto.jsontag) = "bg"] ;
    }

    string  Introduction = 5 [(gogoproto.jsontag) = "introduction"];

    bool AllowDiscuss = 6 [(gogoproto.jsontag) = "allow_discuss"];

    bool AllowChat = 7 [(gogoproto.jsontag) = "allow_chat"];

    bool IsPrivate = 8 [(gogoproto.jsontag) = "is_private"];

    string ViewPermission = 9 [(gogoproto.jsontag) = "view_permission"];

    string EditPermission = 10 [(gogoproto.jsontag) = "edit_permission"];

    string JoinPermission = 11 [(gogoproto.jsontag) = "join_permission"];

    string CatalogViewType = 12 [(gogoproto.jsontag) = "catalog_view_type"];

    string TopicHome = 13 [(gogoproto.jsontag) = "topic_home"];

    int64 CreatedBy = 14 [(gogoproto.jsontag) = "created_by"];

    // unix timestamp
    int64 CreatedAt = 15 [(gogoproto.jsontag) = "created_at"];

    // unix timestamp
    int64 UpdatedAt = 16 [(gogoproto.jsontag) = "updated_at"];


}

message TopicReq {
    int64 ID = 2 [(gogoproto.jsontag) = "id"];
}


service Topic {
    rpc  GetTopicInfo(TopicReq) returns (TopicInfo);
}

