syntax = "proto3";
package service.topic;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
message EmptyStruct {
}

message MemberRoleReply {
    bool  IsMember = 1 [(gogoproto.jsontag) = "is_member"];
    string  Role = 2 [(gogoproto.jsontag) = "role"];
}

message Creator {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    string  UserName = 2 [(gogoproto.jsontag) = "user_name"];

    string Avatar   = 3 [(gogoproto.jsontag) = "avatar"];

    oneof Introduction {
        string  IntroductionValue = 4 [(gogoproto.jsontag) = "introduction"] ;
    }
}

message TopicInfo {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    string Name = 2 [(gogoproto.jsontag) = "name"];

    oneof Avatar {
        string  AvatarValue = 3 [(gogoproto.jsontag) = "avatar"] ;
    }

    oneof Bg {
        string  BgValue = 4 [(gogoproto.jsontag) = "bg"] ;
    }

    string  Introduction = 5 [(gogoproto.jsontag) = "introduction"];

    bool AllowDiscuss = 6 [(gogoproto.jsontag) = "allow_discuss"];

    bool AllowChat = 7 [(gogoproto.jsontag) = "allow_chat"];

    bool IsPrivate = 8 [(gogoproto.jsontag) = "is_private"];

    string ViewPermission = 9 [(gogoproto.jsontag) = "view_permission"];

    string EditPermission = 10 [(gogoproto.jsontag) = "edit_permission"];

    string JoinPermission = 11 [(gogoproto.jsontag) = "join_permission"];

    string CatalogViewType = 12 [(gogoproto.jsontag) = "catalog_view_type"];

    string TopicHome = 13 [(gogoproto.jsontag) = "topic_home"];

    Creator  Creator  = 14 [(gogoproto.jsontag) = "creator"];

    // unix timestamp
    int64 CreatedAt = 15 [(gogoproto.jsontag) = "created_at"];

    // unix timestamp
    int64 UpdatedAt = 16 [(gogoproto.jsontag) = "updated_at"];

    TopicStat Stat = 17 [(gogoproto.jsontag) = "stat"];

}

message TopicStat {
    int32 MemberCount = 1 [(gogoproto.jsontag) = "member_count"];
    int32 ArticleCount = 2 [(gogoproto.jsontag) = "article_count"];
    int32 DiscussionCount = 3 [(gogoproto.jsontag) = "discussion_count"];
}

message TopicMetaInfo {
    bool CanFollow = 1 [(gogoproto.jsontag) = "can_follow"];

    bool CanEdit = 2 [(gogoproto.jsontag) = "can_edit"];

    bool Fav = 3 [(gogoproto.jsontag) = "fav"];

    bool CanView = 4 [(gogoproto.jsontag) = "can_view"];

    int32 FollowStatus = 5 [(gogoproto.jsontag) = "follow_status"];

    bool IsMember = 6 [(gogoproto.jsontag) = "is_member"];

    string MemberRole = 7 [(gogoproto.jsontag) = "member_role"];
}

message TopicPermissionInfo {

    string EditPermission = 1 [(gogoproto.jsontag) = "edit_permission"];

    bool IsMember = 2 [(gogoproto.jsontag) = "is_member"];

    string MemberRole = 3 [(gogoproto.jsontag) = "member_role"];
}

message TopicReq {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];
}

message TopicMetaReq {
    int64 TopicID = 1 [(gogoproto.jsontag) = "topic_id"];
    int64 AccountID = 2 [(gogoproto.jsontag) = "aid"];
}

message TopicMemberRoleReq {
    int64 TopicID = 1 [(gogoproto.jsontag) = "topic_id"];
    int64 AccountID = 2 [(gogoproto.jsontag) = "aid"];
}


message TopicPermissionReq {
    int64 TopicID = 1 [(gogoproto.jsontag) = "topic_id"];
    int64 AccountID = 2 [(gogoproto.jsontag) = "aid"];
}

message UserTopicsReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "aid"];
    int32 Limit = 2 [(gogoproto.jsontag) = "limit"];
    int32 Offset = 3 [(gogoproto.jsontag) = "offset"];
}


message UserTopicsResp {
    repeated TopicInfo Items = 1 [(gogoproto.jsontag) = 'items'];
}


message AidReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "account_id"];
}

message IDsResp {
    repeated int64 IDs = 1 [(gogoproto.jsontag) = 'ids'];
}

service Topic {
    rpc  GetTopicInfo(TopicReq) returns (TopicInfo);

    rpc  GetTopicPermission(TopicPermissionReq) returns (TopicPermissionInfo);

    rpc  GetTopicMemberRole(TopicMemberRoleReq) returns (MemberRoleReply);

    rpc  GetTopicMeta(TopicMetaReq) returns (TopicMetaInfo);

    rpc  GetUserTopicsPaged(UserTopicsReq) returns (UserTopicsResp);

    rpc  GetBelongsTopicIDs(AidReq) returns (IDsResp);
}

