syntax = "proto3";
package service.topic;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
message EmptyStruct {
}

message MemberRoleReply {
    bool  IsMember = 1 [(gogoproto.jsontag) = "is_member"];
    string  Role = 2 [(gogoproto.jsontag) = "role"];
}

message Creator {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    string  UserName = 2 [(gogoproto.jsontag) = "user_name"];

    string Avatar   = 3 [(gogoproto.jsontag) = "avatar"];

    string  Introduction = 4 [(gogoproto.jsontag) = "introduction"] ;
}

message TopicInfo {
    int64 ID = 1;

    string Name = 2;

    string  Avatar = 3;

    string  Bg = 4;

    string  Introduction = 5;

    bool AllowDiscuss = 6;

    bool AllowChat = 7;

    bool IsPrivate = 8;

    string ViewPermission = 9;

    string EditPermission = 10;

    string JoinPermission = 11;

    string CatalogViewType = 12;

    string TopicHome = 13;

    Creator  Creator  = 14;

    // unix timestamp
    int64 CreatedAt = 15;

    // unix timestamp
    int64 UpdatedAt = 16;

    TopicStat Stat = 17;

}

message TopicRootCatalogInfo {
    int64 ID = 1;
    string Name = 2;
    int32 Seq = 3;
    string Type = 4;
    int64 RefID = 6;
    TargetArticle Article = 7;
    repeated  TopicParentCatalogInfo Children = 8;
}

message TopicParentCatalogInfo {
    int64 ID = 1;
    string Name = 2;
    int32 Seq = 3;
    string Type = 4;
    int64 RefID = 5;
    TargetArticle Article = 7;
    repeated  TopicChildCatalogInfo Children = 8;
}

message TopicChildCatalogInfo {
    int64 ID = 1;
    string Name = 2;
    int32 Seq = 3;
    string Type = 4;
    int64 RefID = 5;
    TargetArticle Article = 7;
}

message TargetArticle {
    int64 ID  = 1;
    string Title  = 2;
    string Excerpt = 3;
    repeated string ImageUrls  = 4;
    int32 LikeCount = 5;
    int32 DislikeCount = 6;
    int32 ReviseCount  = 7;
    int32 CommentCount  = 8;
    int64 CreatedAt = 9;
    int64 UpdatedAt = 10;
    Creator Creator = 11;
}


message TopicStat {
    int32 MemberCount = 1 [(gogoproto.jsontag) = "member_count"];
    int32 ArticleCount = 2 [(gogoproto.jsontag) = "article_count"];
    int32 DiscussionCount = 3 [(gogoproto.jsontag) = "discussion_count"];
}

message TopicMetaInfo {
    bool CanFollow = 1 [(gogoproto.jsontag) = "can_follow"];

    bool CanEdit = 2 [(gogoproto.jsontag) = "can_edit"];

    bool Fav = 3 [(gogoproto.jsontag) = "fav"];

    bool CanView = 4 [(gogoproto.jsontag) = "can_view"];

    int32 FollowStatus = 5 [(gogoproto.jsontag) = "follow_status"];

    bool IsMember = 6 [(gogoproto.jsontag) = "is_member"];

    string MemberRole = 7 [(gogoproto.jsontag) = "member_role"];
}

message TopicPermissionInfo {

    string EditPermission = 1 [(gogoproto.jsontag) = "edit_permission"];

    bool IsMember = 2 [(gogoproto.jsontag) = "is_member"];

    string MemberRole = 3 [(gogoproto.jsontag) = "member_role"];
}

message TopicReq {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];
    bool UseMaster = 2;
}

message TopicMetaReq {
    int64 TopicID = 1 [(gogoproto.jsontag) = "topic_id"];
    int64 AccountID = 2 [(gogoproto.jsontag) = "aid"];
    bool UseMaster = 3;
}

message TopicMemberRoleReq {
    int64 TopicID = 1 [(gogoproto.jsontag) = "topic_id"];
    int64 AccountID = 2 [(gogoproto.jsontag) = "aid"];
    bool UseMaster = 3;
}


message TopicPermissionReq {
    int64 TopicID = 1 [(gogoproto.jsontag) = "topic_id"];
    int64 AccountID = 2 [(gogoproto.jsontag) = "aid"];
    bool UseMaster = 3;
}

message UserTopicsReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "aid"];
    int32 Limit = 2 [(gogoproto.jsontag) = "limit"];
    int32 Offset = 3 [(gogoproto.jsontag) = "offset"];
}


message UserTopicsResp {
    repeated TopicInfo Items = 1 [(gogoproto.jsontag) = 'items'];
}

message AllTopicsResp {
    repeated TopicInfo Items = 1 [(gogoproto.jsontag) = 'items'];
}



message AidReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "account_id"];
    bool UseMaster = 2;
}

message IDsResp {
    repeated int64 IDs = 1 [(gogoproto.jsontag) = 'ids'];
}

message IDReq {
    int64 ID = 1 [(gogoproto.jsontag) = 'id'];
    string Include = 2;
    int64 Aid = 3;
}


message IDResp {
    int64 ID = 1 [(gogoproto.jsontag) = 'id'];
}

message TopicResp {
    int64 ID = 1;

    string Name = 2;

    string  Avatar = 3;

    string  Bg = 4;

    string  Introduction = 5;

    bool AllowDiscuss = 6;

    bool AllowChat = 7;

    bool IsPrivate = 8;

    string ViewPermission = 9;

    string EditPermission = 10;

    string JoinPermission = 11;

    string CatalogViewType = 12;

    string TopicHome = 13;

    Creator  Creator  = 14;

    // unix timestamp
    int64 CreatedAt = 15;

    // unix timestamp
    int64 UpdatedAt = 16;


    bool MuteNotification = 18;

    bool Important = 19;

    TopicStat Stat = 20;

    bool HasCatalogTaxonomy = 21;

    repeated TopicMemberInfo Members = 22;

    repeated TopicRootCatalogInfo Catalogs = 24;

    repeated DiscussCategoryInfo DiscussCategories = 25;

    repeated AuthTopicInfo AuthTopics = 26;

    TopicMetaInfo TopicMeta = 27;
}


message TopicMemberInfo {
    int64 AccountID = 1;
    string Role = 2;
    string Avatar = 3;
    string UserName = 4;
}

message AuthTopicInfo {
    int64 ToTopicID = 1;
    string EditPermission = 2;
    string Permission = 3;
    int32 MemberCount = 4;
    string Avatar = 5;
    string Name = 6;
}

message DiscussCategoryInfo {
    int64 ID = 1;
    int64 TopicID = 2;
    string Name = 3;
    int32 Seq = 4;
}


message ArgChangeOwner {
    int64 TopicID = 1;
    int64 ToAccountID = 2;
    int64 Aid  = 3;
}


message ArgCreateTopic {
    int64 Aid  = 1;
    oneof Avatar {
        string AvatarValue = 2;
    }

    oneof Bg {
        string BgValue = 3;
    }

    string Name = 4;

    string Introduction = 5;

    string CatalogViewType = 6;

    bool AllowDiscuss = 7;

    bool AllowChat = 8;
}

message ArgUpdateTopic {

    int64 ID = 1;

    oneof Avatar {
        string AvatarValue = 2;
    }

    oneof Bg {
        string BgValue = 3;
    }

    oneof Name {
        string NameValue = 4;
    }

    oneof Introduction {
        string IntroductionValue = 5;
    }

    oneof CatalogViewType {
        string CatalogViewTypeValue = 6;
    }

    oneof AllowChat {
        bool AllowChatValue = 7;
    }

    oneof AllowDiscuss {
        bool AllowDiscussValue = 8;
    }

    oneof IsPrivate {
        bool IsPrivateValue = 9;
    }

    oneof ViewPermission {
        string ViewPermissionValue = 10;
    }

    oneof EditPermission {
        string EditPermissionValue = 11;
    }

    oneof JoinPermission {
        string JoinPermissionValue = 12;
    }

    oneof Important {
        bool ImportantValue = 13;
    }

    oneof MuteNotification {
        bool MuteNotificationValue = 14;
    }

    int64 Aid  = 15;

}

message TopicMembersPagedResp {
    int32 Count = 1;
    int32 PageSize = 2;
    repeated TopicMemberInfo Data = 3;
}

message ArgBatchSavedTopicMember {
    int64 TopicID = 1;
    repeated ArgTopicMember Members = 2;
    int64 Aid  = 3;
}

message ArgTopicMember {
    int64 AccountID = 1;
    string Role = 2;
    string Opt = 3;
}

message ArgSaveTopicCatalog {
    int64 TopicID = 1;
    int64 ParentID = 2;
    repeated  ArgTopicCatalog Items = 3;
    int64 Aid  = 4;
}

message ArgTopicCatalog {
    oneof ID {
        int64 IDValue = 1;
    }
    string Name = 2;
    int32 Seq = 3;
    string Type = 4;
    int64 RefID = 5;
}

message ArgCanEditTopicsReq {
    int32 Pn = 1;
    int32 Ps = 2;
    string Query = 3;
}

message CanEditTopicsResp {
    repeated  CanEditTopicItem Items = 1;
    Paging  Paging = 2;
}

message CanEditTopicItem {
    int64 ID = 1;

    string Name = 2;

    string  Avatar = 3;

    string  Introduction = 5;

    int32 MemberCount = 6;

    int32 ArticleCount = 7;

    int32 DiscussionCount = 8;

    string EditPermission = 9;

    bool HasCatalogTaxonomy  = 10;
}

message Paging {
    int32 Total = 1;
    bool IsEnd = 2;
    string Next = 3;
    string Prev = 4;
}

message ArgSaveAuthTopics {
    int64 TopicID = 1;
    repeated  ArgAuthTopic AuthTopics = 2;
    int64 Aid  = 3;
}

message ArgAuthTopic {
    int64 TopicID = 1;
    string Permission = 2;
}

message AuthTopicsResp {
    repeated AuthTopicInfo Items = 1;
}

message CatalogsResp {
    repeated TopicRootCatalogInfo Items = 1;
}

message ArgSaveCatalogs {
    int64 TopicID = 1;
    int64 Aid = 2;
    int64 ParentID = 3;
    repeated ArgTopicCatalog Items = 4;
}

message ArgTopicFollow {
    int64 TopicID = 1;
    string Reason = 2;
    bool AllowViewCert = 3;
    int64 Aid = 4;
}

message ArgAuditFollow {
    int64 ID = 1;
    bool Approve = 2;
    string Reason = 3;
    int64 Aid = 4;
}

message StatusResp {
    int32 Status = 1;
}



service Topic {
    rpc  CreateTopic(ArgCreateTopic) returns (IDResp);

    rpc  UpdateTopic(ArgUpdateTopic) returns (EmptyStruct);

    rpc  DelTopic(IDReq) returns (EmptyStruct);

    rpc  GetTopicResp(IDReq) returns (TopicResp);

    rpc  ChangeOwner(ArgChangeOwner) returns (EmptyStruct);

    rpc  SaveAuthTopics(ArgSaveAuthTopics) returns (EmptyStruct);

    rpc  GetAuthTopics(IDReq) returns (AuthTopicsResp);

    rpc GetCatalogsHierarchy(IDReq) returns (CatalogsResp);

    rpc GetCatalogTaxonomiesHierarchy(IDReq) returns (CatalogsResp);

    rpc SaveCatalogs(ArgSaveCatalogs) returns (EmptyStruct);

    rpc FollowTopic(ArgTopicFollow) returns (StatusResp);

    rpc AuditFollow(ArgAuditFollow) returns (EmptyStruct);

    rpc  GetAllTopics(EmptyStruct) returns (AllTopicsResp);

    rpc  GetTopicInfo(TopicReq) returns (TopicInfo);

    rpc  GetTopicStat(TopicReq) returns (TopicStat);

    rpc  GetTopicPermission(TopicPermissionReq) returns (TopicPermissionInfo);

    rpc  GetTopicMemberRole(TopicMemberRoleReq) returns (MemberRoleReply);

    rpc  GetTopicMeta(TopicMetaReq) returns (TopicMetaInfo);

    rpc  GetUserTopicsPaged(UserTopicsReq) returns (UserTopicsResp);

    rpc  GetBelongsTopicIDs(AidReq) returns (IDsResp);

    rpc  GetTopicMemberIDs(TopicReq) returns (IDsResp);
}

