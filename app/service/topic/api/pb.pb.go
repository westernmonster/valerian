// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
type EmptyStruct struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{0}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(m, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

type TopicInfo struct {
	ID   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	// Types that are valid to be assigned to Avatar:
	//	*TopicInfo_AvatarValue
	Avatar isTopicInfo_Avatar `protobuf_oneof:"Avatar"`
	// Types that are valid to be assigned to Bg:
	//	*TopicInfo_BgValue
	Bg              isTopicInfo_Bg `protobuf_oneof:"Bg"`
	Introduction    string         `protobuf:"bytes,5,opt,name=Introduction,proto3" json:"introduction"`
	AllowDiscuss    bool           `protobuf:"varint,6,opt,name=AllowDiscuss,proto3" json:"allow_discuss"`
	AllowChat       bool           `protobuf:"varint,7,opt,name=AllowChat,proto3" json:"allow_chat"`
	IsPrivate       bool           `protobuf:"varint,8,opt,name=IsPrivate,proto3" json:"is_private"`
	ViewPermission  string         `protobuf:"bytes,9,opt,name=ViewPermission,proto3" json:"view_permission"`
	EditPermission  string         `protobuf:"bytes,10,opt,name=EditPermission,proto3" json:"edit_permission"`
	JoinPermission  string         `protobuf:"bytes,11,opt,name=JoinPermission,proto3" json:"join_permission"`
	CatalogViewType string         `protobuf:"bytes,12,opt,name=CatalogViewType,proto3" json:"catalog_view_type"`
	TopicHome       string         `protobuf:"bytes,13,opt,name=TopicHome,proto3" json:"topic_home"`
	CreatedBy       int64          `protobuf:"varint,14,opt,name=CreatedBy,proto3" json:"created_by"`
	// unix timestamp
	CreatedAt int64 `protobuf:"varint,15,opt,name=CreatedAt,proto3" json:"created_at"`
	// unix timestamp
	UpdatedAt            int64    `protobuf:"varint,16,opt,name=UpdatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicInfo) Reset()         { *m = TopicInfo{} }
func (m *TopicInfo) String() string { return proto.CompactTextString(m) }
func (*TopicInfo) ProtoMessage()    {}
func (*TopicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{1}
}
func (m *TopicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicInfo.Merge(m, src)
}
func (m *TopicInfo) XXX_Size() int {
	return m.Size()
}
func (m *TopicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TopicInfo proto.InternalMessageInfo

type isTopicInfo_Avatar interface {
	isTopicInfo_Avatar()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTopicInfo_Bg interface {
	isTopicInfo_Bg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TopicInfo_AvatarValue struct {
	AvatarValue string `protobuf:"bytes,3,opt,name=AvatarValue,proto3,oneof" json:"avatar"`
}
type TopicInfo_BgValue struct {
	BgValue string `protobuf:"bytes,4,opt,name=BgValue,proto3,oneof" json:"bg"`
}

func (*TopicInfo_AvatarValue) isTopicInfo_Avatar() {}
func (*TopicInfo_BgValue) isTopicInfo_Bg()         {}

func (m *TopicInfo) GetAvatar() isTopicInfo_Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}
func (m *TopicInfo) GetBg() isTopicInfo_Bg {
	if m != nil {
		return m.Bg
	}
	return nil
}

func (m *TopicInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TopicInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TopicInfo) GetAvatarValue() string {
	if x, ok := m.GetAvatar().(*TopicInfo_AvatarValue); ok {
		return x.AvatarValue
	}
	return ""
}

func (m *TopicInfo) GetBgValue() string {
	if x, ok := m.GetBg().(*TopicInfo_BgValue); ok {
		return x.BgValue
	}
	return ""
}

func (m *TopicInfo) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *TopicInfo) GetAllowDiscuss() bool {
	if m != nil {
		return m.AllowDiscuss
	}
	return false
}

func (m *TopicInfo) GetAllowChat() bool {
	if m != nil {
		return m.AllowChat
	}
	return false
}

func (m *TopicInfo) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *TopicInfo) GetViewPermission() string {
	if m != nil {
		return m.ViewPermission
	}
	return ""
}

func (m *TopicInfo) GetEditPermission() string {
	if m != nil {
		return m.EditPermission
	}
	return ""
}

func (m *TopicInfo) GetJoinPermission() string {
	if m != nil {
		return m.JoinPermission
	}
	return ""
}

func (m *TopicInfo) GetCatalogViewType() string {
	if m != nil {
		return m.CatalogViewType
	}
	return ""
}

func (m *TopicInfo) GetTopicHome() string {
	if m != nil {
		return m.TopicHome
	}
	return ""
}

func (m *TopicInfo) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *TopicInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *TopicInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TopicInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TopicInfo_AvatarValue)(nil),
		(*TopicInfo_BgValue)(nil),
	}
}

type TopicReq struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicReq) Reset()         { *m = TopicReq{} }
func (m *TopicReq) String() string { return proto.CompactTextString(m) }
func (*TopicReq) ProtoMessage()    {}
func (*TopicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{2}
}
func (m *TopicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicReq.Merge(m, src)
}
func (m *TopicReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicReq proto.InternalMessageInfo

func (m *TopicReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type CheckTopicManagerReq struct {
	TopicID              int64    `protobuf:"varint,1,opt,name=TopicID,proto3" json:"topic_id"`
	AccountID            int64    `protobuf:"varint,2,opt,name=AccountID,proto3" json:"aid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckTopicManagerReq) Reset()         { *m = CheckTopicManagerReq{} }
func (m *CheckTopicManagerReq) String() string { return proto.CompactTextString(m) }
func (*CheckTopicManagerReq) ProtoMessage()    {}
func (*CheckTopicManagerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{3}
}
func (m *CheckTopicManagerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckTopicManagerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckTopicManagerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckTopicManagerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTopicManagerReq.Merge(m, src)
}
func (m *CheckTopicManagerReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckTopicManagerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTopicManagerReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTopicManagerReq proto.InternalMessageInfo

func (m *CheckTopicManagerReq) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *CheckTopicManagerReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyStruct)(nil), "service.topic.EmptyStruct")
	proto.RegisterType((*TopicInfo)(nil), "service.topic.TopicInfo")
	proto.RegisterType((*TopicReq)(nil), "service.topic.TopicReq")
	proto.RegisterType((*CheckTopicManagerReq)(nil), "service.topic.CheckTopicManagerReq")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x80, 0x71, 0x92, 0x26, 0xce, 0x34, 0x69, 0x9b, 0xe5, 0xcf, 0x8a, 0x50, 0x5d, 0x05, 0x81,
	0x7a, 0x80, 0x54, 0xe2, 0xe7, 0xc4, 0x01, 0xc5, 0x49, 0x45, 0x83, 0x04, 0xaa, 0x96, 0xd2, 0x03,
	0x97, 0x68, 0x63, 0x6f, 0x9d, 0x85, 0xd8, 0x6b, 0xec, 0x75, 0xaa, 0xbc, 0x0c, 0xe2, 0x71, 0x38,
	0xf2, 0x04, 0x16, 0xea, 0xd1, 0x4f, 0x81, 0x3c, 0x26, 0x75, 0x9c, 0x96, 0x9b, 0x77, 0xe6, 0xfb,
	0xec, 0xd9, 0xf5, 0xcc, 0x82, 0x1e, 0x4c, 0xfb, 0x41, 0x28, 0x95, 0x24, 0xed, 0x88, 0x87, 0x0b,
	0x61, 0xf3, 0xbe, 0x92, 0x81, 0xb0, 0xbb, 0xcf, 0x5d, 0xa1, 0x66, 0xf1, 0xb4, 0x6f, 0x4b, 0xef,
	0xc8, 0x95, 0xae, 0x3c, 0x42, 0x6a, 0x1a, 0x5f, 0xe0, 0x0a, 0x17, 0xf8, 0x94, 0xdb, 0xbd, 0x36,
	0x6c, 0x1f, 0x7b, 0x81, 0x5a, 0x7e, 0x52, 0x61, 0x6c, 0xab, 0xde, 0x8f, 0x3a, 0x34, 0xcf, 0xb2,
	0xf7, 0x8c, 0xfd, 0x0b, 0x49, 0x1e, 0x40, 0x65, 0x3c, 0x32, 0xb4, 0x03, 0xed, 0xb0, 0x6a, 0xd5,
	0xd3, 0xc4, 0xac, 0x08, 0x87, 0x56, 0xc6, 0x23, 0xf2, 0x08, 0x6a, 0x1f, 0x99, 0xc7, 0x8d, 0xca,
	0x81, 0x76, 0xd8, 0xb4, 0xf4, 0x34, 0x31, 0x6b, 0x3e, 0xf3, 0x38, 0xc5, 0x28, 0xe9, 0xc3, 0xf6,
	0x60, 0xc1, 0x14, 0x0b, 0xcf, 0xd9, 0x3c, 0xe6, 0x46, 0x15, 0x21, 0x48, 0x13, 0xb3, 0xce, 0x30,
	0x7c, 0x72, 0x87, 0xae, 0x03, 0xa4, 0x07, 0x0d, 0xcb, 0xcd, 0xd9, 0x1a, 0xb2, 0xf8, 0xa9, 0xa9,
	0x7b, 0xa2, 0xd1, 0x55, 0x82, 0xbc, 0x82, 0xd6, 0xd8, 0x57, 0xa1, 0x74, 0x62, 0x5b, 0x09, 0xe9,
	0x1b, 0x5b, 0x08, 0xee, 0xa5, 0x89, 0xd9, 0x12, 0x6b, 0x71, 0x5a, 0xa2, 0xc8, 0x6b, 0x68, 0x0d,
	0xe6, 0x73, 0x79, 0x39, 0x12, 0x91, 0x1d, 0x47, 0x91, 0x51, 0x3f, 0xd0, 0x0e, 0x75, 0xab, 0x93,
	0x26, 0x66, 0x9b, 0x65, 0xf1, 0x89, 0x93, 0x27, 0x68, 0x09, 0x23, 0xcf, 0xa0, 0x89, 0xeb, 0xe1,
	0x8c, 0x29, 0xa3, 0x81, 0xce, 0x4e, 0x9a, 0x98, 0x90, 0x3b, 0xf6, 0x8c, 0x29, 0x5a, 0x00, 0x19,
	0x3d, 0x8e, 0x4e, 0x43, 0xb1, 0x60, 0x8a, 0x1b, 0x7a, 0x41, 0x8b, 0x68, 0x12, 0xe4, 0x51, 0x5a,
	0x00, 0xe4, 0x0d, 0xec, 0x9c, 0x0b, 0x7e, 0x79, 0xca, 0x43, 0x4f, 0x44, 0x51, 0xb6, 0x95, 0x26,
	0x6e, 0xe5, 0x6e, 0x9a, 0x98, 0xbb, 0x0b, 0xc1, 0x2f, 0x27, 0xc1, 0x75, 0x8a, 0x6e, 0xa0, 0x99,
	0x7c, 0xec, 0x08, 0xb5, 0x26, 0x43, 0x21, 0x73, 0x47, 0xa8, 0x92, 0x5c, 0x46, 0x33, 0xf9, 0xbd,
	0x14, 0xfe, 0x9a, 0xbc, 0x5d, 0xc8, 0x5f, 0xa5, 0xf0, 0x4b, 0x72, 0x19, 0x25, 0x6f, 0x61, 0x77,
	0xc8, 0x14, 0x9b, 0x4b, 0x37, 0x2b, 0xe9, 0x6c, 0x19, 0x70, 0xa3, 0x85, 0xf6, 0xfd, 0x34, 0x31,
	0x3b, 0x76, 0x9e, 0x9a, 0x60, 0xfd, 0x6a, 0x19, 0x70, 0xba, 0x49, 0x67, 0xa7, 0x84, 0x7d, 0x75,
	0x22, 0x3d, 0x6e, 0xb4, 0x51, 0xc5, 0x53, 0xc2, 0xa6, 0x9d, 0xcc, 0xa4, 0xc7, 0x69, 0x01, 0x64,
	0xf4, 0x30, 0xe4, 0x4c, 0x71, 0xc7, 0x5a, 0x1a, 0x3b, 0xd8, 0x7f, 0x48, 0xdb, 0x79, 0x70, 0x32,
	0x5d, 0xd2, 0x02, 0x58, 0xa3, 0x07, 0xca, 0xd8, 0xbd, 0x49, 0x67, 0xff, 0xeb, 0x1a, 0xc8, 0xe8,
	0xcf, 0x81, 0xf3, 0x8f, 0xde, 0x2b, 0xe8, 0x38, 0x0f, 0x22, 0x7d, 0x0d, 0x58, 0x3a, 0xd4, 0xf3,
	0x5e, 0xb5, 0x6a, 0x50, 0xb1, 0xdc, 0x5e, 0x0f, 0x74, 0x2c, 0x93, 0xf2, 0xef, 0xff, 0x1b, 0x8f,
	0x1e, 0x87, 0x7b, 0xc3, 0x19, 0xb7, 0xbf, 0x21, 0xf8, 0x81, 0xf9, 0xcc, 0xe5, 0x61, 0xc6, 0x3f,
	0x85, 0x46, 0x3e, 0x5b, 0x2b, 0xa9, 0x95, 0x26, 0xa6, 0x9e, 0x9f, 0x80, 0x70, 0xe8, 0x2a, 0x49,
	0x9e, 0x40, 0x73, 0x60, 0xdb, 0x32, 0xf6, 0xd5, 0x78, 0x84, 0x33, 0x56, 0xb5, 0x1a, 0x69, 0x62,
	0x56, 0x99, 0x70, 0x68, 0x91, 0x79, 0xf1, 0x53, 0x83, 0x2d, 0x54, 0xc8, 0x00, 0x5a, 0xef, 0xb8,
	0x2a, 0xe6, 0xf6, 0x61, 0xbf, 0x74, 0x27, 0xf4, 0x57, 0x15, 0x77, 0x8d, 0xdb, 0x12, 0xa8, 0x9c,
	0x41, 0xe7, 0x46, 0xcd, 0xe4, 0xf1, 0x06, 0x7e, 0xdb, 0xae, 0xba, 0xdd, 0x0d, 0x68, 0xed, 0x3a,
	0xb1, 0x3a, 0xbf, 0xae, 0xf6, 0xb5, 0xdf, 0x57, 0xfb, 0xda, 0x9f, 0xab, 0x7d, 0xed, 0x4b, 0x95,
	0x05, 0x62, 0x5a, 0xc7, 0x7b, 0xe7, 0xe5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xaf, 0x1e,
	0x2f, 0xc1, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopicClient is the client API for Topic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopicClient interface {
	GetTopicInfo(ctx context.Context, in *TopicReq, opts ...grpc.CallOption) (*TopicInfo, error)
	CheckTopicManager(ctx context.Context, in *CheckTopicManagerReq, opts ...grpc.CallOption) (*EmptyStruct, error)
}

type topicClient struct {
	cc *grpc.ClientConn
}

func NewTopicClient(cc *grpc.ClientConn) TopicClient {
	return &topicClient{cc}
}

func (c *topicClient) GetTopicInfo(ctx context.Context, in *TopicReq, opts ...grpc.CallOption) (*TopicInfo, error) {
	out := new(TopicInfo)
	err := c.cc.Invoke(ctx, "/service.topic.Topic/GetTopicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicClient) CheckTopicManager(ctx context.Context, in *CheckTopicManagerReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.topic.Topic/CheckTopicManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicServer is the server API for Topic service.
type TopicServer interface {
	GetTopicInfo(context.Context, *TopicReq) (*TopicInfo, error)
	CheckTopicManager(context.Context, *CheckTopicManagerReq) (*EmptyStruct, error)
}

// UnimplementedTopicServer can be embedded to have forward compatible implementations.
type UnimplementedTopicServer struct {
}

func (*UnimplementedTopicServer) GetTopicInfo(ctx context.Context, req *TopicReq) (*TopicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicInfo not implemented")
}
func (*UnimplementedTopicServer) CheckTopicManager(ctx context.Context, req *CheckTopicManagerReq) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTopicManager not implemented")
}

func RegisterTopicServer(s *grpc.Server, srv TopicServer) {
	s.RegisterService(&_Topic_serviceDesc, srv)
}

func _Topic_GetTopicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).GetTopicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.topic.Topic/GetTopicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).GetTopicInfo(ctx, req.(*TopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topic_CheckTopicManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTopicManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).CheckTopicManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.topic.Topic/CheckTopicManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).CheckTopicManager(ctx, req.(*CheckTopicManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Topic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.topic.Topic",
	HandlerType: (*TopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopicInfo",
			Handler:    _Topic_GetTopicInfo_Handler,
		},
		{
			MethodName: "CheckTopicManager",
			Handler:    _Topic_CheckTopicManager_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *TopicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x78
	}
	if m.CreatedBy != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x70
	}
	if len(m.TopicHome) > 0 {
		i -= len(m.TopicHome)
		copy(dAtA[i:], m.TopicHome)
		i = encodeVarintPb(dAtA, i, uint64(len(m.TopicHome)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CatalogViewType) > 0 {
		i -= len(m.CatalogViewType)
		copy(dAtA[i:], m.CatalogViewType)
		i = encodeVarintPb(dAtA, i, uint64(len(m.CatalogViewType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.JoinPermission) > 0 {
		i -= len(m.JoinPermission)
		copy(dAtA[i:], m.JoinPermission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.JoinPermission)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EditPermission) > 0 {
		i -= len(m.EditPermission)
		copy(dAtA[i:], m.EditPermission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.EditPermission)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ViewPermission) > 0 {
		i -= len(m.ViewPermission)
		copy(dAtA[i:], m.ViewPermission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ViewPermission)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsPrivate {
		i--
		if m.IsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.AllowChat {
		i--
		if m.AllowChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AllowDiscuss {
		i--
		if m.AllowDiscuss {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Bg != nil {
		{
			size := m.Bg.Size()
			i -= size
			if _, err := m.Bg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Avatar != nil {
		{
			size := m.Avatar.Size()
			i -= size
			if _, err := m.Avatar.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicInfo_AvatarValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicInfo_AvatarValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AvatarValue)
	copy(dAtA[i:], m.AvatarValue)
	i = encodeVarintPb(dAtA, i, uint64(len(m.AvatarValue)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *TopicInfo_BgValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicInfo_BgValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.BgValue)
	copy(dAtA[i:], m.BgValue)
	i = encodeVarintPb(dAtA, i, uint64(len(m.BgValue)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *TopicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckTopicManagerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckTopicManagerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckTopicManagerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Avatar != nil {
		n += m.Avatar.Size()
	}
	if m.Bg != nil {
		n += m.Bg.Size()
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.AllowDiscuss {
		n += 2
	}
	if m.AllowChat {
		n += 2
	}
	if m.IsPrivate {
		n += 2
	}
	l = len(m.ViewPermission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.EditPermission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.JoinPermission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.CatalogViewType)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.TopicHome)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovPb(uint64(m.CreatedBy))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicInfo_AvatarValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvatarValue)
	n += 1 + l + sovPb(uint64(l))
	return n
}
func (m *TopicInfo_BgValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BgValue)
	n += 1 + l + sovPb(uint64(l))
	return n
}
func (m *TopicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckTopicManagerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovPb(uint64(m.TopicID))
	}
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = &TopicInfo_AvatarValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bg = &TopicInfo_BgValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDiscuss", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowDiscuss = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowChat = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrivate = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewPermission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewPermission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditPermission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditPermission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinPermission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinPermission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatalogViewType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CatalogViewType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicHome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicHome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckTopicManagerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckTopicManagerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckTopicManagerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb   = fmt.Errorf("proto: integer overflow")
)
