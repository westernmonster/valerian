syntax = "proto3";
package service.comment;
option go_package = "api";


import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
message EmptyStruct {
}

message Creator {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    string  UserName = 2 [(gogoproto.jsontag) = "user_name"];

    string Avatar   = 3 [(gogoproto.jsontag) = "avatar"];

    string  Introduction = 4 [(gogoproto.jsontag) = "introduction"] ;
}

message CommentInfo {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    string  Content = 2 [(gogoproto.jsontag) = "content"];

    string  TargetType = 3 [(gogoproto.jsontag) = "target_type"];

    int64 OwnerID = 4 [(gogoproto.jsontag) = "owner_id"];

    int64 ResourceID = 5 [(gogoproto.jsontag) = "resource_id"];

    bool Featured = 6 [(gogoproto.jsontag) = "featured"];

    bool Deleted = 7 [(gogoproto.jsontag) = "deleted"];

    Creator  Creator  = 8 [(gogoproto.jsontag) = "creator"];

    int64 CreatedAt = 9 [(gogoproto.jsontag) = "created_at"];

    CommentStat  Stat = 11 [(gogoproto.jsontag) = "stat"];

    Creator  ReplyTo = 12 [(gogoproto.jsontag) = "reply_to"] ;

    string OwnerType = 13 [(gogoproto.jsontag) = "owner_type"];
}

message CommentListResp {
    repeated CommentInfo Items = 1;
}

message AddCommentReq {
    string TargetType  = 1;
    string Content  = 2;
    int64 TargetID  = 3;
}

message DeleteReq {
    int64 ID  = 1;
}

message CommentListReq {
    int64 ResourceID = 1;
    string TargetType = 2;
    int32 Limit = 3;
    int32 Offset = 4;
}


message CommentStat {
    int32 LikeCount = 1 [(gogoproto.jsontag) = "like_count"];
    int32 DislikeCount = 2 [(gogoproto.jsontag) = "dislike_count"];
    int32 ChildrenCount = 3 [(gogoproto.jsontag) = "children_count"];
}


message IDReq {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];
    bool UseMaster = 2;
}

service Comment {
    rpc GetCommentInfo(IDReq) returns (CommentInfo);
    rpc GetCommentsPaged(CommentListReq) returns (CommentListResp);
    rpc AddComment(AddCommentReq) returns (EmptyStruct);
    rpc DeleteComment(DeleteReq) returns (EmptyStruct);
}




