syntax = "proto3";
package passport.service.identity;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message EmptyStruct {
}

message AuthReply {
    // if cookie or token in life time, login is true
    // else login is false and mid csrf expires is empty
    bool login = 1 [(gogoproto.jsontag) = "login"];
    // user identify id
    int64 aid = 2 [(gogoproto.jsontag) = "aid"];
    // expiration date
    // unix timestamp
    int64 expires = 4 [(gogoproto.jsontag) = "expires"];
}

message TokenReq {
    // user access token
    string token = 1 [(gogoproto.jsontag) = "token"];
}


message RenewTokenReq {
    string refresh_token = 1;
    string client_id = 2;
}


message LogoutReq {
    int64 aid = 1;
    string client_id = 2;
}

message RenewTokenResp {
    int64 aid = 1;
    string access_token = 2;
    int32 expires_in = 3;
    string token_type = 4;
    string refresh_token = 5;
}


message AdminAuthReq {
    string sid = 1;
}

message AdminAuthResp {
    string sid = 1;
    string username = 2;
    int64 aid = 3;
}

message AdminPermissionReq {
    string sid = 1;
}

message AdminPermissionResp {
    int64 aid = 1;
    repeated string perms = 2;
}


service Identify {
    rpc GetTokenInfo(TokenReq) returns (AuthReply);

    rpc RenewToken(RenewTokenReq) returns (RenewTokenResp);

    rpc Logout(LogoutReq) returns (EmptyStruct);

    rpc AdminAuth(AdminAuthReq) returns(AdminAuthResp);

    rpc Permissions(AdminPermissionReq) returns(AdminPermissionResp);
}
