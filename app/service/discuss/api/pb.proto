syntax = "proto3";
package service.discuss;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
message EmptyStruct {
}

message DiscussionStat {
    int32 LikeCount = 1 [(gogoproto.jsontag) = "like_count"];
    int32 DislikeCount = 2 [(gogoproto.jsontag) = "dislike_count"];
    int32 CommentCount = 3 [(gogoproto.jsontag) = "comment_count"];
}

message CategoriesResp {
    repeated CategoryInfo items = 1 [(gogoproto.jsontag) = 'items'];
}

message CategoryInfo {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    int64 TopicID = 2 [(gogoproto.jsontag) = "topic_id"];

    string  Name = 3 [(gogoproto.jsontag) = "name"] ;

    int32  Seq = 4 [(gogoproto.jsontag) = "seq"] ;
}


message Creator {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    string  UserName = 2 [(gogoproto.jsontag) = "user_name"];

    string Avatar   = 3 [(gogoproto.jsontag) = "avatar"];

        string  Introduction = 4 [(gogoproto.jsontag) = "introduction"] ;
}



message DiscussionInfo {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];

    int64 TopicID = 2 [(gogoproto.jsontag) = "topic_id"];

    int64 CategoryID = 3 [(gogoproto.jsontag) = "category_id"];

    Creator Creator = 4 [(gogoproto.jsontag) = "creator"];

    string  Title = 5 [(gogoproto.jsontag) = "title"] ;

    string  Excerpt = 6 [(gogoproto.jsontag) = "excerpt"];


    // unix timestamp
    int64 CreatedAt = 7 [(gogoproto.jsontag) = "created_at"];

    // unix timestamp
    int64 UpdatedAt = 8 [(gogoproto.jsontag) = "updated_at"];

    DiscussionStat  Stat = 9 [(gogoproto.jsontag) = "stat"];

    repeated string ImageUrls  = 10 [(gogoproto.jsontag) = "image_urls"];

    string  Content = 11 [(gogoproto.jsontag) = "content"];

    string  ContentText = 12 [(gogoproto.jsontag) = "content_context"];

    CategoryInfo CategoryInfo = 13 [(gogoproto.jsontag) = "category"];
}


message UserDiscussionsReq {
    int64 AccountID = 1 [(gogoproto.jsontag) = "aid"];
    int32 Limit = 2 [(gogoproto.jsontag) = "limit"];
    int32 Offset = 3 [(gogoproto.jsontag) = "offset"];
}

message UserDiscussionsResp {
    repeated DiscussionInfo Items = 1 [(gogoproto.jsontag) = 'items'];
}

message AllDiscussionsResp {
    repeated DiscussionInfo Items = 1 [(gogoproto.jsontag) = 'items'];
}

message IDReq {
    int64 ID = 1 [(gogoproto.jsontag) = "id"];
    string include = 2 [(gogoproto.jsontag) = "include"]; ;
    bool UseMaster = 3;
}

message CategoriesReq {
    int64 TopicID = 1 [(gogoproto.jsontag) = "topic_id"];
    bool UseMaster = 2;
}

message ArgDisucssCategory {
    oneof ID {
        int64 IDValue = 1;
    }

    string Name = 2;
    int32 Seq = 3;
}

message ArgSaveDiscussCategories {
    int64 TopicID = 1;
    int64 Aid = 2;
    repeated ArgDisucssCategory Items = 3;
}

message ArgAddDiscuss {
    int64 TopicID = 1;
    int64 CategoryID = 2;
    oneof Title {
        string TitleValue = 3;
    }
    string Content = 4;
    repeated  ArgDiscussionFile Files = 5;
}

message ArgDiscussionFile {
    oneof ID {
        int64 IDValue = 1;
    }
    string FileName  = 2;
    string FileType  = 3;
    string FileURL  = 4;
    int32 Seq = 5;
}

message ArgUpdateDiscuss {
    int64 ID = 1;
    oneof Title {
        string TitleValue = 2;
    }
    string Content = 3;
    repeated  ArgDiscussionFile Files = 5;
}

message ArgSaveDiscussFiles {
    int64 DiscussionID = 1;
    int64 Aid = 2;
    repeated ArgDiscussionFile Items = 5;
}

message IDsResp {
    repeated int64 IDs = 1 [(gogoproto.jsontag) = 'ids'];
}


service Discussion {
    rpc GetDiscussionInfo(IDReq) returns (DiscussionInfo);
    rpc GetDiscussionStat(IDReq) returns (DiscussionStat);
    rpc GetDiscussionCategories(CategoriesReq) returns (CategoriesResp);
    rpc GetUserDiscussionsPaged(UserDiscussionsReq) returns (UserDiscussionsResp);
    rpc GetUserDiscussionIDsPaged(UserDiscussionsReq) returns (IDsResp);
    rpc GetAllDiscussions(EmptyStruct) returns (AllDiscussionsResp);
}

