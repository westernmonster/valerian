// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EmptyStruct struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{0}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(m, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

type BaseInfoReply struct {
	ID                   int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserName             string           `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Gender               int32            `protobuf:"varint,3,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Introduction         string           `protobuf:"bytes,4,opt,name=Introduction,proto3" json:"Introduction,omitempty"`
	Avatar               string           `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	IDCert               bool             `protobuf:"varint,6,opt,name=IDCert,proto3" json:"IDCert,omitempty"`
	WorkCert             bool             `protobuf:"varint,7,opt,name=WorkCert,proto3" json:"WorkCert,omitempty"`
	IsOrg                bool             `protobuf:"varint,8,opt,name=IsOrg,proto3" json:"IsOrg,omitempty"`
	IsVIP                bool             `protobuf:"varint,9,opt,name=IsVIP,proto3" json:"IsVIP,omitempty"`
	Role                 string           `protobuf:"bytes,10,opt,name=Role,proto3" json:"Role,omitempty"`
	Stat                 *AccountStatInfo `protobuf:"bytes,11,opt,name=Stat,proto3" json:"Stat,omitempty"`
	IsLock               bool             `protobuf:"varint,12,opt,name=IsLock,proto3" json:"IsLock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BaseInfoReply) Reset()         { *m = BaseInfoReply{} }
func (m *BaseInfoReply) String() string { return proto.CompactTextString(m) }
func (*BaseInfoReply) ProtoMessage()    {}
func (*BaseInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{1}
}
func (m *BaseInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoReply.Merge(m, src)
}
func (m *BaseInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoReply proto.InternalMessageInfo

func (m *BaseInfoReply) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BaseInfoReply) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *BaseInfoReply) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *BaseInfoReply) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *BaseInfoReply) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *BaseInfoReply) GetIDCert() bool {
	if m != nil {
		return m.IDCert
	}
	return false
}

func (m *BaseInfoReply) GetWorkCert() bool {
	if m != nil {
		return m.WorkCert
	}
	return false
}

func (m *BaseInfoReply) GetIsOrg() bool {
	if m != nil {
		return m.IsOrg
	}
	return false
}

func (m *BaseInfoReply) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

func (m *BaseInfoReply) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *BaseInfoReply) GetStat() *AccountStatInfo {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *BaseInfoReply) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

type BaseInfosReply struct {
	// member基本信息集合
	BaseInfos            map[int64]*BaseInfoReply `protobuf:"bytes,1,rep,name=base_infos,json=baseInfos,proto3" json:"base_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BaseInfosReply) Reset()         { *m = BaseInfosReply{} }
func (m *BaseInfosReply) String() string { return proto.CompactTextString(m) }
func (*BaseInfosReply) ProtoMessage()    {}
func (*BaseInfosReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{2}
}
func (m *BaseInfosReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfosReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfosReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseInfosReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfosReply.Merge(m, src)
}
func (m *BaseInfosReply) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfosReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfosReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfosReply proto.InternalMessageInfo

func (m *BaseInfosReply) GetBaseInfos() map[int64]*BaseInfoReply {
	if m != nil {
		return m.BaseInfos
	}
	return nil
}

type SettingReq struct {
	Aid                  int64           `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Settings             map[string]bool `protobuf:"bytes,2,rep,name=Settings,proto3" json:"Settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Language             string          `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"`
	UseMaster            bool            `protobuf:"varint,4,opt,name=UseMaster,proto3" json:"UseMaster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SettingReq) Reset()         { *m = SettingReq{} }
func (m *SettingReq) String() string { return proto.CompactTextString(m) }
func (*SettingReq) ProtoMessage()    {}
func (*SettingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{3}
}
func (m *SettingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingReq.Merge(m, src)
}
func (m *SettingReq) XXX_Size() int {
	return m.Size()
}
func (m *SettingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingReq.DiscardUnknown(m)
}

var xxx_messageInfo_SettingReq proto.InternalMessageInfo

func (m *SettingReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SettingReq) GetSettings() map[string]bool {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *SettingReq) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *SettingReq) GetUseMaster() bool {
	if m != nil {
		return m.UseMaster
	}
	return false
}

type SelfProfile struct {
	ID                   int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Mobile               string           `protobuf:"bytes,2,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	Email                string           `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	Prefix               string           `protobuf:"bytes,4,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	UserName             string           `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Gender               int32            `protobuf:"varint,6,opt,name=Gender,proto3" json:"Gender,omitempty"`
	BirthYear            int32            `protobuf:"varint,7,opt,name=BirthYear,proto3" json:"BirthYear,omitempty"`
	BirthMonth           int32            `protobuf:"varint,8,opt,name=BirthMonth,proto3" json:"BirthMonth,omitempty"`
	BirthDay             int32            `protobuf:"varint,9,opt,name=BirthDay,proto3" json:"BirthDay,omitempty"`
	Introduction         string           `protobuf:"bytes,10,opt,name=Introduction,proto3" json:"Introduction,omitempty"`
	Avatar               string           `protobuf:"bytes,11,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Source               int32            `protobuf:"varint,12,opt,name=Source,proto3" json:"Source,omitempty"`
	Location             int64            `protobuf:"varint,13,opt,name=Location,proto3" json:"Location,omitempty"`
	LocationString       string           `protobuf:"bytes,14,opt,name=LocationString,proto3" json:"LocationString,omitempty"`
	IDCert               bool             `protobuf:"varint,15,opt,name=IDCert,proto3" json:"IDCert,omitempty"`
	IDCertStatus         int32            `protobuf:"varint,16,opt,name=IDCertStatus,proto3" json:"IDCertStatus,omitempty"`
	WorkCert             bool             `protobuf:"varint,17,opt,name=WorkCert,proto3" json:"WorkCert,omitempty"`
	WorkCertStatus       int32            `protobuf:"varint,18,opt,name=WorkCertStatus,proto3" json:"WorkCertStatus,omitempty"`
	IP                   string           `protobuf:"bytes,19,opt,name=IP,proto3" json:"IP,omitempty"`
	IsOrg                bool             `protobuf:"varint,20,opt,name=IsOrg,proto3" json:"IsOrg,omitempty"`
	IsVIP                bool             `protobuf:"varint,21,opt,name=IsVIP,proto3" json:"IsVIP,omitempty"`
	Role                 string           `protobuf:"bytes,22,opt,name=Role,proto3" json:"Role,omitempty"`
	CreatedAt            int64            `protobuf:"varint,23,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64            `protobuf:"varint,24,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Stat                 *AccountStatInfo `protobuf:"bytes,25,opt,name=Stat,proto3" json:"Stat,omitempty"`
	Setting              *Setting         `protobuf:"bytes,26,opt,name=Setting,proto3" json:"Setting,omitempty"`
	Company              string           `protobuf:"bytes,27,opt,name=Company,proto3" json:"Company,omitempty"`
	Position             string           `protobuf:"bytes,28,opt,name=Position,proto3" json:"Position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SelfProfile) Reset()         { *m = SelfProfile{} }
func (m *SelfProfile) String() string { return proto.CompactTextString(m) }
func (*SelfProfile) ProtoMessage()    {}
func (*SelfProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{4}
}
func (m *SelfProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelfProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelfProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelfProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelfProfile.Merge(m, src)
}
func (m *SelfProfile) XXX_Size() int {
	return m.Size()
}
func (m *SelfProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SelfProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SelfProfile proto.InternalMessageInfo

func (m *SelfProfile) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SelfProfile) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *SelfProfile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SelfProfile) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *SelfProfile) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SelfProfile) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *SelfProfile) GetBirthYear() int32 {
	if m != nil {
		return m.BirthYear
	}
	return 0
}

func (m *SelfProfile) GetBirthMonth() int32 {
	if m != nil {
		return m.BirthMonth
	}
	return 0
}

func (m *SelfProfile) GetBirthDay() int32 {
	if m != nil {
		return m.BirthDay
	}
	return 0
}

func (m *SelfProfile) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *SelfProfile) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *SelfProfile) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *SelfProfile) GetLocation() int64 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *SelfProfile) GetLocationString() string {
	if m != nil {
		return m.LocationString
	}
	return ""
}

func (m *SelfProfile) GetIDCert() bool {
	if m != nil {
		return m.IDCert
	}
	return false
}

func (m *SelfProfile) GetIDCertStatus() int32 {
	if m != nil {
		return m.IDCertStatus
	}
	return 0
}

func (m *SelfProfile) GetWorkCert() bool {
	if m != nil {
		return m.WorkCert
	}
	return false
}

func (m *SelfProfile) GetWorkCertStatus() int32 {
	if m != nil {
		return m.WorkCertStatus
	}
	return 0
}

func (m *SelfProfile) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *SelfProfile) GetIsOrg() bool {
	if m != nil {
		return m.IsOrg
	}
	return false
}

func (m *SelfProfile) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

func (m *SelfProfile) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *SelfProfile) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SelfProfile) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SelfProfile) GetStat() *AccountStatInfo {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *SelfProfile) GetSetting() *Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *SelfProfile) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *SelfProfile) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type Setting struct {
	ActivityLike         bool     `protobuf:"varint,1,opt,name=ActivityLike,proto3" json:"ActivityLike,omitempty"`
	ActivityComment      bool     `protobuf:"varint,2,opt,name=ActivityComment,proto3" json:"ActivityComment,omitempty"`
	ActivityFollowTopic  bool     `protobuf:"varint,3,opt,name=ActivityFollowTopic,proto3" json:"ActivityFollowTopic,omitempty"`
	ActivityFollowMember bool     `protobuf:"varint,4,opt,name=ActivityFollowMember,proto3" json:"ActivityFollowMember,omitempty"`
	NotifyLike           bool     `protobuf:"varint,5,opt,name=NotifyLike,proto3" json:"NotifyLike,omitempty"`
	NotifyComment        bool     `protobuf:"varint,6,opt,name=NotifyComment,proto3" json:"NotifyComment,omitempty"`
	NotifyNewFans        bool     `protobuf:"varint,7,opt,name=NotifyNewFans,proto3" json:"NotifyNewFans,omitempty"`
	NotifyNewMember      bool     `protobuf:"varint,8,opt,name=NotifyNewMember,proto3" json:"NotifyNewMember,omitempty"`
	Language             string   `protobuf:"bytes,9,opt,name=Language,proto3" json:"Language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Setting) Reset()         { *m = Setting{} }
func (m *Setting) String() string { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()    {}
func (*Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{5}
}
func (m *Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Setting.Merge(m, src)
}
func (m *Setting) XXX_Size() int {
	return m.Size()
}
func (m *Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Setting proto.InternalMessageInfo

func (m *Setting) GetActivityLike() bool {
	if m != nil {
		return m.ActivityLike
	}
	return false
}

func (m *Setting) GetActivityComment() bool {
	if m != nil {
		return m.ActivityComment
	}
	return false
}

func (m *Setting) GetActivityFollowTopic() bool {
	if m != nil {
		return m.ActivityFollowTopic
	}
	return false
}

func (m *Setting) GetActivityFollowMember() bool {
	if m != nil {
		return m.ActivityFollowMember
	}
	return false
}

func (m *Setting) GetNotifyLike() bool {
	if m != nil {
		return m.NotifyLike
	}
	return false
}

func (m *Setting) GetNotifyComment() bool {
	if m != nil {
		return m.NotifyComment
	}
	return false
}

func (m *Setting) GetNotifyNewFans() bool {
	if m != nil {
		return m.NotifyNewFans
	}
	return false
}

func (m *Setting) GetNotifyNewMember() bool {
	if m != nil {
		return m.NotifyNewMember
	}
	return false
}

func (m *Setting) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type AccountStatInfo struct {
	FollowingCount       int32    `protobuf:"varint,1,opt,name=FollowingCount,proto3" json:"FollowingCount,omitempty"`
	FansCount            int32    `protobuf:"varint,2,opt,name=FansCount,proto3" json:"FansCount,omitempty"`
	BlackCount           int32    `protobuf:"varint,3,opt,name=BlackCount,proto3" json:"BlackCount,omitempty"`
	TopicCount           int32    `protobuf:"varint,4,opt,name=TopicCount,proto3" json:"TopicCount,omitempty"`
	ArticleCount         int32    `protobuf:"varint,5,opt,name=ArticleCount,proto3" json:"ArticleCount,omitempty"`
	DiscussionCount      int32    `protobuf:"varint,6,opt,name=DiscussionCount,proto3" json:"DiscussionCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountStatInfo) Reset()         { *m = AccountStatInfo{} }
func (m *AccountStatInfo) String() string { return proto.CompactTextString(m) }
func (*AccountStatInfo) ProtoMessage()    {}
func (*AccountStatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{6}
}
func (m *AccountStatInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountStatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountStatInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountStatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStatInfo.Merge(m, src)
}
func (m *AccountStatInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccountStatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStatInfo proto.InternalMessageInfo

func (m *AccountStatInfo) GetFollowingCount() int32 {
	if m != nil {
		return m.FollowingCount
	}
	return 0
}

func (m *AccountStatInfo) GetFansCount() int32 {
	if m != nil {
		return m.FansCount
	}
	return 0
}

func (m *AccountStatInfo) GetBlackCount() int32 {
	if m != nil {
		return m.BlackCount
	}
	return 0
}

func (m *AccountStatInfo) GetTopicCount() int32 {
	if m != nil {
		return m.TopicCount
	}
	return 0
}

func (m *AccountStatInfo) GetArticleCount() int32 {
	if m != nil {
		return m.ArticleCount
	}
	return 0
}

func (m *AccountStatInfo) GetDiscussionCount() int32 {
	if m != nil {
		return m.DiscussionCount
	}
	return 0
}

type MemberInfoReply struct {
	ID                   int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserName             string           `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Gender               int32            `protobuf:"varint,3,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Introduction         string           `protobuf:"bytes,4,opt,name=Introduction,proto3" json:"Introduction,omitempty"`
	Location             int64            `protobuf:"varint,5,opt,name=Location,proto3" json:"Location,omitempty"`
	LocationString       string           `protobuf:"bytes,6,opt,name=LocationString,proto3" json:"LocationString,omitempty"`
	Avatar               string           `protobuf:"bytes,7,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	IDCert               bool             `protobuf:"varint,8,opt,name=IDCert,proto3" json:"IDCert,omitempty"`
	WorkCert             bool             `protobuf:"varint,9,opt,name=WorkCert,proto3" json:"WorkCert,omitempty"`
	IsOrg                bool             `protobuf:"varint,10,opt,name=IsOrg,proto3" json:"IsOrg,omitempty"`
	IsVIP                bool             `protobuf:"varint,11,opt,name=IsVIP,proto3" json:"IsVIP,omitempty"`
	CreatedAt            int64            `protobuf:"varint,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Stat                 *AccountStatInfo `protobuf:"bytes,13,opt,name=Stat,proto3" json:"Stat,omitempty"`
	Company              string           `protobuf:"bytes,14,opt,name=Company,proto3" json:"Company,omitempty"`
	Position             string           `protobuf:"bytes,15,opt,name=Position,proto3" json:"Position,omitempty"`
	IsLock               bool             `protobuf:"varint,16,opt,name=IsLock,proto3" json:"IsLock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MemberInfoReply) Reset()         { *m = MemberInfoReply{} }
func (m *MemberInfoReply) String() string { return proto.CompactTextString(m) }
func (*MemberInfoReply) ProtoMessage()    {}
func (*MemberInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{7}
}
func (m *MemberInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberInfoReply.Merge(m, src)
}
func (m *MemberInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *MemberInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_MemberInfoReply proto.InternalMessageInfo

func (m *MemberInfoReply) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MemberInfoReply) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *MemberInfoReply) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *MemberInfoReply) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *MemberInfoReply) GetLocation() int64 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *MemberInfoReply) GetLocationString() string {
	if m != nil {
		return m.LocationString
	}
	return ""
}

func (m *MemberInfoReply) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *MemberInfoReply) GetIDCert() bool {
	if m != nil {
		return m.IDCert
	}
	return false
}

func (m *MemberInfoReply) GetWorkCert() bool {
	if m != nil {
		return m.WorkCert
	}
	return false
}

func (m *MemberInfoReply) GetIsOrg() bool {
	if m != nil {
		return m.IsOrg
	}
	return false
}

func (m *MemberInfoReply) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

func (m *MemberInfoReply) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *MemberInfoReply) GetStat() *AccountStatInfo {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *MemberInfoReply) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *MemberInfoReply) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *MemberInfoReply) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

type AdminAccountItem struct {
	ID                   int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserName             string           `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Gender               int32            `protobuf:"varint,3,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Introduction         string           `protobuf:"bytes,4,opt,name=Introduction,proto3" json:"Introduction,omitempty"`
	Location             int64            `protobuf:"varint,5,opt,name=Location,proto3" json:"Location,omitempty"`
	LocationString       string           `protobuf:"bytes,6,opt,name=LocationString,proto3" json:"LocationString,omitempty"`
	Avatar               string           `protobuf:"bytes,7,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	IDCert               bool             `protobuf:"varint,8,opt,name=IDCert,proto3" json:"IDCert,omitempty"`
	WorkCert             bool             `protobuf:"varint,9,opt,name=WorkCert,proto3" json:"WorkCert,omitempty"`
	IsOrg                bool             `protobuf:"varint,10,opt,name=IsOrg,proto3" json:"IsOrg,omitempty"`
	IsVIP                bool             `protobuf:"varint,11,opt,name=IsVIP,proto3" json:"IsVIP,omitempty"`
	CreatedAt            int64            `protobuf:"varint,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Stat                 *AccountStatInfo `protobuf:"bytes,13,opt,name=Stat,proto3" json:"Stat,omitempty"`
	Company              string           `protobuf:"bytes,14,opt,name=Company,proto3" json:"Company,omitempty"`
	Position             string           `protobuf:"bytes,15,opt,name=Position,proto3" json:"Position,omitempty"`
	IsLock               bool             `protobuf:"varint,16,opt,name=IsLock,proto3" json:"IsLock,omitempty"`
	Email                string           `protobuf:"bytes,17,opt,name=Email,proto3" json:"Email,omitempty"`
	Prefix               string           `protobuf:"bytes,18,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	Mobile               string           `protobuf:"bytes,19,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AdminAccountItem) Reset()         { *m = AdminAccountItem{} }
func (m *AdminAccountItem) String() string { return proto.CompactTextString(m) }
func (*AdminAccountItem) ProtoMessage()    {}
func (*AdminAccountItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{8}
}
func (m *AdminAccountItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminAccountItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminAccountItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminAccountItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminAccountItem.Merge(m, src)
}
func (m *AdminAccountItem) XXX_Size() int {
	return m.Size()
}
func (m *AdminAccountItem) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminAccountItem.DiscardUnknown(m)
}

var xxx_messageInfo_AdminAccountItem proto.InternalMessageInfo

func (m *AdminAccountItem) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AdminAccountItem) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *AdminAccountItem) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *AdminAccountItem) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *AdminAccountItem) GetLocation() int64 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *AdminAccountItem) GetLocationString() string {
	if m != nil {
		return m.LocationString
	}
	return ""
}

func (m *AdminAccountItem) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *AdminAccountItem) GetIDCert() bool {
	if m != nil {
		return m.IDCert
	}
	return false
}

func (m *AdminAccountItem) GetWorkCert() bool {
	if m != nil {
		return m.WorkCert
	}
	return false
}

func (m *AdminAccountItem) GetIsOrg() bool {
	if m != nil {
		return m.IsOrg
	}
	return false
}

func (m *AdminAccountItem) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

func (m *AdminAccountItem) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *AdminAccountItem) GetStat() *AccountStatInfo {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *AdminAccountItem) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *AdminAccountItem) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *AdminAccountItem) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

func (m *AdminAccountItem) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AdminAccountItem) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *AdminAccountItem) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

type AidReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	RemoteIP             string   `protobuf:"bytes,2,opt,name=remoteIP,proto3" json:"remoteIP,omitempty"`
	UseMaster            bool     `protobuf:"varint,3,opt,name=UseMaster,proto3" json:"UseMaster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AidReq) Reset()         { *m = AidReq{} }
func (m *AidReq) String() string { return proto.CompactTextString(m) }
func (*AidReq) ProtoMessage()    {}
func (*AidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{9}
}
func (m *AidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AidReq.Merge(m, src)
}
func (m *AidReq) XXX_Size() int {
	return m.Size()
}
func (m *AidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AidReq.DiscardUnknown(m)
}

var xxx_messageInfo_AidReq proto.InternalMessageInfo

func (m *AidReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AidReq) GetRemoteIP() string {
	if m != nil {
		return m.RemoteIP
	}
	return ""
}

func (m *AidReq) GetUseMaster() bool {
	if m != nil {
		return m.UseMaster
	}
	return false
}

type AidResp struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AidResp) Reset()         { *m = AidResp{} }
func (m *AidResp) String() string { return proto.CompactTextString(m) }
func (*AidResp) ProtoMessage()    {}
func (*AidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{10}
}
func (m *AidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AidResp.Merge(m, src)
}
func (m *AidResp) XXX_Size() int {
	return m.Size()
}
func (m *AidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AidResp.DiscardUnknown(m)
}

var xxx_messageInfo_AidResp proto.InternalMessageInfo

func (m *AidResp) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type AnnulReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	UseMaster            bool     `protobuf:"varint,3,opt,name=UseMaster,proto3" json:"UseMaster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnnulReq) Reset()         { *m = AnnulReq{} }
func (m *AnnulReq) String() string { return proto.CompactTextString(m) }
func (*AnnulReq) ProtoMessage()    {}
func (*AnnulReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{11}
}
func (m *AnnulReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnulReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnulReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnulReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnulReq.Merge(m, src)
}
func (m *AnnulReq) XXX_Size() int {
	return m.Size()
}
func (m *AnnulReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnulReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnnulReq proto.InternalMessageInfo

func (m *AnnulReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AnnulReq) GetUseMaster() bool {
	if m != nil {
		return m.UseMaster
	}
	return false
}

type EmailReq struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	UseMaster            bool     `protobuf:"varint,2,opt,name=UseMaster,proto3" json:"UseMaster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmailReq) Reset()         { *m = EmailReq{} }
func (m *EmailReq) String() string { return proto.CompactTextString(m) }
func (*EmailReq) ProtoMessage()    {}
func (*EmailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{12}
}
func (m *EmailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailReq.Merge(m, src)
}
func (m *EmailReq) XXX_Size() int {
	return m.Size()
}
func (m *EmailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailReq.DiscardUnknown(m)
}

var xxx_messageInfo_EmailReq proto.InternalMessageInfo

func (m *EmailReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmailReq) GetUseMaster() bool {
	if m != nil {
		return m.UseMaster
	}
	return false
}

type MobileReq struct {
	Mobile               string   `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Prefix               string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	UseMaster            bool     `protobuf:"varint,3,opt,name=UseMaster,proto3" json:"UseMaster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MobileReq) Reset()         { *m = MobileReq{} }
func (m *MobileReq) String() string { return proto.CompactTextString(m) }
func (*MobileReq) ProtoMessage()    {}
func (*MobileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{13}
}
func (m *MobileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MobileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MobileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MobileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MobileReq.Merge(m, src)
}
func (m *MobileReq) XXX_Size() int {
	return m.Size()
}
func (m *MobileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MobileReq.DiscardUnknown(m)
}

var xxx_messageInfo_MobileReq proto.InternalMessageInfo

func (m *MobileReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *MobileReq) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *MobileReq) GetUseMaster() bool {
	if m != nil {
		return m.UseMaster
	}
	return false
}

type ExistResp struct {
	Exist                bool     `protobuf:"varint,1,opt,name=Exist,proto3" json:"Exist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistResp) Reset()         { *m = ExistResp{} }
func (m *ExistResp) String() string { return proto.CompactTextString(m) }
func (*ExistResp) ProtoMessage()    {}
func (*ExistResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{14}
}
func (m *ExistResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExistResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExistResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistResp.Merge(m, src)
}
func (m *ExistResp) XXX_Size() int {
	return m.Size()
}
func (m *ExistResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistResp.DiscardUnknown(m)
}

var xxx_messageInfo_ExistResp proto.InternalMessageInfo

func (m *ExistResp) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type AidsReq struct {
	// aid 列表
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty"`
	RemoteIP             string   `protobuf:"bytes,2,opt,name=remoteIP,proto3" json:"remoteIP,omitempty"`
	UseMaster            bool     `protobuf:"varint,3,opt,name=UseMaster,proto3" json:"UseMaster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AidsReq) Reset()         { *m = AidsReq{} }
func (m *AidsReq) String() string { return proto.CompactTextString(m) }
func (*AidsReq) ProtoMessage()    {}
func (*AidsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{15}
}
func (m *AidsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AidsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AidsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AidsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AidsReq.Merge(m, src)
}
func (m *AidsReq) XXX_Size() int {
	return m.Size()
}
func (m *AidsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AidsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AidsReq proto.InternalMessageInfo

func (m *AidsReq) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

func (m *AidsReq) GetRemoteIP() string {
	if m != nil {
		return m.RemoteIP
	}
	return ""
}

func (m *AidsReq) GetUseMaster() bool {
	if m != nil {
		return m.UseMaster
	}
	return false
}

type DBAccount struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Mobile               string   `protobuf:"bytes,2,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	UserName             string   `protobuf:"bytes,4,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Role                 string   `protobuf:"bytes,6,opt,name=Role,proto3" json:"Role,omitempty"`
	Gender               int32    `protobuf:"varint,8,opt,name=Gender,proto3" json:"Gender,omitempty"`
	BirthYear            int32    `protobuf:"varint,9,opt,name=BirthYear,proto3" json:"BirthYear,omitempty"`
	BirthMonth           int32    `protobuf:"varint,10,opt,name=BirthMonth,proto3" json:"BirthMonth,omitempty"`
	BirthDay             int32    `protobuf:"varint,11,opt,name=BirthDay,proto3" json:"BirthDay,omitempty"`
	Location             int64    `protobuf:"varint,12,opt,name=Location,proto3" json:"Location,omitempty"`
	Introduction         string   `protobuf:"bytes,13,opt,name=Introduction,proto3" json:"Introduction,omitempty"`
	Avatar               string   `protobuf:"bytes,14,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Source               int32    `protobuf:"varint,15,opt,name=Source,proto3" json:"Source,omitempty"`
	IP                   int64    `protobuf:"varint,16,opt,name=IP,proto3" json:"IP,omitempty"`
	IDCert               bool     `protobuf:"varint,17,opt,name=IDCert,proto3" json:"IDCert,omitempty"`
	WorkCert             bool     `protobuf:"varint,18,opt,name=WorkCert,proto3" json:"WorkCert,omitempty"`
	IsOrg                bool     `protobuf:"varint,19,opt,name=IsOrg,proto3" json:"IsOrg,omitempty"`
	IsVIP                bool     `protobuf:"varint,20,opt,name=IsVIP,proto3" json:"IsVIP,omitempty"`
	CreatedAt            int64    `protobuf:"varint,21,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,22,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	IsLock               bool     `protobuf:"varint,23,opt,name=IsLock,proto3" json:"IsLock,omitempty"`
	Prefix               string   `protobuf:"bytes,24,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	Deactive             bool     `protobuf:"varint,25,opt,name=Deactive,proto3" json:"Deactive,omitempty"`
	Password             string   `protobuf:"bytes,26,opt,name=Password,proto3" json:"Password,omitempty"`
	Salt                 string   `protobuf:"bytes,27,opt,name=Salt,proto3" json:"Salt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBAccount) Reset()         { *m = DBAccount{} }
func (m *DBAccount) String() string { return proto.CompactTextString(m) }
func (*DBAccount) ProtoMessage()    {}
func (*DBAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{16}
}
func (m *DBAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBAccount.Merge(m, src)
}
func (m *DBAccount) XXX_Size() int {
	return m.Size()
}
func (m *DBAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_DBAccount.DiscardUnknown(m)
}

var xxx_messageInfo_DBAccount proto.InternalMessageInfo

func (m *DBAccount) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DBAccount) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *DBAccount) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DBAccount) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *DBAccount) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *DBAccount) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *DBAccount) GetBirthYear() int32 {
	if m != nil {
		return m.BirthYear
	}
	return 0
}

func (m *DBAccount) GetBirthMonth() int32 {
	if m != nil {
		return m.BirthMonth
	}
	return 0
}

func (m *DBAccount) GetBirthDay() int32 {
	if m != nil {
		return m.BirthDay
	}
	return 0
}

func (m *DBAccount) GetLocation() int64 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *DBAccount) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *DBAccount) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *DBAccount) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *DBAccount) GetIP() int64 {
	if m != nil {
		return m.IP
	}
	return 0
}

func (m *DBAccount) GetIDCert() bool {
	if m != nil {
		return m.IDCert
	}
	return false
}

func (m *DBAccount) GetWorkCert() bool {
	if m != nil {
		return m.WorkCert
	}
	return false
}

func (m *DBAccount) GetIsOrg() bool {
	if m != nil {
		return m.IsOrg
	}
	return false
}

func (m *DBAccount) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

func (m *DBAccount) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *DBAccount) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *DBAccount) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

func (m *DBAccount) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *DBAccount) GetDeactive() bool {
	if m != nil {
		return m.Deactive
	}
	return false
}

func (m *DBAccount) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DBAccount) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

type UpdateProfileReq struct {
	// Types that are valid to be assigned to Avatar:
	//	*UpdateProfileReq_AvatarValue
	Avatar isUpdateProfileReq_Avatar `protobuf_oneof:"Avatar"`
	// Types that are valid to be assigned to UserName:
	//	*UpdateProfileReq_UserNameValue
	UserName isUpdateProfileReq_UserName `protobuf_oneof:"UserName"`
	// Types that are valid to be assigned to Gender:
	//	*UpdateProfileReq_GenderValue
	Gender isUpdateProfileReq_Gender `protobuf_oneof:"Gender"`
	// Types that are valid to be assigned to Location:
	//	*UpdateProfileReq_LocationValue
	Location isUpdateProfileReq_Location `protobuf_oneof:"Location"`
	// Types that are valid to be assigned to BirthYear:
	//	*UpdateProfileReq_BirthYearValue
	BirthYear isUpdateProfileReq_BirthYear `protobuf_oneof:"BirthYear"`
	// Types that are valid to be assigned to BirthMonth:
	//	*UpdateProfileReq_BirthMonthValue
	BirthMonth isUpdateProfileReq_BirthMonth `protobuf_oneof:"BirthMonth"`
	// Types that are valid to be assigned to BirthDay:
	//	*UpdateProfileReq_BirthDayValue
	BirthDay isUpdateProfileReq_BirthDay `protobuf_oneof:"BirthDay"`
	// Types that are valid to be assigned to Introduction:
	//	*UpdateProfileReq_IntroductionValue
	Introduction isUpdateProfileReq_Introduction `protobuf_oneof:"Introduction"`
	// Types that are valid to be assigned to Password:
	//	*UpdateProfileReq_PasswordValue
	Password             isUpdateProfileReq_Password `protobuf_oneof:"Password"`
	AccountID            int64                       `protobuf:"varint,10,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Aid                  int64                       `protobuf:"varint,11,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpdateProfileReq) Reset()         { *m = UpdateProfileReq{} }
func (m *UpdateProfileReq) String() string { return proto.CompactTextString(m) }
func (*UpdateProfileReq) ProtoMessage()    {}
func (*UpdateProfileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{17}
}
func (m *UpdateProfileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProfileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProfileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProfileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProfileReq.Merge(m, src)
}
func (m *UpdateProfileReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProfileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProfileReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProfileReq proto.InternalMessageInfo

type isUpdateProfileReq_Avatar interface {
	isUpdateProfileReq_Avatar()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpdateProfileReq_UserName interface {
	isUpdateProfileReq_UserName()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpdateProfileReq_Gender interface {
	isUpdateProfileReq_Gender()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpdateProfileReq_Location interface {
	isUpdateProfileReq_Location()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpdateProfileReq_BirthYear interface {
	isUpdateProfileReq_BirthYear()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpdateProfileReq_BirthMonth interface {
	isUpdateProfileReq_BirthMonth()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpdateProfileReq_BirthDay interface {
	isUpdateProfileReq_BirthDay()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpdateProfileReq_Introduction interface {
	isUpdateProfileReq_Introduction()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpdateProfileReq_Password interface {
	isUpdateProfileReq_Password()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateProfileReq_AvatarValue struct {
	AvatarValue string `protobuf:"bytes,1,opt,name=AvatarValue,proto3,oneof" json:"AvatarValue,omitempty"`
}
type UpdateProfileReq_UserNameValue struct {
	UserNameValue string `protobuf:"bytes,2,opt,name=UserNameValue,proto3,oneof" json:"UserNameValue,omitempty"`
}
type UpdateProfileReq_GenderValue struct {
	GenderValue int32 `protobuf:"varint,3,opt,name=GenderValue,proto3,oneof" json:"GenderValue,omitempty"`
}
type UpdateProfileReq_LocationValue struct {
	LocationValue int64 `protobuf:"varint,4,opt,name=LocationValue,proto3,oneof" json:"LocationValue,omitempty"`
}
type UpdateProfileReq_BirthYearValue struct {
	BirthYearValue int32 `protobuf:"varint,5,opt,name=BirthYearValue,proto3,oneof" json:"BirthYearValue,omitempty"`
}
type UpdateProfileReq_BirthMonthValue struct {
	BirthMonthValue int32 `protobuf:"varint,6,opt,name=BirthMonthValue,proto3,oneof" json:"BirthMonthValue,omitempty"`
}
type UpdateProfileReq_BirthDayValue struct {
	BirthDayValue int32 `protobuf:"varint,7,opt,name=BirthDayValue,proto3,oneof" json:"BirthDayValue,omitempty"`
}
type UpdateProfileReq_IntroductionValue struct {
	IntroductionValue string `protobuf:"bytes,8,opt,name=IntroductionValue,proto3,oneof" json:"IntroductionValue,omitempty"`
}
type UpdateProfileReq_PasswordValue struct {
	PasswordValue string `protobuf:"bytes,9,opt,name=PasswordValue,proto3,oneof" json:"PasswordValue,omitempty"`
}

func (*UpdateProfileReq_AvatarValue) isUpdateProfileReq_Avatar()             {}
func (*UpdateProfileReq_UserNameValue) isUpdateProfileReq_UserName()         {}
func (*UpdateProfileReq_GenderValue) isUpdateProfileReq_Gender()             {}
func (*UpdateProfileReq_LocationValue) isUpdateProfileReq_Location()         {}
func (*UpdateProfileReq_BirthYearValue) isUpdateProfileReq_BirthYear()       {}
func (*UpdateProfileReq_BirthMonthValue) isUpdateProfileReq_BirthMonth()     {}
func (*UpdateProfileReq_BirthDayValue) isUpdateProfileReq_BirthDay()         {}
func (*UpdateProfileReq_IntroductionValue) isUpdateProfileReq_Introduction() {}
func (*UpdateProfileReq_PasswordValue) isUpdateProfileReq_Password()         {}

func (m *UpdateProfileReq) GetAvatar() isUpdateProfileReq_Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}
func (m *UpdateProfileReq) GetUserName() isUpdateProfileReq_UserName {
	if m != nil {
		return m.UserName
	}
	return nil
}
func (m *UpdateProfileReq) GetGender() isUpdateProfileReq_Gender {
	if m != nil {
		return m.Gender
	}
	return nil
}
func (m *UpdateProfileReq) GetLocation() isUpdateProfileReq_Location {
	if m != nil {
		return m.Location
	}
	return nil
}
func (m *UpdateProfileReq) GetBirthYear() isUpdateProfileReq_BirthYear {
	if m != nil {
		return m.BirthYear
	}
	return nil
}
func (m *UpdateProfileReq) GetBirthMonth() isUpdateProfileReq_BirthMonth {
	if m != nil {
		return m.BirthMonth
	}
	return nil
}
func (m *UpdateProfileReq) GetBirthDay() isUpdateProfileReq_BirthDay {
	if m != nil {
		return m.BirthDay
	}
	return nil
}
func (m *UpdateProfileReq) GetIntroduction() isUpdateProfileReq_Introduction {
	if m != nil {
		return m.Introduction
	}
	return nil
}
func (m *UpdateProfileReq) GetPassword() isUpdateProfileReq_Password {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *UpdateProfileReq) GetAvatarValue() string {
	if x, ok := m.GetAvatar().(*UpdateProfileReq_AvatarValue); ok {
		return x.AvatarValue
	}
	return ""
}

func (m *UpdateProfileReq) GetUserNameValue() string {
	if x, ok := m.GetUserName().(*UpdateProfileReq_UserNameValue); ok {
		return x.UserNameValue
	}
	return ""
}

func (m *UpdateProfileReq) GetGenderValue() int32 {
	if x, ok := m.GetGender().(*UpdateProfileReq_GenderValue); ok {
		return x.GenderValue
	}
	return 0
}

func (m *UpdateProfileReq) GetLocationValue() int64 {
	if x, ok := m.GetLocation().(*UpdateProfileReq_LocationValue); ok {
		return x.LocationValue
	}
	return 0
}

func (m *UpdateProfileReq) GetBirthYearValue() int32 {
	if x, ok := m.GetBirthYear().(*UpdateProfileReq_BirthYearValue); ok {
		return x.BirthYearValue
	}
	return 0
}

func (m *UpdateProfileReq) GetBirthMonthValue() int32 {
	if x, ok := m.GetBirthMonth().(*UpdateProfileReq_BirthMonthValue); ok {
		return x.BirthMonthValue
	}
	return 0
}

func (m *UpdateProfileReq) GetBirthDayValue() int32 {
	if x, ok := m.GetBirthDay().(*UpdateProfileReq_BirthDayValue); ok {
		return x.BirthDayValue
	}
	return 0
}

func (m *UpdateProfileReq) GetIntroductionValue() string {
	if x, ok := m.GetIntroduction().(*UpdateProfileReq_IntroductionValue); ok {
		return x.IntroductionValue
	}
	return ""
}

func (m *UpdateProfileReq) GetPasswordValue() string {
	if x, ok := m.GetPassword().(*UpdateProfileReq_PasswordValue); ok {
		return x.PasswordValue
	}
	return ""
}

func (m *UpdateProfileReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *UpdateProfileReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateProfileReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateProfileReq_AvatarValue)(nil),
		(*UpdateProfileReq_UserNameValue)(nil),
		(*UpdateProfileReq_GenderValue)(nil),
		(*UpdateProfileReq_LocationValue)(nil),
		(*UpdateProfileReq_BirthYearValue)(nil),
		(*UpdateProfileReq_BirthMonthValue)(nil),
		(*UpdateProfileReq_BirthDayValue)(nil),
		(*UpdateProfileReq_IntroductionValue)(nil),
		(*UpdateProfileReq_PasswordValue)(nil),
	}
}

type AccountsPagedReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=Aid,proto3" json:"aid"`
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,proto3" json:"limit"`
	Offset               int32    `protobuf:"varint,3,opt,name=Offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountsPagedReq) Reset()         { *m = AccountsPagedReq{} }
func (m *AccountsPagedReq) String() string { return proto.CompactTextString(m) }
func (*AccountsPagedReq) ProtoMessage()    {}
func (*AccountsPagedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{18}
}
func (m *AccountsPagedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountsPagedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountsPagedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountsPagedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsPagedReq.Merge(m, src)
}
func (m *AccountsPagedReq) XXX_Size() int {
	return m.Size()
}
func (m *AccountsPagedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsPagedReq.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsPagedReq proto.InternalMessageInfo

func (m *AccountsPagedReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AccountsPagedReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AccountsPagedReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type IDsResp struct {
	IDs                  []int64  `protobuf:"varint,1,rep,packed,name=IDs,proto3" json:"ids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDsResp) Reset()         { *m = IDsResp{} }
func (m *IDsResp) String() string { return proto.CompactTextString(m) }
func (*IDsResp) ProtoMessage()    {}
func (*IDsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{19}
}
func (m *IDsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDsResp.Merge(m, src)
}
func (m *IDsResp) XXX_Size() int {
	return m.Size()
}
func (m *IDsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IDsResp.DiscardUnknown(m)
}

var xxx_messageInfo_IDsResp proto.InternalMessageInfo

func (m *IDsResp) GetIDs() []int64 {
	if m != nil {
		return m.IDs
	}
	return nil
}

type AdminAccountsResp struct {
	Items                []*AdminAccountItem `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AdminAccountsResp) Reset()         { *m = AdminAccountsResp{} }
func (m *AdminAccountsResp) String() string { return proto.CompactTextString(m) }
func (*AdminAccountsResp) ProtoMessage()    {}
func (*AdminAccountsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{20}
}
func (m *AdminAccountsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminAccountsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminAccountsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminAccountsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminAccountsResp.Merge(m, src)
}
func (m *AdminAccountsResp) XXX_Size() int {
	return m.Size()
}
func (m *AdminAccountsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminAccountsResp.DiscardUnknown(m)
}

var xxx_messageInfo_AdminAccountsResp proto.InternalMessageInfo

func (m *AdminAccountsResp) GetItems() []*AdminAccountItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type IDCertInfo struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	AuditConclusions     string   `protobuf:"bytes,4,opt,name=AuditConclusions,proto3" json:"AuditConclusions,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	IdentificationNumber string   `protobuf:"bytes,6,opt,name=IdentificationNumber,proto3" json:"IdentificationNumber,omitempty"`
	IDCardType           string   `protobuf:"bytes,7,opt,name=IDCardType,proto3" json:"IDCardType,omitempty"`
	IDCardStartDate      string   `protobuf:"bytes,8,opt,name=IDCardStartDate,proto3" json:"IDCardStartDate,omitempty"`
	IDCardExpiry         string   `protobuf:"bytes,9,opt,name=IDCardExpiry,proto3" json:"IDCardExpiry,omitempty"`
	Address              string   `protobuf:"bytes,10,opt,name=Address,proto3" json:"Address,omitempty"`
	Sex                  string   `protobuf:"bytes,11,opt,name=Sex,proto3" json:"Sex,omitempty"`
	IDCardFrontPic       string   `protobuf:"bytes,12,opt,name=IDCardFrontPic,proto3" json:"IDCardFrontPic,omitempty"`
	IDCardBackPic        string   `protobuf:"bytes,13,opt,name=IDCardBackPic,proto3" json:"IDCardBackPic,omitempty"`
	FacePic              string   `protobuf:"bytes,14,opt,name=FacePic,proto3" json:"FacePic,omitempty"`
	EthnicGroup          string   `protobuf:"bytes,15,opt,name=EthnicGroup,proto3" json:"EthnicGroup,omitempty"`
	CreatedAt            int64    `protobuf:"varint,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDCertInfo) Reset()         { *m = IDCertInfo{} }
func (m *IDCertInfo) String() string { return proto.CompactTextString(m) }
func (*IDCertInfo) ProtoMessage()    {}
func (*IDCertInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{21}
}
func (m *IDCertInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCertInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCertInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCertInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCertInfo.Merge(m, src)
}
func (m *IDCertInfo) XXX_Size() int {
	return m.Size()
}
func (m *IDCertInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCertInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IDCertInfo proto.InternalMessageInfo

func (m *IDCertInfo) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *IDCertInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *IDCertInfo) GetAuditConclusions() string {
	if m != nil {
		return m.AuditConclusions
	}
	return ""
}

func (m *IDCertInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IDCertInfo) GetIdentificationNumber() string {
	if m != nil {
		return m.IdentificationNumber
	}
	return ""
}

func (m *IDCertInfo) GetIDCardType() string {
	if m != nil {
		return m.IDCardType
	}
	return ""
}

func (m *IDCertInfo) GetIDCardStartDate() string {
	if m != nil {
		return m.IDCardStartDate
	}
	return ""
}

func (m *IDCertInfo) GetIDCardExpiry() string {
	if m != nil {
		return m.IDCardExpiry
	}
	return ""
}

func (m *IDCertInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IDCertInfo) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *IDCertInfo) GetIDCardFrontPic() string {
	if m != nil {
		return m.IDCardFrontPic
	}
	return ""
}

func (m *IDCertInfo) GetIDCardBackPic() string {
	if m != nil {
		return m.IDCardBackPic
	}
	return ""
}

func (m *IDCertInfo) GetFacePic() string {
	if m != nil {
		return m.FacePic
	}
	return ""
}

func (m *IDCertInfo) GetEthnicGroup() string {
	if m != nil {
		return m.EthnicGroup
	}
	return ""
}

func (m *IDCertInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *IDCertInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type WorkCertInfo struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	WorkPic              string   `protobuf:"bytes,4,opt,name=WorkPic,proto3" json:"WorkPic,omitempty"`
	OtherPic             string   `protobuf:"bytes,5,opt,name=OtherPic,proto3" json:"OtherPic,omitempty"`
	Company              string   `protobuf:"bytes,6,opt,name=Company,proto3" json:"Company,omitempty"`
	Department           string   `protobuf:"bytes,7,opt,name=Department,proto3" json:"Department,omitempty"`
	Position             string   `protobuf:"bytes,8,opt,name=Position,proto3" json:"Position,omitempty"`
	ExpiresAt            int64    `protobuf:"varint,9,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	AuditResult          string   `protobuf:"bytes,10,opt,name=AuditResult,proto3" json:"AuditResult,omitempty"`
	CreatedAt            int64    `protobuf:"varint,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertInfo) Reset()         { *m = WorkCertInfo{} }
func (m *WorkCertInfo) String() string { return proto.CompactTextString(m) }
func (*WorkCertInfo) ProtoMessage()    {}
func (*WorkCertInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{22}
}
func (m *WorkCertInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertInfo.Merge(m, src)
}
func (m *WorkCertInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertInfo proto.InternalMessageInfo

func (m *WorkCertInfo) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *WorkCertInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WorkCertInfo) GetWorkPic() string {
	if m != nil {
		return m.WorkPic
	}
	return ""
}

func (m *WorkCertInfo) GetOtherPic() string {
	if m != nil {
		return m.OtherPic
	}
	return ""
}

func (m *WorkCertInfo) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *WorkCertInfo) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *WorkCertInfo) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *WorkCertInfo) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *WorkCertInfo) GetAuditResult() string {
	if m != nil {
		return m.AuditResult
	}
	return ""
}

func (m *WorkCertInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *WorkCertInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type IDCertStatus struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDCertStatus) Reset()         { *m = IDCertStatus{} }
func (m *IDCertStatus) String() string { return proto.CompactTextString(m) }
func (*IDCertStatus) ProtoMessage()    {}
func (*IDCertStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{23}
}
func (m *IDCertStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCertStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCertStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCertStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCertStatus.Merge(m, src)
}
func (m *IDCertStatus) XXX_Size() int {
	return m.Size()
}
func (m *IDCertStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCertStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IDCertStatus proto.InternalMessageInfo

func (m *IDCertStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type WorkCertStatus struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertStatus) Reset()         { *m = WorkCertStatus{} }
func (m *WorkCertStatus) String() string { return proto.CompactTextString(m) }
func (*WorkCertStatus) ProtoMessage()    {}
func (*WorkCertStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{24}
}
func (m *WorkCertStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertStatus.Merge(m, src)
}
func (m *WorkCertStatus) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertStatus proto.InternalMessageInfo

func (m *WorkCertStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type WorkCertReq struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	WorkPic              string   `protobuf:"bytes,4,opt,name=WorkPic,proto3" json:"WorkPic,omitempty"`
	OtherPic             string   `protobuf:"bytes,5,opt,name=OtherPic,proto3" json:"OtherPic,omitempty"`
	Company              string   `protobuf:"bytes,6,opt,name=Company,proto3" json:"Company,omitempty"`
	Department           string   `protobuf:"bytes,7,opt,name=Department,proto3" json:"Department,omitempty"`
	Position             string   `protobuf:"bytes,8,opt,name=Position,proto3" json:"Position,omitempty"`
	ExpiresAt            int64    `protobuf:"varint,9,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertReq) Reset()         { *m = WorkCertReq{} }
func (m *WorkCertReq) String() string { return proto.CompactTextString(m) }
func (*WorkCertReq) ProtoMessage()    {}
func (*WorkCertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{25}
}
func (m *WorkCertReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertReq.Merge(m, src)
}
func (m *WorkCertReq) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertReq proto.InternalMessageInfo

func (m *WorkCertReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *WorkCertReq) GetWorkPic() string {
	if m != nil {
		return m.WorkPic
	}
	return ""
}

func (m *WorkCertReq) GetOtherPic() string {
	if m != nil {
		return m.OtherPic
	}
	return ""
}

func (m *WorkCertReq) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *WorkCertReq) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *WorkCertReq) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *WorkCertReq) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

type AuditWorkCertReq struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Aid                  int64    `protobuf:"varint,2,opt,name=Aid,proto3" json:"Aid,omitempty"`
	AuditResult          string   `protobuf:"bytes,3,opt,name=AuditResult,proto3" json:"AuditResult,omitempty"`
	Approve              bool     `protobuf:"varint,4,opt,name=Approve,proto3" json:"Approve,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuditWorkCertReq) Reset()         { *m = AuditWorkCertReq{} }
func (m *AuditWorkCertReq) String() string { return proto.CompactTextString(m) }
func (*AuditWorkCertReq) ProtoMessage()    {}
func (*AuditWorkCertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{26}
}
func (m *AuditWorkCertReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditWorkCertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditWorkCertReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditWorkCertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditWorkCertReq.Merge(m, src)
}
func (m *AuditWorkCertReq) XXX_Size() int {
	return m.Size()
}
func (m *AuditWorkCertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditWorkCertReq.DiscardUnknown(m)
}

var xxx_messageInfo_AuditWorkCertReq proto.InternalMessageInfo

func (m *AuditWorkCertReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *AuditWorkCertReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AuditWorkCertReq) GetAuditResult() string {
	if m != nil {
		return m.AuditResult
	}
	return ""
}

func (m *AuditWorkCertReq) GetApprove() bool {
	if m != nil {
		return m.Approve
	}
	return false
}

type RequestIDCertResp struct {
	CloudauthPageUrl     string       `protobuf:"bytes,1,opt,name=CloudauthPageUrl,proto3" json:"CloudauthPageUrl,omitempty"`
	STSToken             *STSToken    `protobuf:"bytes,2,opt,name=STSToken,proto3" json:"STSToken,omitempty"`
	VerifyToken          *VerifyToken `protobuf:"bytes,3,opt,name=VerifyToken,proto3" json:"VerifyToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RequestIDCertResp) Reset()         { *m = RequestIDCertResp{} }
func (m *RequestIDCertResp) String() string { return proto.CompactTextString(m) }
func (*RequestIDCertResp) ProtoMessage()    {}
func (*RequestIDCertResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{27}
}
func (m *RequestIDCertResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestIDCertResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestIDCertResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestIDCertResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestIDCertResp.Merge(m, src)
}
func (m *RequestIDCertResp) XXX_Size() int {
	return m.Size()
}
func (m *RequestIDCertResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestIDCertResp.DiscardUnknown(m)
}

var xxx_messageInfo_RequestIDCertResp proto.InternalMessageInfo

func (m *RequestIDCertResp) GetCloudauthPageUrl() string {
	if m != nil {
		return m.CloudauthPageUrl
	}
	return ""
}

func (m *RequestIDCertResp) GetSTSToken() *STSToken {
	if m != nil {
		return m.STSToken
	}
	return nil
}

func (m *RequestIDCertResp) GetVerifyToken() *VerifyToken {
	if m != nil {
		return m.VerifyToken
	}
	return nil
}

type VerifyToken struct {
	// 一次认证会话的标识。
	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	// 认证会话超时时间，单位为秒。一般为1,800s。
	DurationSeconds      int32    `protobuf:"varint,2,opt,name=DurationSeconds,proto3" json:"DurationSeconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyToken) Reset()         { *m = VerifyToken{} }
func (m *VerifyToken) String() string { return proto.CompactTextString(m) }
func (*VerifyToken) ProtoMessage()    {}
func (*VerifyToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{28}
}
func (m *VerifyToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyToken.Merge(m, src)
}
func (m *VerifyToken) XXX_Size() int {
	return m.Size()
}
func (m *VerifyToken) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyToken.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyToken proto.InternalMessageInfo

func (m *VerifyToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *VerifyToken) GetDurationSeconds() int32 {
	if m != nil {
		return m.DurationSeconds
	}
	return 0
}

type STSToken struct {
	// OSS AccessKey ID。
	// required: true
	AccessKeyId string `protobuf:"bytes,1,opt,name=AccessKeyId,proto3" json:"AccessKeyId,omitempty"`
	// OSS AccessKey密钥
	AccessKeySecret string `protobuf:"bytes,2,opt,name=AccessKeySecret,proto3" json:"AccessKeySecret,omitempty"`
	// STS token过期时间。
	Expiration string `protobuf:"bytes,3,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	// OSS endpoint
	EndPoint string `protobuf:"bytes,4,opt,name=EndPoint,proto3" json:"EndPoint,omitempty"`
	// OSS bucket，认证服务指定的文件上传 Bucket。
	BucketName string `protobuf:"bytes,5,opt,name=BucketName,proto3" json:"BucketName,omitempty"`
	//  一个认证请求生成的用来上传的目录，业务方需要将文件上传到这个目录。
	Path string `protobuf:"bytes,6,opt,name=Path,proto3" json:"Path,omitempty"`
	// STS 访问Token。
	Token                string   `protobuf:"bytes,7,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *STSToken) Reset()         { *m = STSToken{} }
func (m *STSToken) String() string { return proto.CompactTextString(m) }
func (*STSToken) ProtoMessage()    {}
func (*STSToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{29}
}
func (m *STSToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *STSToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_STSToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *STSToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STSToken.Merge(m, src)
}
func (m *STSToken) XXX_Size() int {
	return m.Size()
}
func (m *STSToken) XXX_DiscardUnknown() {
	xxx_messageInfo_STSToken.DiscardUnknown(m)
}

var xxx_messageInfo_STSToken proto.InternalMessageInfo

func (m *STSToken) GetAccessKeyId() string {
	if m != nil {
		return m.AccessKeyId
	}
	return ""
}

func (m *STSToken) GetAccessKeySecret() string {
	if m != nil {
		return m.AccessKeySecret
	}
	return ""
}

func (m *STSToken) GetExpiration() string {
	if m != nil {
		return m.Expiration
	}
	return ""
}

func (m *STSToken) GetEndPoint() string {
	if m != nil {
		return m.EndPoint
	}
	return ""
}

func (m *STSToken) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *STSToken) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *STSToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type WorkCertPagedReq struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset               int32    `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Aid                  int64    `protobuf:"varint,4,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertPagedReq) Reset()         { *m = WorkCertPagedReq{} }
func (m *WorkCertPagedReq) String() string { return proto.CompactTextString(m) }
func (*WorkCertPagedReq) ProtoMessage()    {}
func (*WorkCertPagedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{30}
}
func (m *WorkCertPagedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertPagedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertPagedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertPagedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertPagedReq.Merge(m, src)
}
func (m *WorkCertPagedReq) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertPagedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertPagedReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertPagedReq proto.InternalMessageInfo

func (m *WorkCertPagedReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WorkCertPagedReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WorkCertPagedReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *WorkCertPagedReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type WorkCertItem struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AccountID            int64    `protobuf:"varint,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	WorkPic              string   `protobuf:"bytes,5,opt,name=WorkPic,proto3" json:"WorkPic,omitempty"`
	OtherPic             string   `protobuf:"bytes,6,opt,name=OtherPic,proto3" json:"OtherPic,omitempty"`
	Company              string   `protobuf:"bytes,7,opt,name=Company,proto3" json:"Company,omitempty"`
	Department           string   `protobuf:"bytes,8,opt,name=Department,proto3" json:"Department,omitempty"`
	Position             string   `protobuf:"bytes,9,opt,name=Position,proto3" json:"Position,omitempty"`
	ExpiresAt            int64    `protobuf:"varint,10,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	AuditResult          string   `protobuf:"bytes,11,opt,name=AuditResult,proto3" json:"AuditResult,omitempty"`
	CreatedAt            int64    `protobuf:"varint,12,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,13,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertItem) Reset()         { *m = WorkCertItem{} }
func (m *WorkCertItem) String() string { return proto.CompactTextString(m) }
func (*WorkCertItem) ProtoMessage()    {}
func (*WorkCertItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{31}
}
func (m *WorkCertItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertItem.Merge(m, src)
}
func (m *WorkCertItem) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertItem) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertItem.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertItem proto.InternalMessageInfo

func (m *WorkCertItem) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WorkCertItem) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *WorkCertItem) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WorkCertItem) GetWorkPic() string {
	if m != nil {
		return m.WorkPic
	}
	return ""
}

func (m *WorkCertItem) GetOtherPic() string {
	if m != nil {
		return m.OtherPic
	}
	return ""
}

func (m *WorkCertItem) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *WorkCertItem) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *WorkCertItem) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *WorkCertItem) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *WorkCertItem) GetAuditResult() string {
	if m != nil {
		return m.AuditResult
	}
	return ""
}

func (m *WorkCertItem) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *WorkCertItem) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type WorkCertHistoryItem struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AccountID            int64    `protobuf:"varint,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	WorkPic              string   `protobuf:"bytes,5,opt,name=WorkPic,proto3" json:"WorkPic,omitempty"`
	OtherPic             string   `protobuf:"bytes,6,opt,name=OtherPic,proto3" json:"OtherPic,omitempty"`
	Company              string   `protobuf:"bytes,7,opt,name=Company,proto3" json:"Company,omitempty"`
	Department           string   `protobuf:"bytes,8,opt,name=Department,proto3" json:"Department,omitempty"`
	Position             string   `protobuf:"bytes,9,opt,name=Position,proto3" json:"Position,omitempty"`
	ExpiresAt            int64    `protobuf:"varint,10,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	AuditResult          string   `protobuf:"bytes,11,opt,name=AuditResult,proto3" json:"AuditResult,omitempty"`
	ManagerID            int64    `protobuf:"varint,13,opt,name=ManagerID,proto3" json:"ManagerID,omitempty"`
	CreatedAt            int64    `protobuf:"varint,14,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,15,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertHistoryItem) Reset()         { *m = WorkCertHistoryItem{} }
func (m *WorkCertHistoryItem) String() string { return proto.CompactTextString(m) }
func (*WorkCertHistoryItem) ProtoMessage()    {}
func (*WorkCertHistoryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{32}
}
func (m *WorkCertHistoryItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertHistoryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertHistoryItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertHistoryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertHistoryItem.Merge(m, src)
}
func (m *WorkCertHistoryItem) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertHistoryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertHistoryItem.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertHistoryItem proto.InternalMessageInfo

func (m *WorkCertHistoryItem) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WorkCertHistoryItem) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *WorkCertHistoryItem) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WorkCertHistoryItem) GetWorkPic() string {
	if m != nil {
		return m.WorkPic
	}
	return ""
}

func (m *WorkCertHistoryItem) GetOtherPic() string {
	if m != nil {
		return m.OtherPic
	}
	return ""
}

func (m *WorkCertHistoryItem) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *WorkCertHistoryItem) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *WorkCertHistoryItem) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *WorkCertHistoryItem) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *WorkCertHistoryItem) GetAuditResult() string {
	if m != nil {
		return m.AuditResult
	}
	return ""
}

func (m *WorkCertHistoryItem) GetManagerID() int64 {
	if m != nil {
		return m.ManagerID
	}
	return 0
}

func (m *WorkCertHistoryItem) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *WorkCertHistoryItem) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type WorkCertPagedResp struct {
	Items                []*WorkCertItem `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WorkCertPagedResp) Reset()         { *m = WorkCertPagedResp{} }
func (m *WorkCertPagedResp) String() string { return proto.CompactTextString(m) }
func (*WorkCertPagedResp) ProtoMessage()    {}
func (*WorkCertPagedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{33}
}
func (m *WorkCertPagedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertPagedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertPagedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertPagedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertPagedResp.Merge(m, src)
}
func (m *WorkCertPagedResp) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertPagedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertPagedResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertPagedResp proto.InternalMessageInfo

func (m *WorkCertPagedResp) GetItems() []*WorkCertItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type WorkCertHistoriesPagedReq struct {
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset               int32    `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	AccountID            int64    `protobuf:"varint,4,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Aid                  int64    `protobuf:"varint,5,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertHistoriesPagedReq) Reset()         { *m = WorkCertHistoriesPagedReq{} }
func (m *WorkCertHistoriesPagedReq) String() string { return proto.CompactTextString(m) }
func (*WorkCertHistoriesPagedReq) ProtoMessage()    {}
func (*WorkCertHistoriesPagedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{34}
}
func (m *WorkCertHistoriesPagedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertHistoriesPagedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertHistoriesPagedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertHistoriesPagedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertHistoriesPagedReq.Merge(m, src)
}
func (m *WorkCertHistoriesPagedReq) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertHistoriesPagedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertHistoriesPagedReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertHistoriesPagedReq proto.InternalMessageInfo

func (m *WorkCertHistoriesPagedReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WorkCertHistoriesPagedReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *WorkCertHistoriesPagedReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *WorkCertHistoriesPagedReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type WorkCertHistoriesPagedResp struct {
	Items                []*WorkCertHistoryItem `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *WorkCertHistoriesPagedResp) Reset()         { *m = WorkCertHistoriesPagedResp{} }
func (m *WorkCertHistoriesPagedResp) String() string { return proto.CompactTextString(m) }
func (*WorkCertHistoriesPagedResp) ProtoMessage()    {}
func (*WorkCertHistoriesPagedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{35}
}
func (m *WorkCertHistoriesPagedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertHistoriesPagedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertHistoriesPagedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertHistoriesPagedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertHistoriesPagedResp.Merge(m, src)
}
func (m *WorkCertHistoriesPagedResp) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertHistoriesPagedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertHistoriesPagedResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertHistoriesPagedResp proto.InternalMessageInfo

func (m *WorkCertHistoriesPagedResp) GetItems() []*WorkCertHistoryItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyStruct)(nil), "service.account.EmptyStruct")
	proto.RegisterType((*BaseInfoReply)(nil), "service.account.BaseInfoReply")
	proto.RegisterType((*BaseInfosReply)(nil), "service.account.BaseInfosReply")
	proto.RegisterMapType((map[int64]*BaseInfoReply)(nil), "service.account.BaseInfosReply.BaseInfosEntry")
	proto.RegisterType((*SettingReq)(nil), "service.account.SettingReq")
	proto.RegisterMapType((map[string]bool)(nil), "service.account.SettingReq.SettingsEntry")
	proto.RegisterType((*SelfProfile)(nil), "service.account.SelfProfile")
	proto.RegisterType((*Setting)(nil), "service.account.Setting")
	proto.RegisterType((*AccountStatInfo)(nil), "service.account.AccountStatInfo")
	proto.RegisterType((*MemberInfoReply)(nil), "service.account.MemberInfoReply")
	proto.RegisterType((*AdminAccountItem)(nil), "service.account.AdminAccountItem")
	proto.RegisterType((*AidReq)(nil), "service.account.AidReq")
	proto.RegisterType((*AidResp)(nil), "service.account.AidResp")
	proto.RegisterType((*AnnulReq)(nil), "service.account.AnnulReq")
	proto.RegisterType((*EmailReq)(nil), "service.account.EmailReq")
	proto.RegisterType((*MobileReq)(nil), "service.account.MobileReq")
	proto.RegisterType((*ExistResp)(nil), "service.account.ExistResp")
	proto.RegisterType((*AidsReq)(nil), "service.account.AidsReq")
	proto.RegisterType((*DBAccount)(nil), "service.account.DBAccount")
	proto.RegisterType((*UpdateProfileReq)(nil), "service.account.UpdateProfileReq")
	proto.RegisterType((*AccountsPagedReq)(nil), "service.account.AccountsPagedReq")
	proto.RegisterType((*IDsResp)(nil), "service.account.IDsResp")
	proto.RegisterType((*AdminAccountsResp)(nil), "service.account.AdminAccountsResp")
	proto.RegisterType((*IDCertInfo)(nil), "service.account.IDCertInfo")
	proto.RegisterType((*WorkCertInfo)(nil), "service.account.WorkCertInfo")
	proto.RegisterType((*IDCertStatus)(nil), "service.account.IDCertStatus")
	proto.RegisterType((*WorkCertStatus)(nil), "service.account.WorkCertStatus")
	proto.RegisterType((*WorkCertReq)(nil), "service.account.WorkCertReq")
	proto.RegisterType((*AuditWorkCertReq)(nil), "service.account.AuditWorkCertReq")
	proto.RegisterType((*RequestIDCertResp)(nil), "service.account.RequestIDCertResp")
	proto.RegisterType((*VerifyToken)(nil), "service.account.VerifyToken")
	proto.RegisterType((*STSToken)(nil), "service.account.STSToken")
	proto.RegisterType((*WorkCertPagedReq)(nil), "service.account.WorkCertPagedReq")
	proto.RegisterType((*WorkCertItem)(nil), "service.account.WorkCertItem")
	proto.RegisterType((*WorkCertHistoryItem)(nil), "service.account.WorkCertHistoryItem")
	proto.RegisterType((*WorkCertPagedResp)(nil), "service.account.WorkCertPagedResp")
	proto.RegisterType((*WorkCertHistoriesPagedReq)(nil), "service.account.WorkCertHistoriesPagedReq")
	proto.RegisterType((*WorkCertHistoriesPagedResp)(nil), "service.account.WorkCertHistoriesPagedResp")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 2736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4f, 0x6f, 0xe3, 0xc6,
	0x15, 0xaf, 0xfe, 0x4b, 0x4f, 0x96, 0x25, 0xd3, 0x9b, 0x0d, 0xd7, 0xeb, 0xac, 0x1d, 0x22, 0x58,
	0xb8, 0x5b, 0xd4, 0x29, 0x9c, 0x14, 0x2d, 0x52, 0x20, 0xa8, 0x64, 0x79, 0x2d, 0xa5, 0xf6, 0x46,
	0xa0, 0x36, 0x9b, 0x26, 0x28, 0x50, 0xd0, 0xd4, 0xd8, 0x66, 0x2d, 0x91, 0x0a, 0x39, 0xda, 0xac,
	0x2e, 0x05, 0x8a, 0x7e, 0x87, 0x1e, 0xdb, 0x4f, 0xd1, 0xde, 0x7a, 0xef, 0xa1, 0x87, 0xf6, 0x50,
	0xf4, 0x12, 0x04, 0x45, 0x80, 0xf6, 0x90, 0x4b, 0xbf, 0x42, 0x31, 0x6f, 0x66, 0xc8, 0x19, 0x4a,
	0x94, 0xd6, 0x58, 0xa0, 0x40, 0x8b, 0x9c, 0xcc, 0xf7, 0x66, 0xf8, 0x38, 0xf3, 0xfe, 0xfc, 0xe6,
	0x37, 0x4f, 0x86, 0xea, 0xf4, 0xe2, 0x70, 0x1a, 0x06, 0x34, 0x30, 0x9a, 0x11, 0x09, 0x9f, 0x7b,
	0x2e, 0x39, 0x74, 0x5c, 0x37, 0x98, 0xf9, 0x74, 0xe7, 0xbb, 0x57, 0x1e, 0xbd, 0x9e, 0x5d, 0x1c,
	0xba, 0xc1, 0xe4, 0xed, 0xab, 0xe0, 0x2a, 0x78, 0x1b, 0xe7, 0x5d, 0xcc, 0x2e, 0x51, 0x42, 0x01,
	0x9f, 0xf8, 0xfb, 0x56, 0x03, 0xea, 0x27, 0x93, 0x29, 0x9d, 0x0f, 0x69, 0x38, 0x73, 0xa9, 0xf5,
	0xd7, 0x3c, 0x34, 0x3a, 0x4e, 0x44, 0xfa, 0xfe, 0x65, 0x60, 0x93, 0xe9, 0x78, 0x6e, 0x6c, 0x42,
	0xbe, 0xdf, 0x35, 0x73, 0xfb, 0xb9, 0x83, 0x82, 0x9d, 0xef, 0x77, 0x8d, 0x1d, 0xa8, 0x7e, 0x14,
	0x91, 0xf0, 0x89, 0x33, 0x21, 0x66, 0x7e, 0x3f, 0x77, 0x50, 0xb3, 0x63, 0xd9, 0xb8, 0x0b, 0xe5,
	0x53, 0xe2, 0x8f, 0x48, 0x68, 0x16, 0xf6, 0x73, 0x07, 0x25, 0x5b, 0x48, 0x86, 0x05, 0x1b, 0x7d,
	0x9f, 0x86, 0xc1, 0x68, 0xe6, 0x52, 0x2f, 0xf0, 0xcd, 0x22, 0xbe, 0xa7, 0xe9, 0xd8, 0xbb, 0xed,
	0xe7, 0x0e, 0x75, 0x42, 0xb3, 0x84, 0xa3, 0x42, 0x62, 0xfa, 0x7e, 0xf7, 0x98, 0x84, 0xd4, 0x2c,
	0xef, 0xe7, 0x0e, 0xaa, 0xb6, 0x90, 0xd8, 0x3a, 0x3e, 0x0e, 0xc2, 0x1b, 0x1c, 0xa9, 0xe0, 0x48,
	0x2c, 0x1b, 0x77, 0xa0, 0xd4, 0x8f, 0x3e, 0x0c, 0xaf, 0xcc, 0x2a, 0x0e, 0x70, 0x81, 0x6b, 0x9f,
	0xf5, 0x07, 0x66, 0x4d, 0x6a, 0x9f, 0xf5, 0x07, 0x86, 0x01, 0x45, 0x3b, 0x18, 0x13, 0x13, 0xf0,
	0xab, 0xf8, 0x6c, 0xbc, 0x0b, 0xc5, 0x21, 0x75, 0xa8, 0x59, 0xdf, 0xcf, 0x1d, 0xd4, 0x8f, 0xf6,
	0x0f, 0x53, 0x3e, 0x3e, 0x6c, 0xf3, 0xbf, 0x6c, 0x0e, 0x3a, 0x0a, 0x67, 0xe3, 0x4a, 0xa3, 0xb3,
	0xc0, 0xbd, 0x31, 0x37, 0xc4, 0x4a, 0x51, 0xb2, 0xfe, 0x98, 0x83, 0x4d, 0xe9, 0xd3, 0x88, 0x3b,
	0xf5, 0x1c, 0xe0, 0xc2, 0x89, 0xc8, 0xcf, 0x3d, 0xa6, 0x32, 0x73, 0xfb, 0x85, 0x83, 0xfa, 0xd1,
	0xe1, 0xc2, 0x67, 0xf4, 0x97, 0x12, 0xf1, 0xc4, 0xa7, 0xe1, 0xdc, 0xae, 0x5d, 0x48, 0x79, 0xe7,
	0x67, 0xca, 0x07, 0x70, 0xd0, 0x68, 0x41, 0xe1, 0x86, 0xcc, 0x45, 0xd8, 0xd8, 0xa3, 0xf1, 0x2e,
	0x94, 0x9e, 0x3b, 0xe3, 0x19, 0x0f, 0x5a, 0xfd, 0xe8, 0x41, 0xe6, 0xd7, 0xf0, 0x63, 0x36, 0x9f,
	0xfc, 0x5e, 0xfe, 0x87, 0x39, 0xeb, 0x8b, 0x1c, 0xc0, 0x90, 0x50, 0xea, 0xf9, 0x57, 0x36, 0xf9,
	0x8c, 0x99, 0x6e, 0x7b, 0x23, 0x69, 0xba, 0xed, 0x8d, 0x8c, 0x13, 0xa8, 0x8a, 0xf1, 0xc8, 0xcc,
	0xe3, 0x5e, 0xbe, 0xbd, 0x60, 0x3d, 0x31, 0x20, 0x1f, 0xc5, 0x36, 0xe2, 0x57, 0x59, 0x44, 0xcf,
	0x1c, 0xff, 0x6a, 0xe6, 0x5c, 0x11, 0xcc, 0x9f, 0x9a, 0x1d, 0xcb, 0xc6, 0x2e, 0xd4, 0x3e, 0x8a,
	0xc8, 0xb9, 0x13, 0x51, 0x12, 0x62, 0xfa, 0x54, 0xed, 0x44, 0xb1, 0xf3, 0x23, 0x68, 0x68, 0x46,
	0xd5, 0xed, 0xd7, 0xf8, 0xf6, 0xef, 0xa8, 0xdb, 0xaf, 0xaa, 0xdb, 0xfb, 0x7d, 0x19, 0xea, 0x43,
	0x32, 0xbe, 0x1c, 0x84, 0xc1, 0xa5, 0x37, 0x26, 0x0b, 0x09, 0x7f, 0x17, 0xca, 0xe7, 0xc1, 0x85,
	0x37, 0x96, 0xe9, 0x2e, 0x24, 0x66, 0xf1, 0x64, 0xe2, 0x78, 0x63, 0xb1, 0x56, 0x2e, 0xb0, 0xd9,
	0x83, 0x90, 0x5c, 0x7a, 0x2f, 0x44, 0x92, 0x0b, 0x49, 0x2b, 0x9b, 0x52, 0x66, 0xd9, 0x94, 0xb5,
	0xb2, 0xd9, 0x85, 0x5a, 0xc7, 0x0b, 0xe9, 0xf5, 0x27, 0xc4, 0x09, 0x31, 0xc7, 0x4b, 0x76, 0xa2,
	0x30, 0x1e, 0x00, 0xa0, 0x70, 0x1e, 0xf8, 0xf4, 0x1a, 0x33, 0xbd, 0x64, 0x2b, 0x1a, 0xf6, 0x45,
	0x94, 0xba, 0xce, 0x1c, 0x33, 0xbe, 0x64, 0xc7, 0xf2, 0x42, 0x41, 0xc2, 0xca, 0x82, 0xac, 0xa7,
	0x0b, 0x72, 0x18, 0xcc, 0x42, 0x97, 0x60, 0x9a, 0x97, 0x6c, 0x21, 0x61, 0xf8, 0x02, 0xd7, 0x41,
	0x7b, 0x0d, 0xf4, 0x5e, 0x2c, 0x1b, 0x0f, 0x61, 0x53, 0x3e, 0x0f, 0x69, 0xe8, 0xf9, 0x57, 0xe6,
	0x26, 0xda, 0x4c, 0x69, 0x95, 0x62, 0x6f, 0x6a, 0xc5, 0xce, 0xd6, 0x8b, 0x4f, 0xac, 0xd0, 0x66,
	0x91, 0xd9, 0xc2, 0x2f, 0x6b, 0x3a, 0x0d, 0x10, 0xb6, 0x52, 0x80, 0xf0, 0x10, 0x36, 0xe5, 0xb3,
	0xb0, 0x60, 0xa0, 0x85, 0x94, 0x16, 0x63, 0x3f, 0x30, 0xb7, 0x71, 0x6d, 0xf9, 0xfe, 0x20, 0x01,
	0x92, 0x3b, 0x4b, 0x81, 0xe4, 0xb5, 0x65, 0x40, 0x72, 0x57, 0x01, 0x92, 0x5d, 0xa8, 0x1d, 0x87,
	0xc4, 0xa1, 0x64, 0xd4, 0xa6, 0xe6, 0xeb, 0xe8, 0x94, 0x44, 0x81, 0x49, 0x3d, 0x1d, 0x89, 0x51,
	0x93, 0x8f, 0xc6, 0x8a, 0x18, 0x84, 0xee, 0xdd, 0x0a, 0x84, 0x8e, 0xa0, 0x22, 0x4a, 0xc1, 0xdc,
	0xc1, 0x17, 0xcd, 0xcc, 0x52, 0x94, 0x13, 0x0d, 0x13, 0x2a, 0xc7, 0xc1, 0x64, 0xea, 0xf8, 0x73,
	0xf3, 0x3e, 0x2e, 0x5e, 0x8a, 0xcc, 0xa7, 0x83, 0x20, 0xf2, 0x30, 0xa6, 0xbb, 0x3c, 0x6b, 0xa5,
	0x6c, 0xfd, 0x3b, 0x1f, 0x7f, 0x8a, 0xc5, 0xa7, 0xed, 0x52, 0xef, 0xb9, 0x47, 0xe7, 0x67, 0xde,
	0x0d, 0xc1, 0xea, 0xa9, 0xda, 0x9a, 0xce, 0x38, 0x80, 0xa6, 0x94, 0x8f, 0x83, 0xc9, 0x84, 0xf8,
	0x54, 0xd4, 0x62, 0x5a, 0x6d, 0x7c, 0x0f, 0xb6, 0xa5, 0xea, 0x71, 0x30, 0x1e, 0x07, 0x9f, 0x3f,
	0x0d, 0xa6, 0x9e, 0x8b, 0x75, 0x56, 0xb5, 0x97, 0x0d, 0x19, 0x47, 0x70, 0x47, 0x57, 0x9f, 0x93,
	0xc9, 0x45, 0x8c, 0x14, 0x4b, 0xc7, 0x58, 0xfd, 0x3c, 0x09, 0xa8, 0x77, 0xc9, 0x57, 0x5c, 0xc2,
	0x99, 0x8a, 0xc6, 0x78, 0x0b, 0x1a, 0x5c, 0x92, 0xab, 0xe5, 0xe7, 0x8f, 0xae, 0x4c, 0x66, 0x3d,
	0x21, 0x9f, 0x3f, 0x76, 0xfc, 0x48, 0x9c, 0x45, 0xba, 0x92, 0xed, 0x3d, 0x56, 0x88, 0xa5, 0xf1,
	0xa3, 0x29, 0xad, 0xd6, 0x40, 0xb0, 0xa6, 0x83, 0xa0, 0xf5, 0xcf, 0x1c, 0x73, 0xa1, 0x16, 0x75,
	0x96, 0xd9, 0x7c, 0x57, 0x9e, 0x7f, 0x75, 0xcc, 0x46, 0xd0, 0xf7, 0x25, 0x3b, 0xa5, 0x65, 0xb9,
	0xc6, 0x56, 0xc2, 0xa7, 0xe4, 0x39, 0x96, 0xc4, 0x0a, 0xc4, 0x92, 0xb1, 0xe3, 0xde, 0xf0, 0xe1,
	0x82, 0xc0, 0x92, 0x58, 0xc3, 0xc6, 0xd1, 0xd1, 0x7c, 0xbc, 0xc8, 0xc7, 0x13, 0x0d, 0xc6, 0x3f,
	0xa4, 0x9e, 0x3b, 0x26, 0x7c, 0x46, 0x89, 0xd7, 0xa7, 0xaa, 0x63, 0x3e, 0xe8, 0x7a, 0x91, 0x3b,
	0x8b, 0x22, 0x2f, 0xf0, 0xf9, 0x34, 0x0e, 0x77, 0x69, 0xb5, 0xf5, 0xf7, 0x02, 0x34, 0xb9, 0x3b,
	0xfe, 0xfb, 0x34, 0x44, 0x45, 0xb1, 0xd2, 0x5a, 0x14, 0x2b, 0x67, 0xa1, 0x98, 0x40, 0xce, 0x4a,
	0x06, 0x95, 0xa9, 0x66, 0x52, 0x99, 0x5a, 0x16, 0x95, 0x81, 0xa5, 0x08, 0x54, 0x57, 0x11, 0x48,
	0x43, 0x9b, 0x8d, 0x34, 0xda, 0x48, 0x3c, 0x69, 0xdc, 0x0a, 0x4f, 0x14, 0x6c, 0xd8, 0xcc, 0xc6,
	0x86, 0xa6, 0x8e, 0x0d, 0x0a, 0x15, 0x6a, 0x69, 0x54, 0xe8, 0xb7, 0x45, 0x68, 0xb5, 0x47, 0x13,
	0xcf, 0x17, 0x1f, 0xeb, 0x53, 0x32, 0xf9, 0x26, 0xb4, 0xff, 0x0f, 0xa1, 0x4d, 0xe8, 0xd0, 0xd6,
	0x72, 0x3a, 0x64, 0x68, 0x74, 0x28, 0x21, 0x55, 0xdb, 0x2a, 0xa9, 0xb2, 0x9e, 0x42, 0xb9, 0xed,
	0x8d, 0x04, 0xcd, 0x74, 0x12, 0x9a, 0xe9, 0x78, 0x23, 0xb6, 0xaa, 0x90, 0x4c, 0x02, 0x4a, 0xfa,
	0x03, 0x99, 0x17, 0x52, 0xd6, 0xf9, 0x61, 0x21, 0xc5, 0x0f, 0xad, 0xfb, 0x50, 0x41, 0xab, 0xd1,
	0x74, 0xd1, 0xac, 0xf5, 0x1e, 0x54, 0xdb, 0xbe, 0x3f, 0x1b, 0x2f, 0xff, 0xe8, 0x6a, 0xc3, 0xef,
	0x43, 0x15, 0xf7, 0xc9, 0xde, 0xbd, 0x03, 0x25, 0x82, 0x0e, 0xe0, 0xac, 0x93, 0x0b, 0xfa, 0xfb,
	0xf9, 0xf4, 0xfb, 0x9f, 0x40, 0x8d, 0x6f, 0x9c, 0x19, 0xb8, 0x0b, 0xe5, 0x09, 0xf7, 0x09, 0xb7,
	0x20, 0x24, 0xa6, 0x9f, 0x72, 0x1f, 0x0a, 0x02, 0xca, 0xa5, 0x35, 0x4b, 0x7b, 0x13, 0x6a, 0x27,
	0x2f, 0xbc, 0x88, 0xe2, 0xae, 0x59, 0x70, 0x98, 0x20, 0x0e, 0x66, 0x2e, 0x58, 0x1f, 0xa3, 0x5b,
	0x22, 0xf6, 0x6d, 0x03, 0x8a, 0x8e, 0x37, 0xe2, 0x57, 0x91, 0x82, 0x8d, 0xcf, 0xaf, 0xe0, 0xef,
	0x5f, 0x97, 0xa0, 0xd6, 0xed, 0x88, 0xac, 0x7b, 0x45, 0x42, 0xad, 0xa2, 0x41, 0x31, 0x85, 0x06,
	0x92, 0x72, 0x95, 0x15, 0xca, 0x95, 0x20, 0x44, 0x35, 0x9b, 0x4c, 0xd7, 0x56, 0x93, 0x69, 0x58,
	0x49, 0xa6, 0xeb, 0x29, 0x32, 0xad, 0xe2, 0xca, 0x46, 0x0a, 0x57, 0xd2, 0xb8, 0xd4, 0x58, 0x49,
	0xb4, 0x37, 0x33, 0x88, 0x76, 0x53, 0x23, 0xda, 0x9c, 0xa4, 0xb6, 0x84, 0x3f, 0x07, 0x0a, 0xf6,
	0x6c, 0x65, 0x62, 0x8f, 0x91, 0x85, 0x3d, 0xdb, 0x4b, 0xb1, 0xe7, 0x4e, 0x26, 0xf6, 0xbc, 0xb6,
	0x92, 0xc4, 0xde, 0x4d, 0x93, 0xd8, 0x04, 0x2d, 0x5e, 0xd7, 0xd0, 0x22, 0xc1, 0x05, 0x33, 0x7d,
	0x4d, 0xea, 0x12, 0x87, 0xd1, 0x35, 0x82, 0xc4, 0xb7, 0x6a, 0xc7, 0x32, 0xa2, 0x92, 0x13, 0x45,
	0x9f, 0x07, 0xe1, 0x08, 0xb9, 0x2d, 0x43, 0x25, 0x21, 0xb3, 0x4c, 0x18, 0x3a, 0x63, 0x2a, 0xf8,
	0x2b, 0x3e, 0x5b, 0xbf, 0x2b, 0x42, 0x8b, 0xaf, 0x44, 0x5c, 0xed, 0x58, 0xa2, 0x5b, 0x50, 0xe7,
	0xee, 0x7d, 0x86, 0xb7, 0x41, 0xac, 0xb4, 0xde, 0xb7, 0x6c, 0x55, 0x69, 0x3c, 0x84, 0x86, 0x4c,
	0xb1, 0x67, 0xf1, 0x9d, 0xb1, 0xd6, 0xcb, 0xd9, 0xba, 0x9a, 0xd9, 0xe2, 0xc9, 0xc5, 0x67, 0xe1,
	0x89, 0xd4, 0xcb, 0xdb, 0xaa, 0x92, 0xd9, 0x92, 0xc9, 0xc0, 0x67, 0xb1, 0x1c, 0x2e, 0xf4, 0x0a,
	0xb6, 0xae, 0x36, 0x0e, 0x60, 0x33, 0xce, 0x46, 0x3e, 0x11, 0x39, 0x54, 0xaf, 0x68, 0xa7, 0xf4,
	0xc6, 0x23, 0x68, 0x26, 0x89, 0xc9, 0xa7, 0x22, 0x8f, 0xea, 0x95, 0xec, 0xf4, 0x00, 0xfb, 0xba,
	0x4c, 0x53, 0x3e, 0x13, 0x6f, 0x91, 0xbd, 0xb2, 0xad, 0xab, 0x8d, 0x43, 0xd8, 0x52, 0x53, 0x92,
	0xcf, 0xad, 0xe2, 0xae, 0x2b, 0xf6, 0xe2, 0x10, 0xb3, 0x2b, 0x5d, 0xcf, 0xe7, 0x22, 0x55, 0xed,
	0x55, 0x6d, 0x5d, 0xcd, 0x92, 0x43, 0x9e, 0xf4, 0x5d, 0xac, 0xaa, 0x82, 0x9d, 0x28, 0x64, 0x27,
	0xa1, 0x1e, 0x77, 0x12, 0x3a, 0x55, 0x59, 0x0a, 0x1d, 0x48, 0xca, 0x9e, 0x69, 0xb9, 0x4b, 0x99,
	0x56, 0xba, 0xad, 0x53, 0x57, 0x0a, 0xba, 0xb3, 0xa1, 0xd6, 0x2f, 0x9b, 0x26, 0xf7, 0xd7, 0xd9,
	0xd4, 0x2b, 0x90, 0x8d, 0xc9, 0x35, 0x5a, 0x21, 0xb4, 0xc4, 0x6a, 0xa2, 0x81, 0x73, 0x45, 0xf0,
	0xdc, 0xb9, 0xa7, 0xb4, 0x37, 0x3a, 0x95, 0xaf, 0xbf, 0xdc, 0x63, 0xc7, 0x00, 0xef, 0x73, 0xec,
	0x41, 0xe9, 0xcc, 0x9b, 0x78, 0x82, 0x3f, 0x77, 0x6a, 0x5f, 0x7f, 0xb9, 0x57, 0x1a, 0x33, 0x85,
	0xcd, 0xf5, 0x86, 0x05, 0xe5, 0x0f, 0x2f, 0x2f, 0x23, 0x22, 0x28, 0x74, 0x07, 0xbe, 0xfe, 0x72,
	0xaf, 0x1c, 0xa0, 0xc6, 0x16, 0x23, 0xd6, 0x5b, 0x50, 0xe9, 0x77, 0x23, 0x44, 0xe5, 0x7b, 0x50,
	0xe8, 0x77, 0x05, 0xe6, 0xf2, 0x4f, 0x31, 0x34, 0x66, 0x3a, 0xeb, 0x0c, 0xb6, 0x54, 0x9e, 0xc4,
	0xe7, 0xff, 0x00, 0x4a, 0x8c, 0x30, 0xc9, 0x86, 0xd1, 0x9b, 0x8b, 0xe7, 0x7c, 0x8a, 0x5a, 0xd9,
	0x7c, 0xbe, 0xf5, 0x9b, 0x22, 0x00, 0x07, 0x05, 0xbc, 0x33, 0x68, 0x51, 0xc9, 0xa5, 0xa3, 0xc2,
	0x60, 0x87, 0xdf, 0x91, 0xf3, 0x02, 0x76, 0xf8, 0xdd, 0xf8, 0x11, 0xb4, 0xda, 0xb3, 0x91, 0x47,
	0x8f, 0x03, 0xdf, 0x1d, 0xcf, 0x18, 0x5b, 0x8f, 0x04, 0x20, 0x2f, 0xe8, 0x59, 0x39, 0x2a, 0x9d,
	0x0e, 0x7c, 0x66, 0x77, 0xb4, 0xfe, 0x88, 0xf8, 0xd4, 0xbb, 0xf4, 0x78, 0x04, 0x9f, 0xcc, 0xf0,
	0x22, 0xc4, 0xc1, 0x7b, 0xe9, 0x18, 0x83, 0xe5, 0x7e, 0xf7, 0xd8, 0x09, 0x47, 0x4f, 0xe7, 0x53,
	0x22, 0x28, 0x97, 0xa2, 0x61, 0x77, 0x0a, 0x2e, 0x0d, 0xa9, 0x13, 0xd2, 0xae, 0x43, 0x45, 0xd6,
	0xda, 0x69, 0xb5, 0xe8, 0x20, 0x38, 0xe1, 0xe8, 0xe4, 0xc5, 0xd4, 0x0b, 0xe7, 0xe2, 0x6e, 0xa5,
	0xe9, 0x18, 0x21, 0x6a, 0x8f, 0x46, 0x21, 0x89, 0x22, 0xd1, 0x10, 0x91, 0x22, 0xcb, 0xd4, 0x21,
	0x79, 0x21, 0x1a, 0x21, 0xec, 0x91, 0x11, 0x46, 0xfe, 0xee, 0xe3, 0x30, 0xf0, 0xe9, 0xc0, 0x73,
	0x11, 0xfa, 0x6b, 0x76, 0x4a, 0xcb, 0xee, 0x87, 0x5c, 0xd3, 0x71, 0xdc, 0x1b, 0x36, 0x8d, 0x9f,
	0x00, 0xba, 0x92, 0x7d, 0xf9, 0xb1, 0xe3, 0x12, 0x36, 0x2e, 0xa8, 0x98, 0x10, 0x8d, 0x7d, 0xa8,
	0x9f, 0xd0, 0x6b, 0xdf, 0x73, 0x4f, 0xc3, 0x60, 0x36, 0x15, 0x6c, 0x4c, 0x55, 0xe9, 0xf0, 0xdc,
	0x5a, 0x09, 0xcf, 0x5b, 0x29, 0x78, 0xb6, 0xfe, 0x9c, 0x87, 0x0d, 0x79, 0x26, 0xbc, 0x42, 0x6a,
	0x98, 0x50, 0x61, 0x56, 0xd8, 0xf2, 0x79, 0x46, 0x48, 0x91, 0x61, 0xf6, 0x87, 0xf4, 0x9a, 0x84,
	0x6c, 0x48, 0xb4, 0xbd, 0xa4, 0xac, 0xf2, 0xcf, 0xb2, 0xce, 0x3f, 0x1f, 0x00, 0x74, 0xc9, 0xd4,
	0x09, 0x29, 0xde, 0xbb, 0x45, 0xd8, 0x13, 0x8d, 0xc6, 0x4f, 0xab, 0x29, 0x7e, 0xba, 0xcb, 0x78,
	0xcf, 0xd4, 0x0b, 0x49, 0xd4, 0xe6, 0x94, 0xbb, 0x60, 0x27, 0x0a, 0xe6, 0x4e, 0x4c, 0x56, 0x9b,
	0x44, 0xb3, 0x31, 0x15, 0x61, 0x56, 0x55, 0xaf, 0xe4, 0xce, 0x87, 0x7a, 0x9b, 0x4a, 0xf1, 0x57,
	0x4e, 0xf5, 0x97, 0x75, 0x90, 0x6e, 0x47, 0x65, 0xce, 0xfc, 0x5b, 0x0e, 0xea, 0x72, 0x2a, 0x43,
	0xa7, 0xd5, 0xf1, 0xf9, 0x9f, 0x89, 0x83, 0xf5, 0x4b, 0x01, 0x26, 0x2f, 0xbf, 0x37, 0x71, 0x58,
	0xe4, 0x93, 0xb6, 0x73, 0x2a, 0x96, 0x85, 0xc5, 0x58, 0xb2, 0x82, 0x9e, 0x4e, 0xc3, 0xe0, 0x39,
	0x11, 0x9d, 0x20, 0x29, 0x5a, 0x7f, 0xc8, 0xc1, 0x96, 0x4d, 0x3e, 0x9b, 0x91, 0x88, 0xf2, 0x88,
	0x21, 0xc0, 0x3e, 0x82, 0xd6, 0xf1, 0x38, 0x98, 0x8d, 0x9c, 0x19, 0xbd, 0x66, 0x07, 0xc2, 0x47,
	0xa1, 0x64, 0xf3, 0x0b, 0x7a, 0xe3, 0xfb, 0x50, 0x1d, 0x3e, 0x1d, 0x3e, 0x0d, 0x6e, 0x88, 0x2f,
	0x5a, 0xea, 0xf7, 0x16, 0x3b, 0x6d, 0x62, 0x82, 0x1d, 0x4f, 0x35, 0xde, 0x87, 0xfa, 0x33, 0x12,
	0x7a, 0x97, 0x73, 0xfe, 0x66, 0x01, 0xdf, 0xdc, 0x5d, 0x78, 0x53, 0x99, 0x63, 0xab, 0x2f, 0x58,
	0xe7, 0xda, 0xfb, 0x8c, 0xb1, 0x71, 0x43, 0xe2, 0xd2, 0xc1, 0xb5, 0x07, 0xd0, 0xec, 0xce, 0x42,
	0x7e, 0x6f, 0x25, 0x6e, 0xe0, 0x8f, 0x64, 0xc1, 0xa6, 0xd5, 0xd6, 0x17, 0xb9, 0x64, 0x1b, 0xe8,
	0x50, 0xd7, 0x25, 0x51, 0xf4, 0x13, 0x32, 0xef, 0x8f, 0x84, 0x49, 0x55, 0xc5, 0x7b, 0x78, 0x42,
	0x1c, 0x12, 0x37, 0x24, 0x54, 0x70, 0xf8, 0xb4, 0x9a, 0xa5, 0x0e, 0x46, 0x9b, 0xd3, 0x62, 0x1e,
	0x1b, 0x45, 0xc3, 0x52, 0xe7, 0xc4, 0x1f, 0x0d, 0x02, 0x4f, 0xf4, 0x93, 0x6a, 0x76, 0x2c, 0x23,
	0x19, 0x9f, 0xb9, 0x37, 0x84, 0x2a, 0x67, 0x88, 0xa2, 0x61, 0xa7, 0xcb, 0xc0, 0xa1, 0xd7, 0x92,
	0xf6, 0xb3, 0xe7, 0xc4, 0x11, 0x15, 0xc5, 0x11, 0xd6, 0x2f, 0xa0, 0x25, 0x33, 0x2c, 0x3e, 0xe0,
	0x33, 0x4a, 0x8d, 0x59, 0x50, 0x4e, 0x77, 0x79, 0xa4, 0xdf, 0xd5, 0x8f, 0x74, 0x79, 0x8c, 0xcb,
	0x74, 0x2c, 0xc6, 0xe9, 0x68, 0x7d, 0xa1, 0x62, 0xe9, 0xb2, 0xbe, 0x86, 0x96, 0xdf, 0x85, 0x6c,
	0x6c, 0x2d, 0x66, 0x61, 0x6b, 0x29, 0xbb, 0xa6, 0xcb, 0xd9, 0x35, 0x5d, 0x59, 0x55, 0xd3, 0xd5,
	0x95, 0x35, 0x5d, 0x5b, 0x55, 0xd3, 0xb0, 0x06, 0x5b, 0xeb, 0x6b, 0xb0, 0x75, 0x63, 0x25, 0xb6,
	0x36, 0xd2, 0xd8, 0xfa, 0xab, 0x02, 0x6c, 0x4b, 0xf7, 0xf6, 0xbc, 0x88, 0x06, 0xe1, 0xfc, 0x1b,
	0x2f, 0x67, 0x79, 0xf9, 0xdc, 0xf1, 0x9d, 0x2b, 0x12, 0xf6, 0xbb, 0xd2, 0x8f, 0xb1, 0x42, 0x8f,
	0xc1, 0xe6, 0xca, 0x18, 0x34, 0xd3, 0x31, 0xe8, 0xc1, 0x56, 0xaa, 0x9c, 0xa2, 0xa9, 0xf1, 0x8e,
	0xce, 0x4a, 0xdf, 0x58, 0xc0, 0x32, 0xb5, 0x28, 0x24, 0x23, 0x9d, 0xc3, 0x3d, 0x3d, 0x98, 0x1e,
	0x49, 0x28, 0xf8, 0xed, 0x2a, 0x51, 0x0b, 0x78, 0x31, 0xe3, 0xd8, 0x28, 0x25, 0x75, 0xfa, 0x53,
	0xd8, 0xc9, 0xfa, 0x74, 0x34, 0x35, 0xde, 0xd3, 0x77, 0xf3, 0x56, 0xe6, 0x6e, 0x94, 0x1c, 0x14,
	0x9b, 0x3a, 0xfa, 0x57, 0x13, 0x2a, 0xb2, 0xe9, 0x71, 0x0c, 0x80, 0xfd, 0x0b, 0xec, 0xb4, 0x18,
	0x8b, 0x47, 0x83, 0x6c, 0x1b, 0xed, 0xec, 0x2c, 0x0e, 0xc5, 0x6d, 0x9b, 0x13, 0xa8, 0xf3, 0xde,
	0x08, 0xb7, 0xb2, 0x38, 0x35, 0x6e, 0x1e, 0xad, 0x34, 0xf3, 0x01, 0x34, 0x78, 0x0c, 0xe5, 0xcf,
	0x35, 0xf7, 0x57, 0xfc, 0x3c, 0xbb, 0xb3, 0xbb, 0x64, 0xad, 0xf1, 0x3f, 0x08, 0x18, 0x1d, 0x3c,
	0x23, 0xd0, 0xb9, 0x8c, 0x2f, 0xbe, 0xbe, 0x78, 0x07, 0xc1, 0xf6, 0xdd, 0x92, 0xf5, 0x24, 0x0d,
	0xa1, 0x0f, 0x60, 0xeb, 0x94, 0x50, 0x21, 0x75, 0xe6, 0xbc, 0xcf, 0x73, 0x2b, 0x17, 0x25, 0xb6,
	0xce, 0xc0, 0x50, 0x6d, 0x89, 0x56, 0xd2, 0xed, 0x3c, 0x95, 0x58, 0x3b, 0x05, 0x48, 0x7e, 0x78,
	0xc8, 0xde, 0xdc, 0x62, 0x87, 0x35, 0xfd, 0x73, 0xc5, 0x40, 0xba, 0x5c, 0xfe, 0xaa, 0xbc, 0x78,
	0x59, 0x4b, 0xb7, 0x26, 0xd6, 0x38, 0xbe, 0x07, 0x4d, 0xe5, 0x57, 0xea, 0xd5, 0xeb, 0xdb, 0x5d,
	0x12, 0xdf, 0xe4, 0x07, 0xee, 0x2e, 0xd4, 0x3a, 0x4e, 0xe4, 0xb9, 0xab, 0x6d, 0xac, 0xf9, 0x07,
	0x01, 0xe3, 0xc7, 0x50, 0x17, 0x49, 0xb3, 0xda, 0x4e, 0xe6, 0xef, 0x8f, 0x46, 0x2f, 0x4e, 0x25,
	0x6c, 0x47, 0xdf, 0xc2, 0xdb, 0xe9, 0x1f, 0xc1, 0x1e, 0xe3, 0x8e, 0xf8, 0xff, 0x3f, 0x18, 0xe6,
	0x32, 0x3b, 0x11, 0x33, 0xb4, 0xb7, 0xe6, 0x3f, 0x2c, 0x8c, 0x63, 0xd8, 0x6c, 0x8f, 0xc7, 0xf2,
	0xce, 0xdd, 0xef, 0x46, 0xb7, 0xd9, 0x96, 0xbc, 0xd5, 0xdb, 0xb0, 0xad, 0x1b, 0x41, 0x70, 0x59,
	0x92, 0x00, 0xe9, 0xd6, 0xc3, 0x0a, 0x9b, 0x9f, 0x40, 0x4b, 0xb1, 0xf9, 0xd2, 0x06, 0xad, 0x95,
	0x1d, 0x02, 0x6e, 0xfa, 0x0c, 0x1a, 0x1a, 0x11, 0xce, 0xde, 0xf2, 0xa2, 0xb5, 0x45, 0x06, 0x7d,
	0x0e, 0xdb, 0x36, 0xb9, 0x0c, 0x49, 0x74, 0xad, 0x5d, 0x84, 0x32, 0x6d, 0xbe, 0xb1, 0x64, 0xcb,
	0xca, 0x7b, 0x6d, 0xa8, 0x9d, 0x92, 0xb5, 0x0b, 0xbb, 0x9f, 0x61, 0x04, 0x73, 0xa3, 0x0f, 0xcd,
	0xd8, 0xc4, 0x2b, 0xae, 0xe6, 0x1c, 0x9a, 0x62, 0xc7, 0x71, 0x1f, 0x75, 0x37, 0xf3, 0x7c, 0x58,
	0x5f, 0xd1, 0x03, 0x68, 0x68, 0x77, 0xa0, 0x65, 0x11, 0x4d, 0xdd, 0x91, 0xd6, 0x58, 0x3c, 0x81,
	0xfa, 0x29, 0x49, 0xec, 0xdd, 0x62, 0x9f, 0x5a, 0x13, 0xe0, 0x53, 0xc4, 0x67, 0xa9, 0xca, 0x4c,
	0xb7, 0x34, 0xb3, 0x5e, 0x92, 0x20, 0x8b, 0x6c, 0x81, 0xc2, 0x3d, 0xc5, 0xb6, 0x7e, 0x00, 0x1b,
	0x8f, 0xd6, 0x9c, 0xb6, 0x0a, 0x49, 0xd8, 0xf9, 0xce, 0x4b, 0xcf, 0xc5, 0xb4, 0x54, 0x77, 0xb4,
	0x2e, 0x0d, 0xf6, 0x32, 0x4d, 0xf3, 0x37, 0x3b, 0x5b, 0x7f, 0xfa, 0xea, 0x41, 0xee, 0x2f, 0x5f,
	0x3d, 0xc8, 0xfd, 0xe3, 0xab, 0x07, 0xb9, 0x4f, 0x0b, 0xce, 0xd4, 0xbb, 0x28, 0xe3, 0xbf, 0xd3,
	0xbd, 0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xe7, 0x34, 0x93, 0x9a, 0x27, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountClient interface {
	EmailExist(ctx context.Context, in *EmailReq, opts ...grpc.CallOption) (*ExistResp, error)
	MobileExist(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*ExistResp, error)
	UpdateSetting(ctx context.Context, in *SettingReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	AccountInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*DBAccount, error)
	GetAccountByEmail(ctx context.Context, in *EmailReq, opts ...grpc.CallOption) (*DBAccount, error)
	GetAccountByMobile(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*DBAccount, error)
	MemberInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*MemberInfoReply, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	SelfProfileInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*SelfProfile, error)
	BasicInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*BaseInfoReply, error)
	SettingInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*Setting, error)
	AccountStat(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*AccountStatInfo, error)
	BaseInfos(ctx context.Context, in *AidsReq, opts ...grpc.CallOption) (*BaseInfosReply, error)
	AllAccountsIDs(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDsResp, error)
	AllAccountsIDsPaged(ctx context.Context, in *AccountsPagedReq, opts ...grpc.CallOption) (*IDsResp, error)
	AllAccountsPaged(ctx context.Context, in *AccountsPagedReq, opts ...grpc.CallOption) (*AdminAccountsResp, error)
	RequestIDCert(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*RequestIDCertResp, error)
	RefreshIDCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDCertStatus, error)
	GetIDCert(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDCertInfo, error)
	GetIDCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDCertStatus, error)
	RequestWorkCert(ctx context.Context, in *WorkCertReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	AuditWorkCert(ctx context.Context, in *AuditWorkCertReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	GetWorkCert(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*WorkCertInfo, error)
	GetWorkCertsPaged(ctx context.Context, in *WorkCertPagedReq, opts ...grpc.CallOption) (*WorkCertPagedResp, error)
	GetWorkCertHistoriesPaged(ctx context.Context, in *WorkCertHistoriesPagedReq, opts ...grpc.CallOption) (*WorkCertHistoriesPagedResp, error)
	GetWorkCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*WorkCertStatus, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) EmailExist(ctx context.Context, in *EmailReq, opts ...grpc.CallOption) (*ExistResp, error) {
	out := new(ExistResp)
	err := c.cc.Invoke(ctx, "/service.account.Account/EmailExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) MobileExist(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*ExistResp, error) {
	out := new(ExistResp)
	err := c.cc.Invoke(ctx, "/service.account.Account/MobileExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateSetting(ctx context.Context, in *SettingReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.account.Account/UpdateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AccountInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*DBAccount, error) {
	out := new(DBAccount)
	err := c.cc.Invoke(ctx, "/service.account.Account/AccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountByEmail(ctx context.Context, in *EmailReq, opts ...grpc.CallOption) (*DBAccount, error) {
	out := new(DBAccount)
	err := c.cc.Invoke(ctx, "/service.account.Account/GetAccountByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountByMobile(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*DBAccount, error) {
	out := new(DBAccount)
	err := c.cc.Invoke(ctx, "/service.account.Account/GetAccountByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) MemberInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*MemberInfoReply, error) {
	out := new(MemberInfoReply)
	err := c.cc.Invoke(ctx, "/service.account.Account/MemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.account.Account/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SelfProfileInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*SelfProfile, error) {
	out := new(SelfProfile)
	err := c.cc.Invoke(ctx, "/service.account.Account/SelfProfileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) BasicInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*BaseInfoReply, error) {
	out := new(BaseInfoReply)
	err := c.cc.Invoke(ctx, "/service.account.Account/BasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SettingInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/service.account.Account/SettingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AccountStat(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*AccountStatInfo, error) {
	out := new(AccountStatInfo)
	err := c.cc.Invoke(ctx, "/service.account.Account/AccountStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) BaseInfos(ctx context.Context, in *AidsReq, opts ...grpc.CallOption) (*BaseInfosReply, error) {
	out := new(BaseInfosReply)
	err := c.cc.Invoke(ctx, "/service.account.Account/BaseInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AllAccountsIDs(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDsResp, error) {
	out := new(IDsResp)
	err := c.cc.Invoke(ctx, "/service.account.Account/AllAccountsIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AllAccountsIDsPaged(ctx context.Context, in *AccountsPagedReq, opts ...grpc.CallOption) (*IDsResp, error) {
	out := new(IDsResp)
	err := c.cc.Invoke(ctx, "/service.account.Account/AllAccountsIDsPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AllAccountsPaged(ctx context.Context, in *AccountsPagedReq, opts ...grpc.CallOption) (*AdminAccountsResp, error) {
	out := new(AdminAccountsResp)
	err := c.cc.Invoke(ctx, "/service.account.Account/AllAccountsPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) RequestIDCert(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*RequestIDCertResp, error) {
	out := new(RequestIDCertResp)
	err := c.cc.Invoke(ctx, "/service.account.Account/RequestIDCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) RefreshIDCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDCertStatus, error) {
	out := new(IDCertStatus)
	err := c.cc.Invoke(ctx, "/service.account.Account/RefreshIDCertStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetIDCert(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDCertInfo, error) {
	out := new(IDCertInfo)
	err := c.cc.Invoke(ctx, "/service.account.Account/GetIDCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetIDCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDCertStatus, error) {
	out := new(IDCertStatus)
	err := c.cc.Invoke(ctx, "/service.account.Account/GetIDCertStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) RequestWorkCert(ctx context.Context, in *WorkCertReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.account.Account/RequestWorkCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AuditWorkCert(ctx context.Context, in *AuditWorkCertReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.account.Account/AuditWorkCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetWorkCert(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*WorkCertInfo, error) {
	out := new(WorkCertInfo)
	err := c.cc.Invoke(ctx, "/service.account.Account/GetWorkCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetWorkCertsPaged(ctx context.Context, in *WorkCertPagedReq, opts ...grpc.CallOption) (*WorkCertPagedResp, error) {
	out := new(WorkCertPagedResp)
	err := c.cc.Invoke(ctx, "/service.account.Account/GetWorkCertsPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetWorkCertHistoriesPaged(ctx context.Context, in *WorkCertHistoriesPagedReq, opts ...grpc.CallOption) (*WorkCertHistoriesPagedResp, error) {
	out := new(WorkCertHistoriesPagedResp)
	err := c.cc.Invoke(ctx, "/service.account.Account/GetWorkCertHistoriesPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetWorkCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*WorkCertStatus, error) {
	out := new(WorkCertStatus)
	err := c.cc.Invoke(ctx, "/service.account.Account/GetWorkCertStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
type AccountServer interface {
	EmailExist(context.Context, *EmailReq) (*ExistResp, error)
	MobileExist(context.Context, *MobileReq) (*ExistResp, error)
	UpdateSetting(context.Context, *SettingReq) (*EmptyStruct, error)
	AccountInfo(context.Context, *AidReq) (*DBAccount, error)
	GetAccountByEmail(context.Context, *EmailReq) (*DBAccount, error)
	GetAccountByMobile(context.Context, *MobileReq) (*DBAccount, error)
	MemberInfo(context.Context, *AidReq) (*MemberInfoReply, error)
	UpdateProfile(context.Context, *UpdateProfileReq) (*EmptyStruct, error)
	SelfProfileInfo(context.Context, *AidReq) (*SelfProfile, error)
	BasicInfo(context.Context, *AidReq) (*BaseInfoReply, error)
	SettingInfo(context.Context, *AidReq) (*Setting, error)
	AccountStat(context.Context, *AidReq) (*AccountStatInfo, error)
	BaseInfos(context.Context, *AidsReq) (*BaseInfosReply, error)
	AllAccountsIDs(context.Context, *AidReq) (*IDsResp, error)
	AllAccountsIDsPaged(context.Context, *AccountsPagedReq) (*IDsResp, error)
	AllAccountsPaged(context.Context, *AccountsPagedReq) (*AdminAccountsResp, error)
	RequestIDCert(context.Context, *AidReq) (*RequestIDCertResp, error)
	RefreshIDCertStatus(context.Context, *AidReq) (*IDCertStatus, error)
	GetIDCert(context.Context, *AidReq) (*IDCertInfo, error)
	GetIDCertStatus(context.Context, *AidReq) (*IDCertStatus, error)
	RequestWorkCert(context.Context, *WorkCertReq) (*EmptyStruct, error)
	AuditWorkCert(context.Context, *AuditWorkCertReq) (*EmptyStruct, error)
	GetWorkCert(context.Context, *AidReq) (*WorkCertInfo, error)
	GetWorkCertsPaged(context.Context, *WorkCertPagedReq) (*WorkCertPagedResp, error)
	GetWorkCertHistoriesPaged(context.Context, *WorkCertHistoriesPagedReq) (*WorkCertHistoriesPagedResp, error)
	GetWorkCertStatus(context.Context, *AidReq) (*WorkCertStatus, error)
}

// UnimplementedAccountServer can be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (*UnimplementedAccountServer) EmailExist(ctx context.Context, req *EmailReq) (*ExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailExist not implemented")
}
func (*UnimplementedAccountServer) MobileExist(ctx context.Context, req *MobileReq) (*ExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MobileExist not implemented")
}
func (*UnimplementedAccountServer) UpdateSetting(ctx context.Context, req *SettingReq) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (*UnimplementedAccountServer) AccountInfo(ctx context.Context, req *AidReq) (*DBAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (*UnimplementedAccountServer) GetAccountByEmail(ctx context.Context, req *EmailReq) (*DBAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByEmail not implemented")
}
func (*UnimplementedAccountServer) GetAccountByMobile(ctx context.Context, req *MobileReq) (*DBAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByMobile not implemented")
}
func (*UnimplementedAccountServer) MemberInfo(ctx context.Context, req *AidReq) (*MemberInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberInfo not implemented")
}
func (*UnimplementedAccountServer) UpdateProfile(ctx context.Context, req *UpdateProfileReq) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (*UnimplementedAccountServer) SelfProfileInfo(ctx context.Context, req *AidReq) (*SelfProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfProfileInfo not implemented")
}
func (*UnimplementedAccountServer) BasicInfo(ctx context.Context, req *AidReq) (*BaseInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicInfo not implemented")
}
func (*UnimplementedAccountServer) SettingInfo(ctx context.Context, req *AidReq) (*Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingInfo not implemented")
}
func (*UnimplementedAccountServer) AccountStat(ctx context.Context, req *AidReq) (*AccountStatInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountStat not implemented")
}
func (*UnimplementedAccountServer) BaseInfos(ctx context.Context, req *AidsReq) (*BaseInfosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseInfos not implemented")
}
func (*UnimplementedAccountServer) AllAccountsIDs(ctx context.Context, req *AidReq) (*IDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAccountsIDs not implemented")
}
func (*UnimplementedAccountServer) AllAccountsIDsPaged(ctx context.Context, req *AccountsPagedReq) (*IDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAccountsIDsPaged not implemented")
}
func (*UnimplementedAccountServer) AllAccountsPaged(ctx context.Context, req *AccountsPagedReq) (*AdminAccountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAccountsPaged not implemented")
}
func (*UnimplementedAccountServer) RequestIDCert(ctx context.Context, req *AidReq) (*RequestIDCertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestIDCert not implemented")
}
func (*UnimplementedAccountServer) RefreshIDCertStatus(ctx context.Context, req *AidReq) (*IDCertStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshIDCertStatus not implemented")
}
func (*UnimplementedAccountServer) GetIDCert(ctx context.Context, req *AidReq) (*IDCertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDCert not implemented")
}
func (*UnimplementedAccountServer) GetIDCertStatus(ctx context.Context, req *AidReq) (*IDCertStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDCertStatus not implemented")
}
func (*UnimplementedAccountServer) RequestWorkCert(ctx context.Context, req *WorkCertReq) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWorkCert not implemented")
}
func (*UnimplementedAccountServer) AuditWorkCert(ctx context.Context, req *AuditWorkCertReq) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditWorkCert not implemented")
}
func (*UnimplementedAccountServer) GetWorkCert(ctx context.Context, req *AidReq) (*WorkCertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkCert not implemented")
}
func (*UnimplementedAccountServer) GetWorkCertsPaged(ctx context.Context, req *WorkCertPagedReq) (*WorkCertPagedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkCertsPaged not implemented")
}
func (*UnimplementedAccountServer) GetWorkCertHistoriesPaged(ctx context.Context, req *WorkCertHistoriesPagedReq) (*WorkCertHistoriesPagedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkCertHistoriesPaged not implemented")
}
func (*UnimplementedAccountServer) GetWorkCertStatus(ctx context.Context, req *AidReq) (*WorkCertStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkCertStatus not implemented")
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_EmailExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).EmailExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/EmailExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).EmailExist(ctx, req.(*EmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_MobileExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).MobileExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/MobileExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).MobileExist(ctx, req.(*MobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateSetting(ctx, req.(*SettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/AccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AccountInfo(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/GetAccountByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountByEmail(ctx, req.(*EmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/GetAccountByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountByMobile(ctx, req.(*MobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_MemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).MemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/MemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).MemberInfo(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateProfile(ctx, req.(*UpdateProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_SelfProfileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).SelfProfileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/SelfProfileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).SelfProfileInfo(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_BasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).BasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/BasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).BasicInfo(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_SettingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).SettingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/SettingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).SettingInfo(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AccountStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AccountStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/AccountStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AccountStat(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_BaseInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).BaseInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/BaseInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).BaseInfos(ctx, req.(*AidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AllAccountsIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AllAccountsIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/AllAccountsIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AllAccountsIDs(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AllAccountsIDsPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsPagedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AllAccountsIDsPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/AllAccountsIDsPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AllAccountsIDsPaged(ctx, req.(*AccountsPagedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AllAccountsPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsPagedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AllAccountsPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/AllAccountsPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AllAccountsPaged(ctx, req.(*AccountsPagedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_RequestIDCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RequestIDCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/RequestIDCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RequestIDCert(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_RefreshIDCertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RefreshIDCertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/RefreshIDCertStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RefreshIDCertStatus(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetIDCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetIDCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/GetIDCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetIDCert(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetIDCertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetIDCertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/GetIDCertStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetIDCertStatus(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_RequestWorkCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RequestWorkCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/RequestWorkCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RequestWorkCert(ctx, req.(*WorkCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AuditWorkCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditWorkCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AuditWorkCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/AuditWorkCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AuditWorkCert(ctx, req.(*AuditWorkCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetWorkCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetWorkCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/GetWorkCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetWorkCert(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetWorkCertsPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkCertPagedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetWorkCertsPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/GetWorkCertsPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetWorkCertsPaged(ctx, req.(*WorkCertPagedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetWorkCertHistoriesPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkCertHistoriesPagedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetWorkCertHistoriesPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/GetWorkCertHistoriesPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetWorkCertHistoriesPaged(ctx, req.(*WorkCertHistoriesPagedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetWorkCertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetWorkCertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/GetWorkCertStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetWorkCertStatus(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmailExist",
			Handler:    _Account_EmailExist_Handler,
		},
		{
			MethodName: "MobileExist",
			Handler:    _Account_MobileExist_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _Account_UpdateSetting_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _Account_AccountInfo_Handler,
		},
		{
			MethodName: "GetAccountByEmail",
			Handler:    _Account_GetAccountByEmail_Handler,
		},
		{
			MethodName: "GetAccountByMobile",
			Handler:    _Account_GetAccountByMobile_Handler,
		},
		{
			MethodName: "MemberInfo",
			Handler:    _Account_MemberInfo_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Account_UpdateProfile_Handler,
		},
		{
			MethodName: "SelfProfileInfo",
			Handler:    _Account_SelfProfileInfo_Handler,
		},
		{
			MethodName: "BasicInfo",
			Handler:    _Account_BasicInfo_Handler,
		},
		{
			MethodName: "SettingInfo",
			Handler:    _Account_SettingInfo_Handler,
		},
		{
			MethodName: "AccountStat",
			Handler:    _Account_AccountStat_Handler,
		},
		{
			MethodName: "BaseInfos",
			Handler:    _Account_BaseInfos_Handler,
		},
		{
			MethodName: "AllAccountsIDs",
			Handler:    _Account_AllAccountsIDs_Handler,
		},
		{
			MethodName: "AllAccountsIDsPaged",
			Handler:    _Account_AllAccountsIDsPaged_Handler,
		},
		{
			MethodName: "AllAccountsPaged",
			Handler:    _Account_AllAccountsPaged_Handler,
		},
		{
			MethodName: "RequestIDCert",
			Handler:    _Account_RequestIDCert_Handler,
		},
		{
			MethodName: "RefreshIDCertStatus",
			Handler:    _Account_RefreshIDCertStatus_Handler,
		},
		{
			MethodName: "GetIDCert",
			Handler:    _Account_GetIDCert_Handler,
		},
		{
			MethodName: "GetIDCertStatus",
			Handler:    _Account_GetIDCertStatus_Handler,
		},
		{
			MethodName: "RequestWorkCert",
			Handler:    _Account_RequestWorkCert_Handler,
		},
		{
			MethodName: "AuditWorkCert",
			Handler:    _Account_AuditWorkCert_Handler,
		},
		{
			MethodName: "GetWorkCert",
			Handler:    _Account_GetWorkCert_Handler,
		},
		{
			MethodName: "GetWorkCertsPaged",
			Handler:    _Account_GetWorkCertsPaged_Handler,
		},
		{
			MethodName: "GetWorkCertHistoriesPaged",
			Handler:    _Account_GetWorkCertHistoriesPaged_Handler,
		},
		{
			MethodName: "GetWorkCertStatus",
			Handler:    _Account_GetWorkCertStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *BaseInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsLock {
		i--
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x52
	}
	if m.IsVIP {
		i--
		if m.IsVIP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsOrg {
		i--
		if m.IsOrg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.WorkCert {
		i--
		if m.WorkCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IDCert {
		i--
		if m.IDCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x22
	}
	if m.Gender != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaseInfosReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfosReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseInfosReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BaseInfos) > 0 {
		for k := range m.BaseInfos {
			v := m.BaseInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintPb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SettingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettingReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettingReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseMaster {
		i--
		if m.UseMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Settings) > 0 {
		for k := range m.Settings {
			v := m.Settings[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelfProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelfProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelfProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.Setting != nil {
		{
			size, err := m.Setting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.IsVIP {
		i--
		if m.IsVIP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.IsOrg {
		i--
		if m.IsOrg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintPb(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.WorkCertStatus != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.WorkCertStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.WorkCert {
		i--
		if m.WorkCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IDCertStatus != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.IDCertStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.IDCert {
		i--
		if m.IDCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if len(m.LocationString) > 0 {
		i -= len(m.LocationString)
		copy(dAtA[i:], m.LocationString)
		i = encodeVarintPb(dAtA, i, uint64(len(m.LocationString)))
		i--
		dAtA[i] = 0x72
	}
	if m.Location != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Location))
		i--
		dAtA[i] = 0x68
	}
	if m.Source != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x52
	}
	if m.BirthDay != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BirthDay))
		i--
		dAtA[i] = 0x48
	}
	if m.BirthMonth != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BirthMonth))
		i--
		dAtA[i] = 0x40
	}
	if m.BirthYear != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BirthYear))
		i--
		dAtA[i] = 0x38
	}
	if m.Gender != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x30
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x4a
	}
	if m.NotifyNewMember {
		i--
		if m.NotifyNewMember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.NotifyNewFans {
		i--
		if m.NotifyNewFans {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.NotifyComment {
		i--
		if m.NotifyComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.NotifyLike {
		i--
		if m.NotifyLike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ActivityFollowMember {
		i--
		if m.ActivityFollowMember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ActivityFollowTopic {
		i--
		if m.ActivityFollowTopic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityComment {
		i--
		if m.ActivityComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityLike {
		i--
		if m.ActivityLike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountStatInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountStatInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountStatInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DiscussionCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DiscussionCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ArticleCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleCount))
		i--
		dAtA[i] = 0x28
	}
	if m.TopicCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TopicCount))
		i--
		dAtA[i] = 0x20
	}
	if m.BlackCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BlackCount))
		i--
		dAtA[i] = 0x18
	}
	if m.FansCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.FansCount))
		i--
		dAtA[i] = 0x10
	}
	if m.FollowingCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.FollowingCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemberInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsLock {
		i--
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x72
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x60
	}
	if m.IsVIP {
		i--
		if m.IsVIP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IsOrg {
		i--
		if m.IsOrg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.WorkCert {
		i--
		if m.WorkCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IDCert {
		i--
		if m.IDCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LocationString) > 0 {
		i -= len(m.LocationString)
		copy(dAtA[i:], m.LocationString)
		i = encodeVarintPb(dAtA, i, uint64(len(m.LocationString)))
		i--
		dAtA[i] = 0x32
	}
	if m.Location != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Location))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x22
	}
	if m.Gender != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdminAccountItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminAccountItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminAccountItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.IsLock {
		i--
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x72
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x60
	}
	if m.IsVIP {
		i--
		if m.IsVIP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IsOrg {
		i--
		if m.IsOrg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.WorkCert {
		i--
		if m.WorkCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IDCert {
		i--
		if m.IDCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LocationString) > 0 {
		i -= len(m.LocationString)
		copy(dAtA[i:], m.LocationString)
		i = encodeVarintPb(dAtA, i, uint64(len(m.LocationString)))
		i--
		dAtA[i] = 0x32
	}
	if m.Location != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Location))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x22
	}
	if m.Gender != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseMaster {
		i--
		if m.UseMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RemoteIP) > 0 {
		i -= len(m.RemoteIP)
		copy(dAtA[i:], m.RemoteIP)
		i = encodeVarintPb(dAtA, i, uint64(len(m.RemoteIP)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AidResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AidResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AnnulReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnulReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnulReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseMaster {
		i--
		if m.UseMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EmailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseMaster {
		i--
		if m.UseMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MobileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MobileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MobileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseMaster {
		i--
		if m.UseMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExistResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExistResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AidsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AidsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AidsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseMaster {
		i--
		if m.UseMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RemoteIP) > 0 {
		i -= len(m.RemoteIP)
		copy(dAtA[i:], m.RemoteIP)
		i = encodeVarintPb(dAtA, i, uint64(len(m.RemoteIP)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Aids) > 0 {
		dAtA8 := make([]byte, len(m.Aids)*10)
		var j7 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintPb(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DBAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Deactive {
		i--
		if m.Deactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.IsLock {
		i--
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.IsVIP {
		i--
		if m.IsVIP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.IsOrg {
		i--
		if m.IsOrg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.WorkCert {
		i--
		if m.WorkCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.IDCert {
		i--
		if m.IDCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IP != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.IP))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Source != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Location != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Location))
		i--
		dAtA[i] = 0x60
	}
	if m.BirthDay != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BirthDay))
		i--
		dAtA[i] = 0x58
	}
	if m.BirthMonth != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BirthMonth))
		i--
		dAtA[i] = 0x50
	}
	if m.BirthYear != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BirthYear))
		i--
		dAtA[i] = 0x48
	}
	if m.Gender != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProfileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x58
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x50
	}
	if m.Password != nil {
		{
			size := m.Password.Size()
			i -= size
			if _, err := m.Password.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Introduction != nil {
		{
			size := m.Introduction.Size()
			i -= size
			if _, err := m.Introduction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BirthDay != nil {
		{
			size := m.BirthDay.Size()
			i -= size
			if _, err := m.BirthDay.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BirthMonth != nil {
		{
			size := m.BirthMonth.Size()
			i -= size
			if _, err := m.BirthMonth.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BirthYear != nil {
		{
			size := m.BirthYear.Size()
			i -= size
			if _, err := m.BirthYear.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Location != nil {
		{
			size := m.Location.Size()
			i -= size
			if _, err := m.Location.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Gender != nil {
		{
			size := m.Gender.Size()
			i -= size
			if _, err := m.Gender.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserName != nil {
		{
			size := m.UserName.Size()
			i -= size
			if _, err := m.UserName.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Avatar != nil {
		{
			size := m.Avatar.Size()
			i -= size
			if _, err := m.Avatar.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateProfileReq_AvatarValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_AvatarValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AvatarValue)
	copy(dAtA[i:], m.AvatarValue)
	i = encodeVarintPb(dAtA, i, uint64(len(m.AvatarValue)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *UpdateProfileReq_UserNameValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_UserNameValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.UserNameValue)
	copy(dAtA[i:], m.UserNameValue)
	i = encodeVarintPb(dAtA, i, uint64(len(m.UserNameValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *UpdateProfileReq_GenderValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_GenderValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPb(dAtA, i, uint64(m.GenderValue))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *UpdateProfileReq_LocationValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_LocationValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPb(dAtA, i, uint64(m.LocationValue))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *UpdateProfileReq_BirthYearValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_BirthYearValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPb(dAtA, i, uint64(m.BirthYearValue))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *UpdateProfileReq_BirthMonthValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_BirthMonthValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPb(dAtA, i, uint64(m.BirthMonthValue))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *UpdateProfileReq_BirthDayValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_BirthDayValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPb(dAtA, i, uint64(m.BirthDayValue))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *UpdateProfileReq_IntroductionValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_IntroductionValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.IntroductionValue)
	copy(dAtA[i:], m.IntroductionValue)
	i = encodeVarintPb(dAtA, i, uint64(len(m.IntroductionValue)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *UpdateProfileReq_PasswordValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileReq_PasswordValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PasswordValue)
	copy(dAtA[i:], m.PasswordValue)
	i = encodeVarintPb(dAtA, i, uint64(len(m.PasswordValue)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *AccountsPagedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountsPagedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountsPagedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IDs) > 0 {
		dAtA10 := make([]byte, len(m.IDs)*10)
		var j9 int
		for _, num1 := range m.IDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintPb(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminAccountsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminAccountsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminAccountsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IDCertInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCertInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCertInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.EthnicGroup) > 0 {
		i -= len(m.EthnicGroup)
		copy(dAtA[i:], m.EthnicGroup)
		i = encodeVarintPb(dAtA, i, uint64(len(m.EthnicGroup)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.FacePic) > 0 {
		i -= len(m.FacePic)
		copy(dAtA[i:], m.FacePic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FacePic)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.IDCardBackPic) > 0 {
		i -= len(m.IDCardBackPic)
		copy(dAtA[i:], m.IDCardBackPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.IDCardBackPic)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.IDCardFrontPic) > 0 {
		i -= len(m.IDCardFrontPic)
		copy(dAtA[i:], m.IDCardFrontPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.IDCardFrontPic)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Sex) > 0 {
		i -= len(m.Sex)
		copy(dAtA[i:], m.Sex)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Sex)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.IDCardExpiry) > 0 {
		i -= len(m.IDCardExpiry)
		copy(dAtA[i:], m.IDCardExpiry)
		i = encodeVarintPb(dAtA, i, uint64(len(m.IDCardExpiry)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.IDCardStartDate) > 0 {
		i -= len(m.IDCardStartDate)
		copy(dAtA[i:], m.IDCardStartDate)
		i = encodeVarintPb(dAtA, i, uint64(len(m.IDCardStartDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IDCardType) > 0 {
		i -= len(m.IDCardType)
		copy(dAtA[i:], m.IDCardType)
		i = encodeVarintPb(dAtA, i, uint64(len(m.IDCardType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IdentificationNumber) > 0 {
		i -= len(m.IdentificationNumber)
		copy(dAtA[i:], m.IdentificationNumber)
		i = encodeVarintPb(dAtA, i, uint64(len(m.IdentificationNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AuditConclusions) > 0 {
		i -= len(m.AuditConclusions)
		copy(dAtA[i:], m.AuditConclusions)
		i = encodeVarintPb(dAtA, i, uint64(len(m.AuditConclusions)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.AuditResult) > 0 {
		i -= len(m.AuditResult)
		copy(dAtA[i:], m.AuditResult)
		i = encodeVarintPb(dAtA, i, uint64(len(m.AuditResult)))
		i--
		dAtA[i] = 0x52
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OtherPic) > 0 {
		i -= len(m.OtherPic)
		copy(dAtA[i:], m.OtherPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.OtherPic)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WorkPic) > 0 {
		i -= len(m.WorkPic)
		copy(dAtA[i:], m.WorkPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.WorkPic)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDCertStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCertStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCertStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OtherPic) > 0 {
		i -= len(m.OtherPic)
		copy(dAtA[i:], m.OtherPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.OtherPic)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WorkPic) > 0 {
		i -= len(m.WorkPic)
		copy(dAtA[i:], m.WorkPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.WorkPic)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuditWorkCertReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditWorkCertReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditWorkCertReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Approve {
		i--
		if m.Approve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.AuditResult) > 0 {
		i -= len(m.AuditResult)
		copy(dAtA[i:], m.AuditResult)
		i = encodeVarintPb(dAtA, i, uint64(len(m.AuditResult)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestIDCertResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestIDCertResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestIDCertResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VerifyToken != nil {
		{
			size, err := m.VerifyToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.STSToken != nil {
		{
			size, err := m.STSToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CloudauthPageUrl) > 0 {
		i -= len(m.CloudauthPageUrl)
		copy(dAtA[i:], m.CloudauthPageUrl)
		i = encodeVarintPb(dAtA, i, uint64(len(m.CloudauthPageUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DurationSeconds != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DurationSeconds))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *STSToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *STSToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *STSToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EndPoint) > 0 {
		i -= len(m.EndPoint)
		copy(dAtA[i:], m.EndPoint)
		i = encodeVarintPb(dAtA, i, uint64(len(m.EndPoint)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Expiration) > 0 {
		i -= len(m.Expiration)
		copy(dAtA[i:], m.Expiration)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Expiration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessKeySecret) > 0 {
		i -= len(m.AccessKeySecret)
		copy(dAtA[i:], m.AccessKeySecret)
		i = encodeVarintPb(dAtA, i, uint64(len(m.AccessKeySecret)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessKeyId) > 0 {
		i -= len(m.AccessKeyId)
		copy(dAtA[i:], m.AccessKeyId)
		i = encodeVarintPb(dAtA, i, uint64(len(m.AccessKeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertPagedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertPagedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertPagedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x68
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.AuditResult) > 0 {
		i -= len(m.AuditResult)
		copy(dAtA[i:], m.AuditResult)
		i = encodeVarintPb(dAtA, i, uint64(len(m.AuditResult)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OtherPic) > 0 {
		i -= len(m.OtherPic)
		copy(dAtA[i:], m.OtherPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.OtherPic)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WorkPic) > 0 {
		i -= len(m.WorkPic)
		copy(dAtA[i:], m.WorkPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.WorkPic)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertHistoryItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertHistoryItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertHistoryItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x78
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x70
	}
	if m.ManagerID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ManagerID))
		i--
		dAtA[i] = 0x68
	}
	if len(m.AuditResult) > 0 {
		i -= len(m.AuditResult)
		copy(dAtA[i:], m.AuditResult)
		i = encodeVarintPb(dAtA, i, uint64(len(m.AuditResult)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OtherPic) > 0 {
		i -= len(m.OtherPic)
		copy(dAtA[i:], m.OtherPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.OtherPic)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WorkPic) > 0 {
		i -= len(m.WorkPic)
		copy(dAtA[i:], m.WorkPic)
		i = encodeVarintPb(dAtA, i, uint64(len(m.WorkPic)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertPagedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertPagedResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertPagedResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertHistoriesPagedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertHistoriesPagedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertHistoriesPagedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x28
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertHistoriesPagedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertHistoriesPagedResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertHistoriesPagedResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovPb(uint64(m.Gender))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IDCert {
		n += 2
	}
	if m.WorkCert {
		n += 2
	}
	if m.IsOrg {
		n += 2
	}
	if m.IsVIP {
		n += 2
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IsLock {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseInfosReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BaseInfos) > 0 {
		for k, v := range m.BaseInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPb(uint64(l))
			}
			mapEntrySize := 1 + sovPb(uint64(k)) + l
			n += mapEntrySize + 1 + sovPb(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SettingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if len(m.Settings) > 0 {
		for k, v := range m.Settings {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPb(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovPb(uint64(mapEntrySize))
		}
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.UseMaster {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelfProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovPb(uint64(m.Gender))
	}
	if m.BirthYear != 0 {
		n += 1 + sovPb(uint64(m.BirthYear))
	}
	if m.BirthMonth != 0 {
		n += 1 + sovPb(uint64(m.BirthMonth))
	}
	if m.BirthDay != 0 {
		n += 1 + sovPb(uint64(m.BirthDay))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovPb(uint64(m.Source))
	}
	if m.Location != 0 {
		n += 1 + sovPb(uint64(m.Location))
	}
	l = len(m.LocationString)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IDCert {
		n += 2
	}
	if m.IDCertStatus != 0 {
		n += 2 + sovPb(uint64(m.IDCertStatus))
	}
	if m.WorkCert {
		n += 3
	}
	if m.WorkCertStatus != 0 {
		n += 2 + sovPb(uint64(m.WorkCertStatus))
	}
	l = len(m.IP)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	if m.IsOrg {
		n += 3
	}
	if m.IsVIP {
		n += 3
	}
	l = len(m.Role)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovPb(uint64(m.UpdatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 2 + l + sovPb(uint64(l))
	}
	if m.Setting != nil {
		l = m.Setting.Size()
		n += 2 + l + sovPb(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityLike {
		n += 2
	}
	if m.ActivityComment {
		n += 2
	}
	if m.ActivityFollowTopic {
		n += 2
	}
	if m.ActivityFollowMember {
		n += 2
	}
	if m.NotifyLike {
		n += 2
	}
	if m.NotifyComment {
		n += 2
	}
	if m.NotifyNewFans {
		n += 2
	}
	if m.NotifyNewMember {
		n += 2
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountStatInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FollowingCount != 0 {
		n += 1 + sovPb(uint64(m.FollowingCount))
	}
	if m.FansCount != 0 {
		n += 1 + sovPb(uint64(m.FansCount))
	}
	if m.BlackCount != 0 {
		n += 1 + sovPb(uint64(m.BlackCount))
	}
	if m.TopicCount != 0 {
		n += 1 + sovPb(uint64(m.TopicCount))
	}
	if m.ArticleCount != 0 {
		n += 1 + sovPb(uint64(m.ArticleCount))
	}
	if m.DiscussionCount != 0 {
		n += 1 + sovPb(uint64(m.DiscussionCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovPb(uint64(m.Gender))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Location != 0 {
		n += 1 + sovPb(uint64(m.Location))
	}
	l = len(m.LocationString)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IDCert {
		n += 2
	}
	if m.WorkCert {
		n += 2
	}
	if m.IsOrg {
		n += 2
	}
	if m.IsVIP {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IsLock {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminAccountItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovPb(uint64(m.Gender))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Location != 0 {
		n += 1 + sovPb(uint64(m.Location))
	}
	l = len(m.LocationString)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IDCert {
		n += 2
	}
	if m.WorkCert {
		n += 2
	}
	if m.IsOrg {
		n += 2
	}
	if m.IsVIP {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IsLock {
		n += 3
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	l = len(m.RemoteIP)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.UseMaster {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnnulReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.UseMaster {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.UseMaster {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MobileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.UseMaster {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExistResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AidsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovPb(uint64(e))
		}
		n += 1 + sovPb(uint64(l)) + l
	}
	l = len(m.RemoteIP)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.UseMaster {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovPb(uint64(m.Gender))
	}
	if m.BirthYear != 0 {
		n += 1 + sovPb(uint64(m.BirthYear))
	}
	if m.BirthMonth != 0 {
		n += 1 + sovPb(uint64(m.BirthMonth))
	}
	if m.BirthDay != 0 {
		n += 1 + sovPb(uint64(m.BirthDay))
	}
	if m.Location != 0 {
		n += 1 + sovPb(uint64(m.Location))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovPb(uint64(m.Source))
	}
	if m.IP != 0 {
		n += 2 + sovPb(uint64(m.IP))
	}
	if m.IDCert {
		n += 3
	}
	if m.WorkCert {
		n += 3
	}
	if m.IsOrg {
		n += 3
	}
	if m.IsVIP {
		n += 3
	}
	if m.CreatedAt != 0 {
		n += 2 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovPb(uint64(m.UpdatedAt))
	}
	if m.IsLock {
		n += 3
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	if m.Deactive {
		n += 3
	}
	l = len(m.Password)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 2 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProfileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Avatar != nil {
		n += m.Avatar.Size()
	}
	if m.UserName != nil {
		n += m.UserName.Size()
	}
	if m.Gender != nil {
		n += m.Gender.Size()
	}
	if m.Location != nil {
		n += m.Location.Size()
	}
	if m.BirthYear != nil {
		n += m.BirthYear.Size()
	}
	if m.BirthMonth != nil {
		n += m.BirthMonth.Size()
	}
	if m.BirthDay != nil {
		n += m.BirthDay.Size()
	}
	if m.Introduction != nil {
		n += m.Introduction.Size()
	}
	if m.Password != nil {
		n += m.Password.Size()
	}
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProfileReq_AvatarValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvatarValue)
	n += 1 + l + sovPb(uint64(l))
	return n
}
func (m *UpdateProfileReq_UserNameValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserNameValue)
	n += 1 + l + sovPb(uint64(l))
	return n
}
func (m *UpdateProfileReq_GenderValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.GenderValue))
	return n
}
func (m *UpdateProfileReq_LocationValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.LocationValue))
	return n
}
func (m *UpdateProfileReq_BirthYearValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.BirthYearValue))
	return n
}
func (m *UpdateProfileReq_BirthMonthValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.BirthMonthValue))
	return n
}
func (m *UpdateProfileReq_BirthDayValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.BirthDayValue))
	return n
}
func (m *UpdateProfileReq_IntroductionValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IntroductionValue)
	n += 1 + l + sovPb(uint64(l))
	return n
}
func (m *UpdateProfileReq_PasswordValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PasswordValue)
	n += 1 + l + sovPb(uint64(l))
	return n
}
func (m *AccountsPagedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IDs) > 0 {
		l = 0
		for _, e := range m.IDs {
			l += sovPb(uint64(e))
		}
		n += 1 + sovPb(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminAccountsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDCertInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Status != 0 {
		n += 1 + sovPb(uint64(m.Status))
	}
	l = len(m.AuditConclusions)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.IdentificationNumber)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.IDCardType)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.IDCardStartDate)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.IDCardExpiry)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.IDCardFrontPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.IDCardBackPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.FacePic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.EthnicGroup)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Status != 0 {
		n += 1 + sovPb(uint64(m.Status))
	}
	l = len(m.WorkPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.OtherPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovPb(uint64(m.ExpiresAt))
	}
	l = len(m.AuditResult)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDCertStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPb(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPb(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	l = len(m.WorkPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.OtherPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovPb(uint64(m.ExpiresAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditWorkCertReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	l = len(m.AuditResult)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Approve {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestIDCertResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CloudauthPageUrl)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.STSToken != nil {
		l = m.STSToken.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.VerifyToken != nil {
		l = m.VerifyToken.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.DurationSeconds != 0 {
		n += 1 + sovPb(uint64(m.DurationSeconds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *STSToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessKeyId)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.AccessKeySecret)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Expiration)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.EndPoint)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertPagedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPb(uint64(m.Status))
	}
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Status != 0 {
		n += 1 + sovPb(uint64(m.Status))
	}
	l = len(m.WorkPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.OtherPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovPb(uint64(m.ExpiresAt))
	}
	l = len(m.AuditResult)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertHistoryItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Status != 0 {
		n += 1 + sovPb(uint64(m.Status))
	}
	l = len(m.WorkPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.OtherPic)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovPb(uint64(m.ExpiresAt))
	}
	l = len(m.AuditResult)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ManagerID != 0 {
		n += 1 + sovPb(uint64(m.ManagerID))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertPagedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertHistoriesPagedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertHistoriesPagedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IDCert = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkCert = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrg = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVIP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVIP = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &AccountStatInfo{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfosReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfosReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfosReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfos == nil {
				m.BaseInfos = make(map[int64]*BaseInfoReply)
			}
			var mapkey int64
			var mapvalue *BaseInfoReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BaseInfoReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BaseInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Settings[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMaster = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelfProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthYear", wireType)
			}
			m.BirthYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthYear |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthMonth", wireType)
			}
			m.BirthMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthMonth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDay", wireType)
			}
			m.BirthDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthDay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IDCert = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCertStatus", wireType)
			}
			m.IDCertStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IDCertStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkCert = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCertStatus", wireType)
			}
			m.WorkCertStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkCertStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrg = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVIP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVIP = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &AccountStatInfo{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setting == nil {
				m.Setting = &Setting{}
			}
			if err := m.Setting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityLike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActivityLike = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActivityComment = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityFollowTopic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActivityFollowTopic = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityFollowMember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActivityFollowMember = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyLike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotifyLike = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotifyComment = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyNewFans", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotifyNewFans = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyNewMember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotifyNewMember = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountStatInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountStatInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountStatInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingCount", wireType)
			}
			m.FollowingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansCount", wireType)
			}
			m.FansCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackCount", wireType)
			}
			m.BlackCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlackCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCount", wireType)
			}
			m.TopicCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleCount", wireType)
			}
			m.ArticleCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussionCount", wireType)
			}
			m.DiscussionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussionCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IDCert = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkCert = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrg = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVIP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVIP = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &AccountStatInfo{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminAccountItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminAccountItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminAccountItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IDCert = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkCert = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrg = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVIP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVIP = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &AccountStatInfo{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMaster = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnulReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnulReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnulReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMaster = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMaster = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MobileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MobileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MobileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMaster = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExistResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AidsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AidsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AidsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMaster = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthYear", wireType)
			}
			m.BirthYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthYear |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthMonth", wireType)
			}
			m.BirthMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthMonth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDay", wireType)
			}
			m.BirthDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthDay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			m.IP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IP |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IDCert = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkCert = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrg = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVIP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVIP = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactive = bool(v != 0)
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = &UpdateProfileReq_AvatarValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNameValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = &UpdateProfileReq_UserNameValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenderValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gender = &UpdateProfileReq_GenderValue{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = &UpdateProfileReq_LocationValue{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthYearValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BirthYear = &UpdateProfileReq_BirthYearValue{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthMonthValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BirthMonth = &UpdateProfileReq_BirthMonthValue{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDayValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BirthDay = &UpdateProfileReq_BirthDayValue{v}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroductionValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = &UpdateProfileReq_IntroductionValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = &UpdateProfileReq_PasswordValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountsPagedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountsPagedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountsPagedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IDs = append(m.IDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IDs) == 0 {
					m.IDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IDs = append(m.IDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminAccountsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminAccountsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminAccountsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AdminAccountItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCertInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCertInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCertInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConclusions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditConclusions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentificationNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentificationNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardStartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardStartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardExpiry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardExpiry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardFrontPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardFrontPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardBackPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardBackPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FacePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FacePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthnicGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthnicGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCertStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCertStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCertStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditWorkCertReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditWorkCertReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditWorkCertReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approve = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestIDCertResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestIDCertResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestIDCertResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudauthPageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudauthPageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field STSToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.STSToken == nil {
				m.STSToken = &STSToken{}
			}
			if err := m.STSToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifyToken == nil {
				m.VerifyToken = &VerifyToken{}
			}
			if err := m.VerifyToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationSeconds", wireType)
			}
			m.DurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *STSToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: STSToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: STSToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKeySecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKeySecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expiration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertPagedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertPagedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertPagedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertHistoryItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertHistoryItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertHistoryItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerID", wireType)
			}
			m.ManagerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertPagedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertPagedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertPagedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &WorkCertItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertHistoriesPagedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertHistoriesPagedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertHistoriesPagedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertHistoriesPagedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertHistoriesPagedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertHistoriesPagedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &WorkCertHistoryItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb   = fmt.Errorf("proto: integer overflow")
)
