// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BaseInfoReply struct {
	ID       int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"user_name"`
	// Types that are valid to be assigned to Gender:
	//	*BaseInfoReply_GenderValue
	Gender               isBaseInfoReply_Gender `protobuf_oneof:"Gender"`
	Avatar               string                 `protobuf:"bytes,6,opt,name=Avatar,proto3" json:"avatar"`
	IDCert               bool                   `protobuf:"varint,7,opt,name=IDCert,proto3" json:"id_cert"`
	WorkCert             bool                   `protobuf:"varint,8,opt,name=WorkCert,proto3" json:"work_cert"`
	IsOrg                bool                   `protobuf:"varint,9,opt,name=IsOrg,proto3" json:"is_org"`
	IsVIP                bool                   `protobuf:"varint,10,opt,name=IsVIP,proto3" json:"is_vip"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BaseInfoReply) Reset()         { *m = BaseInfoReply{} }
func (m *BaseInfoReply) String() string { return proto.CompactTextString(m) }
func (*BaseInfoReply) ProtoMessage()    {}
func (*BaseInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{0}
}
func (m *BaseInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoReply.Merge(m, src)
}
func (m *BaseInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoReply proto.InternalMessageInfo

type isBaseInfoReply_Gender interface {
	isBaseInfoReply_Gender()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BaseInfoReply_GenderValue struct {
	GenderValue int32 `protobuf:"varint,3,opt,name=GenderValue,proto3,oneof"`
}

func (*BaseInfoReply_GenderValue) isBaseInfoReply_Gender() {}

func (m *BaseInfoReply) GetGender() isBaseInfoReply_Gender {
	if m != nil {
		return m.Gender
	}
	return nil
}

func (m *BaseInfoReply) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BaseInfoReply) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *BaseInfoReply) GetGenderValue() int32 {
	if x, ok := m.GetGender().(*BaseInfoReply_GenderValue); ok {
		return x.GenderValue
	}
	return 0
}

func (m *BaseInfoReply) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *BaseInfoReply) GetIDCert() bool {
	if m != nil {
		return m.IDCert
	}
	return false
}

func (m *BaseInfoReply) GetWorkCert() bool {
	if m != nil {
		return m.WorkCert
	}
	return false
}

func (m *BaseInfoReply) GetIsOrg() bool {
	if m != nil {
		return m.IsOrg
	}
	return false
}

func (m *BaseInfoReply) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BaseInfoReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BaseInfoReply_OneofMarshaler, _BaseInfoReply_OneofUnmarshaler, _BaseInfoReply_OneofSizer, []interface{}{
		(*BaseInfoReply_GenderValue)(nil),
	}
}

func _BaseInfoReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BaseInfoReply)
	// Gender
	switch x := m.Gender.(type) {
	case *BaseInfoReply_GenderValue:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.GenderValue))
	case nil:
	default:
		return fmt.Errorf("BaseInfoReply.Gender has unexpected type %T", x)
	}
	return nil
}

func _BaseInfoReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BaseInfoReply)
	switch tag {
	case 3: // Gender.GenderValue
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Gender = &BaseInfoReply_GenderValue{int32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _BaseInfoReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BaseInfoReply)
	// Gender
	switch x := m.Gender.(type) {
	case *BaseInfoReply_GenderValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.GenderValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BaseInfosReply struct {
	// member基本信息集合
	BaseInfos            map[int64]*BaseInfoReply `protobuf:"bytes,1,rep,name=base_infos,json=baseInfos,proto3" json:"base_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BaseInfosReply) Reset()         { *m = BaseInfosReply{} }
func (m *BaseInfosReply) String() string { return proto.CompactTextString(m) }
func (*BaseInfosReply) ProtoMessage()    {}
func (*BaseInfosReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{1}
}
func (m *BaseInfosReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfosReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfosReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseInfosReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfosReply.Merge(m, src)
}
func (m *BaseInfosReply) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfosReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfosReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfosReply proto.InternalMessageInfo

func (m *BaseInfosReply) GetBaseInfos() map[int64]*BaseInfoReply {
	if m != nil {
		return m.BaseInfos
	}
	return nil
}

type ProfileReply struct {
	ID       int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"user_name"`
	// Types that are valid to be assigned to Gender:
	//	*ProfileReply_GenderValue
	Gender isProfileReply_Gender `protobuf_oneof:"Gender"`
	// Types that are valid to be assigned to Location:
	//	*ProfileReply_LocationValue
	Location isProfileReply_Location `protobuf_oneof:"Location"`
	// Types that are valid to be assigned to LocationString:
	//	*ProfileReply_LocationStringValue
	LocationString       isProfileReply_LocationString `protobuf_oneof:"LocationString"`
	Avatar               string                        `protobuf:"bytes,6,opt,name=Avatar,proto3" json:"avatar"`
	IDCert               bool                          `protobuf:"varint,7,opt,name=IDCert,proto3" json:"id_cert"`
	WorkCert             bool                          `protobuf:"varint,8,opt,name=WorkCert,proto3" json:"work_cert"`
	IsOrg                bool                          `protobuf:"varint,9,opt,name=IsOrg,proto3" json:"is_org"`
	IsVIP                bool                          `protobuf:"varint,10,opt,name=IsVIP,proto3" json:"is_vip"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ProfileReply) Reset()         { *m = ProfileReply{} }
func (m *ProfileReply) String() string { return proto.CompactTextString(m) }
func (*ProfileReply) ProtoMessage()    {}
func (*ProfileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{2}
}
func (m *ProfileReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileReply.Merge(m, src)
}
func (m *ProfileReply) XXX_Size() int {
	return m.Size()
}
func (m *ProfileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileReply proto.InternalMessageInfo

type isProfileReply_Gender interface {
	isProfileReply_Gender()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProfileReply_Location interface {
	isProfileReply_Location()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProfileReply_LocationString interface {
	isProfileReply_LocationString()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProfileReply_GenderValue struct {
	GenderValue int32 `protobuf:"varint,3,opt,name=GenderValue,proto3,oneof"`
}
type ProfileReply_LocationValue struct {
	LocationValue int64 `protobuf:"varint,4,opt,name=LocationValue,proto3,oneof"`
}
type ProfileReply_LocationStringValue struct {
	LocationStringValue string `protobuf:"bytes,5,opt,name=LocationStringValue,proto3,oneof"`
}

func (*ProfileReply_GenderValue) isProfileReply_Gender()                 {}
func (*ProfileReply_LocationValue) isProfileReply_Location()             {}
func (*ProfileReply_LocationStringValue) isProfileReply_LocationString() {}

func (m *ProfileReply) GetGender() isProfileReply_Gender {
	if m != nil {
		return m.Gender
	}
	return nil
}
func (m *ProfileReply) GetLocation() isProfileReply_Location {
	if m != nil {
		return m.Location
	}
	return nil
}
func (m *ProfileReply) GetLocationString() isProfileReply_LocationString {
	if m != nil {
		return m.LocationString
	}
	return nil
}

func (m *ProfileReply) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ProfileReply) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ProfileReply) GetGenderValue() int32 {
	if x, ok := m.GetGender().(*ProfileReply_GenderValue); ok {
		return x.GenderValue
	}
	return 0
}

func (m *ProfileReply) GetLocationValue() int64 {
	if x, ok := m.GetLocation().(*ProfileReply_LocationValue); ok {
		return x.LocationValue
	}
	return 0
}

func (m *ProfileReply) GetLocationStringValue() string {
	if x, ok := m.GetLocationString().(*ProfileReply_LocationStringValue); ok {
		return x.LocationStringValue
	}
	return ""
}

func (m *ProfileReply) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *ProfileReply) GetIDCert() bool {
	if m != nil {
		return m.IDCert
	}
	return false
}

func (m *ProfileReply) GetWorkCert() bool {
	if m != nil {
		return m.WorkCert
	}
	return false
}

func (m *ProfileReply) GetIsOrg() bool {
	if m != nil {
		return m.IsOrg
	}
	return false
}

func (m *ProfileReply) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProfileReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProfileReply_OneofMarshaler, _ProfileReply_OneofUnmarshaler, _ProfileReply_OneofSizer, []interface{}{
		(*ProfileReply_GenderValue)(nil),
		(*ProfileReply_LocationValue)(nil),
		(*ProfileReply_LocationStringValue)(nil),
	}
}

func _ProfileReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProfileReply)
	// Gender
	switch x := m.Gender.(type) {
	case *ProfileReply_GenderValue:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.GenderValue))
	case nil:
	default:
		return fmt.Errorf("ProfileReply.Gender has unexpected type %T", x)
	}
	// Location
	switch x := m.Location.(type) {
	case *ProfileReply_LocationValue:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.LocationValue))
	case nil:
	default:
		return fmt.Errorf("ProfileReply.Location has unexpected type %T", x)
	}
	// LocationString
	switch x := m.LocationString.(type) {
	case *ProfileReply_LocationStringValue:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.LocationStringValue)
	case nil:
	default:
		return fmt.Errorf("ProfileReply.LocationString has unexpected type %T", x)
	}
	return nil
}

func _ProfileReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProfileReply)
	switch tag {
	case 3: // Gender.GenderValue
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Gender = &ProfileReply_GenderValue{int32(x)}
		return true, err
	case 4: // Location.LocationValue
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Location = &ProfileReply_LocationValue{int64(x)}
		return true, err
	case 5: // LocationString.LocationStringValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LocationString = &ProfileReply_LocationStringValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProfileReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProfileReply)
	// Gender
	switch x := m.Gender.(type) {
	case *ProfileReply_GenderValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.GenderValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// Location
	switch x := m.Location.(type) {
	case *ProfileReply_LocationValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.LocationValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// LocationString
	switch x := m.LocationString.(type) {
	case *ProfileReply_LocationStringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.LocationStringValue)))
		n += len(x.LocationStringValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AidReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid"`
	RemoteIP             string   `protobuf:"bytes,2,opt,name=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AidReq) Reset()         { *m = AidReq{} }
func (m *AidReq) String() string { return proto.CompactTextString(m) }
func (*AidReq) ProtoMessage()    {}
func (*AidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{3}
}
func (m *AidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AidReq.Merge(m, src)
}
func (m *AidReq) XXX_Size() int {
	return m.Size()
}
func (m *AidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AidReq.DiscardUnknown(m)
}

var xxx_messageInfo_AidReq proto.InternalMessageInfo

func (m *AidReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AidReq) GetRemoteIP() string {
	if m != nil {
		return m.RemoteIP
	}
	return ""
}

type AidsReq struct {
	// aid 列表
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids"`
	RemoteIP             string   `protobuf:"bytes,2,opt,name=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AidsReq) Reset()         { *m = AidsReq{} }
func (m *AidsReq) String() string { return proto.CompactTextString(m) }
func (*AidsReq) ProtoMessage()    {}
func (*AidsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{4}
}
func (m *AidsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AidsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AidsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AidsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AidsReq.Merge(m, src)
}
func (m *AidsReq) XXX_Size() int {
	return m.Size()
}
func (m *AidsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AidsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AidsReq proto.InternalMessageInfo

func (m *AidsReq) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

func (m *AidsReq) GetRemoteIP() string {
	if m != nil {
		return m.RemoteIP
	}
	return ""
}

func init() {
	proto.RegisterType((*BaseInfoReply)(nil), "service.account.BaseInfoReply")
	proto.RegisterType((*BaseInfosReply)(nil), "service.account.BaseInfosReply")
	proto.RegisterMapType((map[int64]*BaseInfoReply)(nil), "service.account.BaseInfosReply.BaseInfosEntry")
	proto.RegisterType((*ProfileReply)(nil), "service.account.ProfileReply")
	proto.RegisterType((*AidReq)(nil), "service.account.AidReq")
	proto.RegisterType((*AidsReq)(nil), "service.account.AidsReq")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0xed, 0xc6, 0x71, 0x26, 0xfd, 0x63, 0x2b, 0x81, 0x89, 0x50, 0x1c, 0x85, 0x4b, 0x38,
	0xe0, 0x4a, 0xa5, 0x07, 0xc4, 0x2d, 0x26, 0xd0, 0x5a, 0xa2, 0x50, 0x16, 0x51, 0x24, 0x84, 0x14,
	0x6d, 0xec, 0xad, 0x59, 0x35, 0xf1, 0x86, 0xb5, 0x13, 0xd4, 0x27, 0xe1, 0x69, 0xb8, 0x71, 0xe0,
	0xc8, 0x13, 0x58, 0x55, 0x8f, 0x7e, 0x0a, 0xe4, 0xdd, 0xb8, 0x34, 0x50, 0x54, 0x6e, 0x88, 0x8b,
	0xb5, 0x33, 0xdf, 0x37, 0x33, 0x3b, 0x33, 0xdf, 0x1a, 0xec, 0xe9, 0xc8, 0x9b, 0x4a, 0x91, 0x09,
	0xbc, 0x91, 0x32, 0x39, 0xe7, 0x21, 0xf3, 0x68, 0x18, 0x8a, 0x59, 0x92, 0xb5, 0x1e, 0xc4, 0x3c,
	0xfb, 0x30, 0x1b, 0x79, 0xa1, 0x98, 0x6c, 0xc7, 0x22, 0x16, 0xdb, 0x8a, 0x37, 0x9a, 0x1d, 0x2b,
	0x4b, 0x19, 0xea, 0xa4, 0xe3, 0xbb, 0x5f, 0x0d, 0x58, 0xf3, 0x69, 0xca, 0x82, 0xe4, 0x58, 0x10,
	0x36, 0x1d, 0x9f, 0xe2, 0x5b, 0x60, 0x04, 0x03, 0x07, 0x75, 0x50, 0xcf, 0xf4, 0xad, 0x22, 0x77,
	0x0d, 0x1e, 0x11, 0x23, 0x18, 0xe0, 0xfb, 0x60, 0xbf, 0x49, 0x99, 0x7c, 0x41, 0x27, 0xcc, 0x31,
	0x3a, 0xa8, 0xd7, 0xf0, 0xd7, 0x8a, 0xdc, 0x6d, 0xcc, 0x52, 0x26, 0x87, 0x09, 0x9d, 0x30, 0x72,
	0x01, 0x63, 0x0f, 0x9a, 0x7b, 0x2c, 0x89, 0x98, 0x3c, 0xa2, 0xe3, 0x19, 0x73, 0xcc, 0x0e, 0xea,
	0xd5, 0x7c, 0x28, 0x72, 0xd7, 0x8a, 0x95, 0x7b, 0xff, 0x06, 0xb9, 0x4c, 0xc0, 0x5d, 0xb0, 0xfa,
	0x73, 0x9a, 0x51, 0xe9, 0x58, 0x2a, 0xb1, 0xa2, 0x52, 0xe5, 0x21, 0x0b, 0x04, 0xdf, 0x03, 0x2b,
	0x18, 0x3c, 0x61, 0x32, 0x73, 0xea, 0x1d, 0xd4, 0xb3, 0xfd, 0x66, 0x91, 0xbb, 0x75, 0x1e, 0x0d,
	0x43, 0x26, 0x33, 0xb2, 0x80, 0xca, 0x3b, 0xbe, 0x15, 0xf2, 0x44, 0xd1, 0x6c, 0x45, 0x53, 0x77,
	0xfc, 0x24, 0xe4, 0x89, 0x26, 0x5e, 0xc0, 0xb8, 0x03, 0xb5, 0x20, 0x7d, 0x29, 0x63, 0xa7, 0xa1,
	0x78, 0xaa, 0x24, 0x4f, 0x87, 0x42, 0xc6, 0x44, 0x03, 0x9a, 0x71, 0x14, 0x1c, 0x3a, 0xb0, 0xc4,
	0x98, 0xf3, 0x29, 0xd1, 0x80, 0x6f, 0x83, 0xa5, 0xdb, 0xe8, 0x7e, 0x41, 0xb0, 0x5e, 0x8d, 0x31,
	0xd5, 0x73, 0x3c, 0x00, 0x18, 0xd1, 0x94, 0x0d, 0x79, 0xe9, 0x72, 0x50, 0xc7, 0xec, 0x35, 0x77,
	0x3c, 0xef, 0x97, 0x75, 0x79, 0xcb, 0x41, 0x3f, 0xcd, 0xa7, 0x49, 0x26, 0x4f, 0x49, 0x63, 0x54,
	0xd9, 0xad, 0xf7, 0x97, 0x0a, 0x28, 0x10, 0x6f, 0x82, 0x79, 0xc2, 0x4e, 0xf5, 0xa6, 0x48, 0x79,
	0xc4, 0xbb, 0x50, 0x9b, 0xab, 0x89, 0x97, 0xfb, 0x69, 0xee, 0xb4, 0xff, 0x58, 0x4d, 0x15, 0x23,
	0x9a, 0xfc, 0xd8, 0x78, 0x84, 0xba, 0x67, 0x26, 0xac, 0x1e, 0x4a, 0x71, 0xcc, 0xc7, 0xec, 0x9f,
	0xa9, 0x60, 0x17, 0xd6, 0x9e, 0x8b, 0x90, 0x66, 0x5c, 0x24, 0x3a, 0x62, 0x45, 0x55, 0x5f, 0x2d,
	0x72, 0xd7, 0x1e, 0x2f, 0x80, 0x7d, 0x44, 0x96, 0x49, 0x78, 0x0f, 0xb6, 0x2a, 0xc7, 0xeb, 0x4c,
	0xf2, 0x24, 0xd6, 0xb1, 0x35, 0x75, 0xb7, 0xad, 0x22, 0x77, 0x37, 0xaa, 0xd8, 0x61, 0xaa, 0xf0,
	0x7d, 0x83, 0x5c, 0x15, 0xf1, 0xff, 0x8b, 0xd0, 0x07, 0xb0, 0xab, 0xc6, 0xfc, 0x4d, 0x58, 0x5f,
	0x6e, 0xb2, 0x7b, 0x00, 0x56, 0x9f, 0x47, 0x84, 0x7d, 0xc4, 0x77, 0xc0, 0xa4, 0x3c, 0x5a, 0x2c,
	0xb7, 0x5e, 0xe4, 0x6e, 0x69, 0x92, 0xf2, 0x83, 0x7b, 0x60, 0x4b, 0x36, 0x11, 0x19, 0x0b, 0x0e,
	0x17, 0xeb, 0x55, 0xe3, 0xaf, 0x7c, 0xe4, 0xe2, 0xd4, 0x7d, 0x05, 0xf5, 0x3e, 0x8f, 0xd2, 0x32,
	0xdf, 0x5d, 0x58, 0xa1, 0x3c, 0xd2, 0x1a, 0x37, 0x7d, 0xbb, 0xc8, 0x5d, 0x65, 0x13, 0xf5, 0xfd,
	0xfb, 0x94, 0x3b, 0x9f, 0x11, 0xd4, 0xfb, 0x5a, 0xa9, 0x78, 0x00, 0x0d, 0x9f, 0xa6, 0x3c, 0x2c,
	0xd5, 0x8a, 0x6f, 0xff, 0x26, 0x64, 0xdd, 0x49, 0xeb, 0x1a, 0x85, 0xe3, 0x67, 0x2a, 0x8b, 0x7e,
	0x34, 0xd8, 0xb9, 0x2a, 0x4b, 0xd9, 0x40, 0xcb, 0xbd, 0xe6, 0x59, 0xfa, 0x37, 0xbf, 0x9d, 0xb7,
	0xd1, 0xf7, 0xf3, 0x36, 0x3a, 0x3b, 0x6f, 0xa3, 0x77, 0x26, 0x9d, 0xf2, 0x91, 0xa5, 0xfe, 0x9f,
	0x0f, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x96, 0xec, 0x05, 0x9d, 0x8b, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountClient interface {
	BasicInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*BaseInfoReply, error)
	BaseInfos(ctx context.Context, in *AidsReq, opts ...grpc.CallOption) (*BaseInfosReply, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) BasicInfo(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*BaseInfoReply, error) {
	out := new(BaseInfoReply)
	err := c.cc.Invoke(ctx, "/service.account.Account/BasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) BaseInfos(ctx context.Context, in *AidsReq, opts ...grpc.CallOption) (*BaseInfosReply, error) {
	out := new(BaseInfosReply)
	err := c.cc.Invoke(ctx, "/service.account.Account/BaseInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
type AccountServer interface {
	BasicInfo(context.Context, *AidReq) (*BaseInfoReply, error)
	BaseInfos(context.Context, *AidsReq) (*BaseInfosReply, error)
}

// UnimplementedAccountServer can be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (*UnimplementedAccountServer) BasicInfo(ctx context.Context, req *AidReq) (*BaseInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicInfo not implemented")
}
func (*UnimplementedAccountServer) BaseInfos(ctx context.Context, req *AidsReq) (*BaseInfosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseInfos not implemented")
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_BasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).BasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/BasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).BasicInfo(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_BaseInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).BaseInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.account.Account/BaseInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).BaseInfos(ctx, req.(*AidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BasicInfo",
			Handler:    _Account_BasicInfo_Handler,
		},
		{
			MethodName: "BaseInfos",
			Handler:    _Account_BaseInfos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}

func (m *BaseInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Gender != nil {
		nn1, err1 := m.Gender.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += nn1
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.IDCert {
		dAtA[i] = 0x38
		i++
		if m.IDCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WorkCert {
		dAtA[i] = 0x40
		i++
		if m.WorkCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOrg {
		dAtA[i] = 0x48
		i++
		if m.IsOrg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsVIP {
		dAtA[i] = 0x50
		i++
		if m.IsVIP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BaseInfoReply_GenderValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintPb(dAtA, i, uint64(m.GenderValue))
	return i, nil
}
func (m *BaseInfosReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfosReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseInfos) > 0 {
		for k, _ := range m.BaseInfos {
			dAtA[i] = 0xa
			i++
			v := m.BaseInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPb(uint64(msgSize))
			}
			mapSize := 1 + sovPb(uint64(k)) + msgSize
			i = encodeVarintPb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintPb(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPb(dAtA, i, uint64(v.Size()))
				n2, err2 := v.MarshalTo(dAtA[i:])
				if err2 != nil {
					return 0, err2
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProfileReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Gender != nil {
		nn3, err3 := m.Gender.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += nn3
	}
	if m.Location != nil {
		nn4, err4 := m.Location.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += nn4
	}
	if m.LocationString != nil {
		nn5, err5 := m.LocationString.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += nn5
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.IDCert {
		dAtA[i] = 0x38
		i++
		if m.IDCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WorkCert {
		dAtA[i] = 0x40
		i++
		if m.WorkCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOrg {
		dAtA[i] = 0x48
		i++
		if m.IsOrg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsVIP {
		dAtA[i] = 0x50
		i++
		if m.IsVIP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProfileReply_GenderValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintPb(dAtA, i, uint64(m.GenderValue))
	return i, nil
}
func (m *ProfileReply_LocationValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintPb(dAtA, i, uint64(m.LocationValue))
	return i, nil
}
func (m *ProfileReply_LocationStringValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPb(dAtA, i, uint64(len(m.LocationStringValue)))
	i += copy(dAtA[i:], m.LocationStringValue)
	return i, nil
}
func (m *AidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Aid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
	}
	if len(m.RemoteIP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPb(dAtA, i, uint64(len(m.RemoteIP)))
		i += copy(dAtA[i:], m.RemoteIP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AidsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AidsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Aids) > 0 {
		dAtA7 := make([]byte, len(m.Aids)*10)
		var j6 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPb(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.RemoteIP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPb(dAtA, i, uint64(len(m.RemoteIP)))
		i += copy(dAtA[i:], m.RemoteIP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BaseInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Gender != nil {
		n += m.Gender.Size()
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IDCert {
		n += 2
	}
	if m.WorkCert {
		n += 2
	}
	if m.IsOrg {
		n += 2
	}
	if m.IsVIP {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseInfoReply_GenderValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.GenderValue))
	return n
}
func (m *BaseInfosReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BaseInfos) > 0 {
		for k, v := range m.BaseInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPb(uint64(l))
			}
			mapEntrySize := 1 + sovPb(uint64(k)) + l
			n += mapEntrySize + 1 + sovPb(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProfileReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Gender != nil {
		n += m.Gender.Size()
	}
	if m.Location != nil {
		n += m.Location.Size()
	}
	if m.LocationString != nil {
		n += m.LocationString.Size()
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.IDCert {
		n += 2
	}
	if m.WorkCert {
		n += 2
	}
	if m.IsOrg {
		n += 2
	}
	if m.IsVIP {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProfileReply_GenderValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.GenderValue))
	return n
}
func (m *ProfileReply_LocationValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.LocationValue))
	return n
}
func (m *ProfileReply_LocationStringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocationStringValue)
	n += 1 + l + sovPb(uint64(l))
	return n
}
func (m *AidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	l = len(m.RemoteIP)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AidsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovPb(uint64(e))
		}
		n += 1 + sovPb(uint64(l)) + l
	}
	l = len(m.RemoteIP)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenderValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gender = &BaseInfoReply_GenderValue{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IDCert = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkCert = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrg = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVIP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVIP = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfosReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfosReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfosReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfos == nil {
				m.BaseInfos = make(map[int64]*BaseInfoReply)
			}
			var mapkey int64
			var mapvalue *BaseInfoReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BaseInfoReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BaseInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenderValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gender = &ProfileReply_GenderValue{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = &ProfileReply_LocationValue{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationStringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationString = &ProfileReply_LocationStringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IDCert = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkCert = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOrg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOrg = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVIP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVIP = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AidsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AidsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AidsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb   = fmt.Errorf("proto: integer overflow")
)
