syntax = "proto3";
package service.account;
option go_package = "api";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message EmptyStruct {
}

message BaseInfoReply {
    int64 ID = 1 ;

    string UserName  = 2 ;

    int32  Gender = 3 ;

    string  Introduction = 4 ;

    string Avatar  = 5 ;

    bool IDCert  = 6 ;

    bool WorkCert  = 7 ;

    bool IsOrg  = 8 ;

    bool IsVIP  = 9 ;

    string Role = 10;
}

message BaseInfosReply {
    // member基本信息集合
    map<int64, BaseInfoReply> base_infos = 1;
}

message SettingReq {
    int64 Aid = 1;
    map<string, bool> Settings = 2;
    string Language = 3;
    bool UseMaster = 4;
}

message SelfProfile {
    int64 ID = 1;

    string Mobile = 2;

    string Email = 3;

    string Prefix = 4;

    string UserName  = 5 ;

    int32  Gender = 6 ;

    int32 BirthYear = 7;
    int32 BirthMonth = 8;
    int32 BirthDay = 9;

    string  Introduction = 10;

    string Avatar  = 11;

    int32 Source  = 12;

    int64  Location = 13;

    string  LocationString = 14;

    bool IDCert  = 15;

    int32 IDCertStatus = 16;

    bool WorkCert  = 17;

	int32 WorkCertStatus = 18;

    string IP = 19;

    bool IsOrg  = 20;

    bool IsVIP  = 21;

    string Role = 22;

    int64 CreatedAt  = 23 ;

    int64 UpdatedAt  = 24 ;

    AccountStatInfo Stat = 25 ;

    Setting Setting = 26;

    string Company = 27;

    string Position = 28;
}


message Setting {
    bool ActivityLike = 1;
    bool ActivityComment = 2;
    bool ActivityFollowTopic= 3;
    bool ActivityFollowMember= 4;
    bool NotifyLike = 5;
    bool NotifyComment = 6;
    bool NotifyNewFans= 7;
    bool NotifyNewMember= 8;
    string Language = 9;
}


message AccountStatInfo {
    int32 FollowingCount = 1 ;

    int32 FansCount = 2 ;

    int32 BlackCount = 3 ;

    int32 TopicCount  = 4 ;

    int32 ArticleCount  = 5 ;

    int32 DiscussionCount  = 6 ;
}

message MemberInfoReply {
    int64 ID = 1;

    string UserName  = 2 ;

    int32  Gender = 3 ;

    string  Introduction = 4 ;

    int64  Location = 5 ;

    string  LocationString = 6 ;

    string Avatar  = 7 ;

    bool IDCert  = 8 ;

    bool WorkCert  = 9 ;

    bool IsOrg  = 10 ;

    bool IsVIP  = 11 ;

    int64 CreatedAt  = 12 ;

    AccountStatInfo Stat = 13 ;

    string Company = 14;

    string Position = 15;

    bool IsLock = 16;
}



message AidReq {
    int64 aid = 1 ;
    string remoteIP = 2 ;
    bool UseMaster = 3;
}

message AidResp {
    int64 aid = 1 ;
}

message AnnulReq {
    int64 aid = 1 ;
    bool UseMaster = 3;
}

message EmailReq {
    string email = 1 ;
    bool UseMaster = 2;
}

message MobileReq {
    string mobile = 1 ;
    string prefix = 2 ;
    bool UseMaster = 3;
}

message ExistResp {
    bool Exist = 1;
}

message AidsReq {
    // aid 列表
    repeated int64 aids = 1 ;
    string remoteIP = 2 ;
    bool UseMaster = 3;
}

message DBAccount {
    int64    ID                    = 1;
    string   Mobile                = 2;
    string   Email                 = 3;
    string   UserName              = 4;
    string   Role                  = 6;
    int32    Gender                = 8;
    int32    BirthYear             = 9;
    int32    BirthMonth            = 10;
    int32    BirthDay              = 11;
    int64    Location              = 12;
    string   Introduction          = 13;
    string   Avatar                = 14;
    int32    Source                = 15;
    int64    IP                    = 16;
    bool     IDCert                = 17;
    bool     WorkCert              = 18;
    bool     IsOrg                 = 19;
    bool     IsVIP                 = 20;
    int64    CreatedAt             = 21;
    int64    UpdatedAt             = 22;
    bool     IsLock                 = 23;
    string   Prefix                 = 24;
    bool     Deactive               = 25;
}

message AddAccountReq {
    int64    ID                    = 1;
    string   Mobile                = 2;
    string   Email                 = 3;
    string   UserName              = 4;
    string   Role                  = 6;
    int32    Gender                = 8;
    int32    BirthYear             = 9;
    int32    BirthMonth            = 10;
    int32    BirthDay              = 11;
    int64    Location              = 12;
    string   Introduction          = 13;
    string   Avatar                = 14;
    int32    Source                = 15;
    int64    IP                    = 16;
    bool     IDCert                = 17;
    bool     WorkCert              = 18;
    bool     IsOrg                 = 19;
    bool     IsVIP                 = 20;
    string Password = 23;
    string Salt = 24;
    string Prefix = 25;
}

message UpdateProfileReq {
    oneof Avatar {
        string AvatarValue  = 1;
    }

    oneof UserName {
        string UserNameValue  = 2;
    }

    oneof Gender {
        int32 GenderValue  = 3;
    }

    oneof Location {
        int64 LocationValue  = 4;
    }

    oneof BirthYear {
        int32 BirthYearValue  = 5;
    }

    oneof BirthMonth {
        int32 BirthMonthValue  = 6;
    }

    oneof BirthDay {
        int32 BirthDayValue  = 7;
    }

    oneof Introduction {
        string IntroductionValue  = 8;
    }

    oneof Password {
        string PasswordValue  = 9;
    }

    int64 Aid  = 10;
}

message ForgetPasswordReq {
	string Identity  = 1;
	string Valcode  = 2;
	string Prefix   = 3;
	int32 IdentityType  = 4;
}

message ForgetPasswordResp {
	string SessionID  = 1;
}

message ResetPasswordReq {
	string SessionID  = 1;
    string Password = 2;
}



service Account {
    rpc EmailExist(EmailReq) returns (ExistResp);

    rpc MobileExist(MobileReq) returns (ExistResp);

    rpc UpdateSetting(SettingReq) returns (EmptyStruct);

    rpc AddAccount(AddAccountReq) returns (SelfProfile);

    rpc AccountInfo(AidReq) returns (DBAccount);

    rpc GetAccountByEmail(EmailReq) returns (DBAccount);

    rpc GetAccountByMobile(MobileReq) returns (DBAccount);

    rpc MemberInfo(AidReq) returns (MemberInfoReply);

    rpc UpdateProfile(UpdateProfileReq) returns (EmptyStruct);

    rpc ForgetPassword(ForgetPasswordReq) returns (ForgetPasswordResp);

    rpc ResetPassword(ResetPasswordReq) returns (EmptyStruct);

    rpc SelfProfileInfo(AidReq) returns (SelfProfile);

    rpc BasicInfo(AidReq) returns (BaseInfoReply);

    rpc SettingInfo(AidReq) returns (Setting);

    rpc AccountStat(AidReq) returns (AccountStatInfo);

    rpc BaseInfos(AidsReq) returns (BaseInfosReply);

    rpc AccountLock(AidReq) returns (EmptyStruct);

    rpc AccountUnlock(AidReq) returns (EmptyStruct);
}
