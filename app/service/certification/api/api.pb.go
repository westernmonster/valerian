// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
type EmptyStruct struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(m, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

type AidReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=Aid,proto3" json:"aid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AidReq) Reset()         { *m = AidReq{} }
func (m *AidReq) String() string { return proto.CompactTextString(m) }
func (*AidReq) ProtoMessage()    {}
func (*AidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *AidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AidReq.Merge(m, src)
}
func (m *AidReq) XXX_Size() int {
	return m.Size()
}
func (m *AidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AidReq.DiscardUnknown(m)
}

var xxx_messageInfo_AidReq proto.InternalMessageInfo

func (m *AidReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type IDCertStatus struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDCertStatus) Reset()         { *m = IDCertStatus{} }
func (m *IDCertStatus) String() string { return proto.CompactTextString(m) }
func (*IDCertStatus) ProtoMessage()    {}
func (*IDCertStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *IDCertStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCertStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCertStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCertStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCertStatus.Merge(m, src)
}
func (m *IDCertStatus) XXX_Size() int {
	return m.Size()
}
func (m *IDCertStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCertStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IDCertStatus proto.InternalMessageInfo

func (m *IDCertStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type WorkCertStatus struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertStatus) Reset()         { *m = WorkCertStatus{} }
func (m *WorkCertStatus) String() string { return proto.CompactTextString(m) }
func (*WorkCertStatus) ProtoMessage()    {}
func (*WorkCertStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *WorkCertStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertStatus.Merge(m, src)
}
func (m *WorkCertStatus) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertStatus proto.InternalMessageInfo

func (m *WorkCertStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type IDCertInfo struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	AuditConclusions     string   `protobuf:"bytes,4,opt,name=AuditConclusions,proto3" json:"AuditConclusions,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	IdentificationNumber string   `protobuf:"bytes,6,opt,name=IdentificationNumber,proto3" json:"IdentificationNumber,omitempty"`
	IDCardType           string   `protobuf:"bytes,7,opt,name=IDCardType,proto3" json:"IDCardType,omitempty"`
	IDCardStartDate      string   `protobuf:"bytes,8,opt,name=IDCardStartDate,proto3" json:"IDCardStartDate,omitempty"`
	IDCardExpiry         string   `protobuf:"bytes,9,opt,name=IDCardExpiry,proto3" json:"IDCardExpiry,omitempty"`
	Address              string   `protobuf:"bytes,10,opt,name=Address,proto3" json:"Address,omitempty"`
	Sex                  string   `protobuf:"bytes,11,opt,name=Sex,proto3" json:"Sex,omitempty"`
	IDCardFrontPic       string   `protobuf:"bytes,12,opt,name=IDCardFrontPic,proto3" json:"IDCardFrontPic,omitempty"`
	IDCardBackPic        string   `protobuf:"bytes,13,opt,name=IDCardBackPic,proto3" json:"IDCardBackPic,omitempty"`
	FacePic              string   `protobuf:"bytes,14,opt,name=FacePic,proto3" json:"FacePic,omitempty"`
	EthnicGroup          string   `protobuf:"bytes,15,opt,name=EthnicGroup,proto3" json:"EthnicGroup,omitempty"`
	CreatedAt            int64    `protobuf:"varint,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDCertInfo) Reset()         { *m = IDCertInfo{} }
func (m *IDCertInfo) String() string { return proto.CompactTextString(m) }
func (*IDCertInfo) ProtoMessage()    {}
func (*IDCertInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *IDCertInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCertInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCertInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCertInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCertInfo.Merge(m, src)
}
func (m *IDCertInfo) XXX_Size() int {
	return m.Size()
}
func (m *IDCertInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCertInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IDCertInfo proto.InternalMessageInfo

func (m *IDCertInfo) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *IDCertInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *IDCertInfo) GetAuditConclusions() string {
	if m != nil {
		return m.AuditConclusions
	}
	return ""
}

func (m *IDCertInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IDCertInfo) GetIdentificationNumber() string {
	if m != nil {
		return m.IdentificationNumber
	}
	return ""
}

func (m *IDCertInfo) GetIDCardType() string {
	if m != nil {
		return m.IDCardType
	}
	return ""
}

func (m *IDCertInfo) GetIDCardStartDate() string {
	if m != nil {
		return m.IDCardStartDate
	}
	return ""
}

func (m *IDCertInfo) GetIDCardExpiry() string {
	if m != nil {
		return m.IDCardExpiry
	}
	return ""
}

func (m *IDCertInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IDCertInfo) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *IDCertInfo) GetIDCardFrontPic() string {
	if m != nil {
		return m.IDCardFrontPic
	}
	return ""
}

func (m *IDCertInfo) GetIDCardBackPic() string {
	if m != nil {
		return m.IDCardBackPic
	}
	return ""
}

func (m *IDCertInfo) GetFacePic() string {
	if m != nil {
		return m.FacePic
	}
	return ""
}

func (m *IDCertInfo) GetEthnicGroup() string {
	if m != nil {
		return m.EthnicGroup
	}
	return ""
}

func (m *IDCertInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *IDCertInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type WorkCertInfo struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	WorkPic              string   `protobuf:"bytes,4,opt,name=WorkPic,proto3" json:"WorkPic,omitempty"`
	OtherPic             string   `protobuf:"bytes,5,opt,name=OtherPic,proto3" json:"OtherPic,omitempty"`
	Company              string   `protobuf:"bytes,6,opt,name=Company,proto3" json:"Company,omitempty"`
	Department           string   `protobuf:"bytes,7,opt,name=Department,proto3" json:"Department,omitempty"`
	Position             string   `protobuf:"bytes,8,opt,name=Position,proto3" json:"Position,omitempty"`
	ExpiresAt            string   `protobuf:"bytes,9,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	AuditResult          string   `protobuf:"bytes,10,opt,name=AuditResult,proto3" json:"AuditResult,omitempty"`
	CreatedAt            int64    `protobuf:"varint,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkCertInfo) Reset()         { *m = WorkCertInfo{} }
func (m *WorkCertInfo) String() string { return proto.CompactTextString(m) }
func (*WorkCertInfo) ProtoMessage()    {}
func (*WorkCertInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *WorkCertInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkCertInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkCertInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkCertInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkCertInfo.Merge(m, src)
}
func (m *WorkCertInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkCertInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkCertInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkCertInfo proto.InternalMessageInfo

func (m *WorkCertInfo) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *WorkCertInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WorkCertInfo) GetWorkPic() string {
	if m != nil {
		return m.WorkPic
	}
	return ""
}

func (m *WorkCertInfo) GetOtherPic() string {
	if m != nil {
		return m.OtherPic
	}
	return ""
}

func (m *WorkCertInfo) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *WorkCertInfo) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *WorkCertInfo) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *WorkCertInfo) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

func (m *WorkCertInfo) GetAuditResult() string {
	if m != nil {
		return m.AuditResult
	}
	return ""
}

func (m *WorkCertInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *WorkCertInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyStruct)(nil), "service.certification.EmptyStruct")
	proto.RegisterType((*AidReq)(nil), "service.certification.AidReq")
	proto.RegisterType((*IDCertStatus)(nil), "service.certification.IDCertStatus")
	proto.RegisterType((*WorkCertStatus)(nil), "service.certification.WorkCertStatus")
	proto.RegisterType((*IDCertInfo)(nil), "service.certification.IDCertInfo")
	proto.RegisterType((*WorkCertInfo)(nil), "service.certification.WorkCertInfo")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6e, 0xd3, 0x3c,
	0x18, 0x56, 0xd6, 0xad, 0x5d, 0xdf, 0xad, 0xfb, 0xb1, 0xbe, 0x0f, 0x99, 0x09, 0xca, 0x94, 0xc1,
	0x54, 0x21, 0xd1, 0x49, 0xe3, 0x0a, 0xb2, 0x76, 0x9b, 0x7a, 0x32, 0xa6, 0x94, 0x09, 0xc1, 0x99,
	0xeb, 0x78, 0xab, 0xb5, 0x25, 0x0e, 0xce, 0x1b, 0xb4, 0xde, 0x08, 0xf7, 0xc3, 0x19, 0x07, 0x1c,
	0x70, 0x05, 0x08, 0xf5, 0x90, 0xab, 0x40, 0xb6, 0xd3, 0x36, 0x2d, 0x9b, 0x40, 0xda, 0x99, 0x9f,
	0x9f, 0x3c, 0x71, 0xfc, 0xbc, 0x31, 0xd4, 0x59, 0x2a, 0xdb, 0xa9, 0x56, 0xa8, 0xc8, 0xff, 0x99,
	0xd0, 0x9f, 0x24, 0x17, 0x6d, 0x2e, 0x34, 0xca, 0x4b, 0xc9, 0x19, 0x4a, 0x95, 0xec, 0xbc, 0xba,
	0x92, 0x38, 0xcc, 0x07, 0x6d, 0xae, 0xe2, 0x83, 0x2b, 0x75, 0xa5, 0x0e, 0xac, 0x7b, 0x90, 0x5f,
	0x5a, 0x64, 0x81, 0x5d, 0xb9, 0x14, 0xbf, 0x01, 0x6b, 0xc7, 0x71, 0x8a, 0xa3, 0x3e, 0xea, 0x9c,
	0xa3, 0xbf, 0x07, 0xd5, 0x40, 0x46, 0xa1, 0xf8, 0x48, 0x1e, 0x43, 0x25, 0x90, 0x11, 0xf5, 0x76,
	0xbd, 0x56, 0xe5, 0xa8, 0xf6, 0xeb, 0xc7, 0xb3, 0x0a, 0x93, 0x51, 0x68, 0x38, 0x7f, 0x1f, 0xd6,
	0x7b, 0xdd, 0x8e, 0xd0, 0xd8, 0x47, 0x86, 0x79, 0x46, 0x1e, 0x41, 0xd5, 0xad, 0xac, 0x7b, 0x25,
	0x2c, 0x90, 0xdf, 0x82, 0x8d, 0x77, 0x4a, 0x5f, 0xff, 0x83, 0xf3, 0xf3, 0x32, 0x80, 0x8b, 0xec,
	0x25, 0x97, 0x8a, 0x3c, 0x81, 0x7a, 0xc0, 0xb9, 0xca, 0x13, 0xec, 0x75, 0xdd, 0x0e, 0xc2, 0x19,
	0x51, 0x0a, 0x59, 0x2a, 0x87, 0x90, 0x97, 0xb0, 0x15, 0xe4, 0x91, 0xc4, 0x8e, 0x4a, 0xf8, 0x4d,
	0x9e, 0x49, 0x95, 0x64, 0x74, 0x79, 0xd7, 0x6b, 0xd5, 0xc3, 0x3f, 0x78, 0x42, 0x60, 0xf9, 0x8c,
	0xc5, 0x82, 0xae, 0x58, 0xdd, 0xae, 0xc9, 0x21, 0xfc, 0xd7, 0x8b, 0x44, 0x32, 0x3b, 0xcb, 0xb3,
	0x3c, 0x1e, 0x08, 0x4d, 0xab, 0xd6, 0x73, 0xa7, 0x46, 0x9a, 0x76, 0xdf, 0x4c, 0x47, 0x6f, 0x47,
	0xa9, 0xa0, 0x35, 0xeb, 0x2c, 0x31, 0xa4, 0x05, 0x9b, 0x0e, 0xf5, 0x91, 0x69, 0xec, 0x32, 0x14,
	0x74, 0xd5, 0x9a, 0x16, 0x69, 0xe2, 0xdb, 0x43, 0x65, 0x3a, 0x3a, 0xbe, 0x4d, 0xa5, 0x1e, 0xd1,
	0xba, 0xb5, 0xcd, 0x71, 0x84, 0x42, 0x2d, 0x88, 0x22, 0x2d, 0xb2, 0x8c, 0x82, 0x95, 0x27, 0x90,
	0x6c, 0x41, 0xa5, 0x2f, 0x6e, 0xe9, 0x9a, 0x65, 0xcd, 0x92, 0xec, 0xc3, 0x86, 0x7b, 0xf6, 0x44,
	0xab, 0x04, 0xcf, 0x25, 0xa7, 0xeb, 0x56, 0x5c, 0x60, 0xc9, 0x73, 0x68, 0x38, 0xe6, 0x88, 0xf1,
	0x6b, 0x63, 0x6b, 0x58, 0xdb, 0x3c, 0x69, 0xde, 0x7c, 0xc2, 0xb8, 0x30, 0xfa, 0x86, 0x7b, 0x73,
	0x01, 0xc9, 0x2e, 0xac, 0x1d, 0xe3, 0x30, 0x91, 0xfc, 0x54, 0xab, 0x3c, 0xa5, 0x9b, 0x56, 0x2d,
	0x53, 0xa6, 0xcd, 0x8e, 0x16, 0x0c, 0x45, 0x14, 0x20, 0xdd, 0x72, 0x6d, 0x4e, 0x09, 0xa3, 0x5e,
	0xa4, 0x51, 0xa1, 0x6e, 0x3b, 0x75, 0x4a, 0xf8, 0xdf, 0x96, 0x60, 0x7d, 0x32, 0x43, 0x0f, 0x18,
	0x0d, 0x0a, 0x35, 0x93, 0x62, 0xb6, 0xef, 0x26, 0x62, 0x02, 0xc9, 0x0e, 0xac, 0xbe, 0xc1, 0xa1,
	0xd0, 0x46, 0x72, 0xc3, 0x30, 0xc5, 0xe6, 0xa9, 0x8e, 0x8a, 0x53, 0x96, 0x8c, 0x8a, 0x19, 0x98,
	0x40, 0x53, 0x7b, 0x57, 0xa4, 0x4c, 0x63, 0x2c, 0x12, 0x9c, 0xd4, 0x3e, 0x63, 0x4c, 0xea, 0xb9,
	0xca, 0xa4, 0x19, 0x94, 0xa2, 0xef, 0x29, 0x36, 0x5f, 0x60, 0xeb, 0x14, 0x59, 0x80, 0x45, 0xcb,
	0x33, 0xc2, 0x1c, 0xa7, 0x1d, 0xd6, 0x50, 0x64, 0xf9, 0x0d, 0x16, 0x35, 0x97, 0xa9, 0x87, 0x1c,
	0xe7, 0xe1, 0x17, 0x0f, 0x1a, 0x9d, 0xf2, 0x75, 0x41, 0x2e, 0x60, 0xf3, 0x54, 0xe0, 0xdc, 0xef,
	0xfc, 0xb4, 0x7d, 0xe7, 0xcd, 0xd2, 0x76, 0x17, 0xc3, 0xce, 0xde, 0x3d, 0xf2, 0x5c, 0xc6, 0x7b,
	0xd8, 0x3e, 0x15, 0xb8, 0xf0, 0xf7, 0xff, 0x25, 0xf8, 0xc5, 0x3d, 0xf2, 0x7c, 0xca, 0xd1, 0xf6,
	0xd7, 0x71, 0xd3, 0xfb, 0x3e, 0x6e, 0x7a, 0x3f, 0xc7, 0x4d, 0xef, 0x43, 0x85, 0xa5, 0x72, 0x50,
	0xb5, 0x77, 0xd9, 0xeb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x34, 0xa2, 0x08, 0x95, 0x1e, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificationClient is the client API for Certification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificationClient interface {
	GetIDCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDCertStatus, error)
	GetWorkCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*WorkCertStatus, error)
}

type certificationClient struct {
	cc *grpc.ClientConn
}

func NewCertificationClient(cc *grpc.ClientConn) CertificationClient {
	return &certificationClient{cc}
}

func (c *certificationClient) GetIDCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDCertStatus, error) {
	out := new(IDCertStatus)
	err := c.cc.Invoke(ctx, "/service.certification.Certification/GetIDCertStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificationClient) GetWorkCertStatus(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*WorkCertStatus, error) {
	out := new(WorkCertStatus)
	err := c.cc.Invoke(ctx, "/service.certification.Certification/GetWorkCertStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificationServer is the server API for Certification service.
type CertificationServer interface {
	GetIDCertStatus(context.Context, *AidReq) (*IDCertStatus, error)
	GetWorkCertStatus(context.Context, *AidReq) (*WorkCertStatus, error)
}

// UnimplementedCertificationServer can be embedded to have forward compatible implementations.
type UnimplementedCertificationServer struct {
}

func (*UnimplementedCertificationServer) GetIDCertStatus(ctx context.Context, req *AidReq) (*IDCertStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDCertStatus not implemented")
}
func (*UnimplementedCertificationServer) GetWorkCertStatus(ctx context.Context, req *AidReq) (*WorkCertStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkCertStatus not implemented")
}

func RegisterCertificationServer(s *grpc.Server, srv CertificationServer) {
	s.RegisterService(&_Certification_serviceDesc, srv)
}

func _Certification_GetIDCertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificationServer).GetIDCertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.certification.Certification/GetIDCertStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificationServer).GetIDCertStatus(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certification_GetWorkCertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificationServer).GetWorkCertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.certification.Certification/GetWorkCertStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificationServer).GetWorkCertStatus(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Certification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.certification.Certification",
	HandlerType: (*CertificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIDCertStatus",
			Handler:    _Certification_GetIDCertStatus_Handler,
		},
		{
			MethodName: "GetWorkCertStatus",
			Handler:    _Certification_GetWorkCertStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDCertStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCertStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCertStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDCertInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCertInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCertInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.EthnicGroup) > 0 {
		i -= len(m.EthnicGroup)
		copy(dAtA[i:], m.EthnicGroup)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EthnicGroup)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.FacePic) > 0 {
		i -= len(m.FacePic)
		copy(dAtA[i:], m.FacePic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FacePic)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.IDCardBackPic) > 0 {
		i -= len(m.IDCardBackPic)
		copy(dAtA[i:], m.IDCardBackPic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IDCardBackPic)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.IDCardFrontPic) > 0 {
		i -= len(m.IDCardFrontPic)
		copy(dAtA[i:], m.IDCardFrontPic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IDCardFrontPic)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Sex) > 0 {
		i -= len(m.Sex)
		copy(dAtA[i:], m.Sex)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sex)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.IDCardExpiry) > 0 {
		i -= len(m.IDCardExpiry)
		copy(dAtA[i:], m.IDCardExpiry)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IDCardExpiry)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.IDCardStartDate) > 0 {
		i -= len(m.IDCardStartDate)
		copy(dAtA[i:], m.IDCardStartDate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IDCardStartDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IDCardType) > 0 {
		i -= len(m.IDCardType)
		copy(dAtA[i:], m.IDCardType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IDCardType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IdentificationNumber) > 0 {
		i -= len(m.IdentificationNumber)
		copy(dAtA[i:], m.IdentificationNumber)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IdentificationNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AuditConclusions) > 0 {
		i -= len(m.AuditConclusions)
		copy(dAtA[i:], m.AuditConclusions)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuditConclusions)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkCertInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkCertInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkCertInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.AuditResult) > 0 {
		i -= len(m.AuditResult)
		copy(dAtA[i:], m.AuditResult)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuditResult)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExpiresAt) > 0 {
		i -= len(m.ExpiresAt)
		copy(dAtA[i:], m.ExpiresAt)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExpiresAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OtherPic) > 0 {
		i -= len(m.OtherPic)
		copy(dAtA[i:], m.OtherPic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OtherPic)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WorkPic) > 0 {
		i -= len(m.WorkPic)
		copy(dAtA[i:], m.WorkPic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WorkPic)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDCertStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDCertInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovApi(uint64(m.AccountID))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.AuditConclusions)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IdentificationNumber)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IDCardType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IDCardStartDate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IDCardExpiry)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IDCardFrontPic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IDCardBackPic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FacePic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EthnicGroup)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovApi(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovApi(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkCertInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovApi(uint64(m.AccountID))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.WorkPic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OtherPic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExpiresAt)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AuditResult)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovApi(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovApi(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCertStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCertStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCertStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCertInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCertInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCertInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConclusions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditConclusions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentificationNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentificationNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardStartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardStartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardExpiry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardExpiry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardFrontPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardFrontPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCardBackPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCardBackPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FacePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FacePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthnicGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthnicGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkCertInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkCertInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkCertInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiresAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
