// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
type EmptyStruct struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{0}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(m, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

type Creator struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	UserName             string   `protobuf:"bytes,2,opt,name=UserName,proto3" json:"user_name"`
	Avatar               string   `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"avatar"`
	Introduction         string   `protobuf:"bytes,4,opt,name=Introduction,proto3" json:"introduction"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Creator) Reset()         { *m = Creator{} }
func (m *Creator) String() string { return proto.CompactTextString(m) }
func (*Creator) ProtoMessage()    {}
func (*Creator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{1}
}
func (m *Creator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Creator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Creator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Creator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Creator.Merge(m, src)
}
func (m *Creator) XXX_Size() int {
	return m.Size()
}
func (m *Creator) XXX_DiscardUnknown() {
	xxx_messageInfo_Creator.DiscardUnknown(m)
}

var xxx_messageInfo_Creator proto.InternalMessageInfo

func (m *Creator) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Creator) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Creator) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Creator) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

type DBArticle struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	ContentText          string   `protobuf:"bytes,4,opt,name=ContentText,proto3" json:"ContentText,omitempty"`
	DisableRevise        bool     `protobuf:"varint,5,opt,name=DisableRevise,proto3" json:"DisableRevise,omitempty"`
	DisableComment       bool     `protobuf:"varint,6,opt,name=DisableComment,proto3" json:"DisableComment,omitempty"`
	CreatedBy            int64    `protobuf:"varint,7,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	CreatedAt            int64    `protobuf:"varint,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,9,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBArticle) Reset()         { *m = DBArticle{} }
func (m *DBArticle) String() string { return proto.CompactTextString(m) }
func (*DBArticle) ProtoMessage()    {}
func (*DBArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{2}
}
func (m *DBArticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBArticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBArticle.Merge(m, src)
}
func (m *DBArticle) XXX_Size() int {
	return m.Size()
}
func (m *DBArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_DBArticle.DiscardUnknown(m)
}

var xxx_messageInfo_DBArticle proto.InternalMessageInfo

func (m *DBArticle) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DBArticle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DBArticle) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *DBArticle) GetContentText() string {
	if m != nil {
		return m.ContentText
	}
	return ""
}

func (m *DBArticle) GetDisableRevise() bool {
	if m != nil {
		return m.DisableRevise
	}
	return false
}

func (m *DBArticle) GetDisableComment() bool {
	if m != nil {
		return m.DisableComment
	}
	return false
}

func (m *DBArticle) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *DBArticle) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *DBArticle) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ArticlesResp struct {
	Items                []*DBArticle `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ArticlesResp) Reset()         { *m = ArticlesResp{} }
func (m *ArticlesResp) String() string { return proto.CompactTextString(m) }
func (*ArticlesResp) ProtoMessage()    {}
func (*ArticlesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{3}
}
func (m *ArticlesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticlesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticlesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticlesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticlesResp.Merge(m, src)
}
func (m *ArticlesResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticlesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticlesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticlesResp proto.InternalMessageInfo

func (m *ArticlesResp) GetItems() []*DBArticle {
	if m != nil {
		return m.Items
	}
	return nil
}

type ArticleInfo struct {
	ID        int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title     string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	Excerpt   string   `protobuf:"bytes,3,opt,name=Excerpt,proto3" json:"excerpt"`
	ImageUrls []string `protobuf:"bytes,4,rep,name=ImageUrls,proto3" json:"image_urls"`
	Creator   *Creator `protobuf:"bytes,5,opt,name=Creator,proto3" json:"creator"`
	// unix timestamp
	CreatedAt int64 `protobuf:"varint,6,opt,name=CreatedAt,proto3" json:"created_at"`
	// unix timestamp
	UpdatedAt            int64        `protobuf:"varint,7,opt,name=UpdatedAt,proto3" json:"updated_at"`
	Stat                 *ArticleStat `protobuf:"bytes,8,opt,name=Stat,proto3" json:"stat"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ArticleInfo) Reset()         { *m = ArticleInfo{} }
func (m *ArticleInfo) String() string { return proto.CompactTextString(m) }
func (*ArticleInfo) ProtoMessage()    {}
func (*ArticleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{4}
}
func (m *ArticleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleInfo.Merge(m, src)
}
func (m *ArticleInfo) XXX_Size() int {
	return m.Size()
}
func (m *ArticleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleInfo proto.InternalMessageInfo

func (m *ArticleInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArticleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ArticleInfo) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *ArticleInfo) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *ArticleInfo) GetCreator() *Creator {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ArticleInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ArticleInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ArticleInfo) GetStat() *ArticleStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

type ArticleStat struct {
	ReviseCount          int32    `protobuf:"varint,1,opt,name=ReviseCount,proto3" json:"revise_count"`
	LikeCount            int32    `protobuf:"varint,2,opt,name=LikeCount,proto3" json:"like_count"`
	DislikeCount         int32    `protobuf:"varint,3,opt,name=DislikeCount,proto3" json:"dislike_count"`
	CommentCount         int32    `protobuf:"varint,4,opt,name=CommentCount,proto3" json:"comment_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleStat) Reset()         { *m = ArticleStat{} }
func (m *ArticleStat) String() string { return proto.CompactTextString(m) }
func (*ArticleStat) ProtoMessage()    {}
func (*ArticleStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{5}
}
func (m *ArticleStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleStat.Merge(m, src)
}
func (m *ArticleStat) XXX_Size() int {
	return m.Size()
}
func (m *ArticleStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleStat.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleStat proto.InternalMessageInfo

func (m *ArticleStat) GetReviseCount() int32 {
	if m != nil {
		return m.ReviseCount
	}
	return 0
}

func (m *ArticleStat) GetLikeCount() int32 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *ArticleStat) GetDislikeCount() int32 {
	if m != nil {
		return m.DislikeCount
	}
	return 0
}

func (m *ArticleStat) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

type ReviseStat struct {
	LikeCount            int32    `protobuf:"varint,2,opt,name=LikeCount,proto3" json:"like_count"`
	DislikeCount         int32    `protobuf:"varint,3,opt,name=DislikeCount,proto3" json:"dislike_count"`
	CommentCount         int32    `protobuf:"varint,4,opt,name=CommentCount,proto3" json:"comment_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReviseStat) Reset()         { *m = ReviseStat{} }
func (m *ReviseStat) String() string { return proto.CompactTextString(m) }
func (*ReviseStat) ProtoMessage()    {}
func (*ReviseStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{6}
}
func (m *ReviseStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReviseStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReviseStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReviseStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviseStat.Merge(m, src)
}
func (m *ReviseStat) XXX_Size() int {
	return m.Size()
}
func (m *ReviseStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviseStat.DiscardUnknown(m)
}

var xxx_messageInfo_ReviseStat proto.InternalMessageInfo

func (m *ReviseStat) GetLikeCount() int32 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *ReviseStat) GetDislikeCount() int32 {
	if m != nil {
		return m.DislikeCount
	}
	return 0
}

func (m *ReviseStat) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

type ReviseInfo struct {
	ID        int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title     string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	Excerpt   string   `protobuf:"bytes,3,opt,name=Excerpt,proto3" json:"excerpt"`
	ImageUrls []string `protobuf:"bytes,4,rep,name=ImageUrls,proto3" json:"image_urls"`
	Creator   *Creator `protobuf:"bytes,5,opt,name=Creator,proto3" json:"creator"`
	// unix timestamp
	CreatedAt int64 `protobuf:"varint,6,opt,name=CreatedAt,proto3" json:"created_at"`
	// unix timestamp
	UpdatedAt            int64       `protobuf:"varint,7,opt,name=UpdatedAt,proto3" json:"updated_at"`
	Stat                 *ReviseStat `protobuf:"bytes,8,opt,name=Stat,proto3" json:"stat"`
	ArticleID            int64       `protobuf:"varint,9,opt,name=ArticleID,proto3" json:"article_id"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReviseInfo) Reset()         { *m = ReviseInfo{} }
func (m *ReviseInfo) String() string { return proto.CompactTextString(m) }
func (*ReviseInfo) ProtoMessage()    {}
func (*ReviseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{7}
}
func (m *ReviseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReviseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReviseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReviseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviseInfo.Merge(m, src)
}
func (m *ReviseInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReviseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReviseInfo proto.InternalMessageInfo

func (m *ReviseInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ReviseInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReviseInfo) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *ReviseInfo) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *ReviseInfo) GetCreator() *Creator {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ReviseInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ReviseInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ReviseInfo) GetStat() *ReviseStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *ReviseInfo) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

type IDReq struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDReq) Reset()         { *m = IDReq{} }
func (m *IDReq) String() string { return proto.CompactTextString(m) }
func (*IDReq) ProtoMessage()    {}
func (*IDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{8}
}
func (m *IDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDReq.Merge(m, src)
}
func (m *IDReq) XXX_Size() int {
	return m.Size()
}
func (m *IDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IDReq.DiscardUnknown(m)
}

var xxx_messageInfo_IDReq proto.InternalMessageInfo

func (m *IDReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type UserArticlesReq struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"aid"`
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,proto3" json:"limit"`
	Offset               int32    `protobuf:"varint,3,opt,name=Offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserArticlesReq) Reset()         { *m = UserArticlesReq{} }
func (m *UserArticlesReq) String() string { return proto.CompactTextString(m) }
func (*UserArticlesReq) ProtoMessage()    {}
func (*UserArticlesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{9}
}
func (m *UserArticlesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserArticlesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserArticlesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserArticlesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserArticlesReq.Merge(m, src)
}
func (m *UserArticlesReq) XXX_Size() int {
	return m.Size()
}
func (m *UserArticlesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserArticlesReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserArticlesReq proto.InternalMessageInfo

func (m *UserArticlesReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *UserArticlesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UserArticlesReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type UserArticlesResp struct {
	Items                []*ArticleInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UserArticlesResp) Reset()         { *m = UserArticlesResp{} }
func (m *UserArticlesResp) String() string { return proto.CompactTextString(m) }
func (*UserArticlesResp) ProtoMessage()    {}
func (*UserArticlesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{10}
}
func (m *UserArticlesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserArticlesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserArticlesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserArticlesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserArticlesResp.Merge(m, src)
}
func (m *UserArticlesResp) XXX_Size() int {
	return m.Size()
}
func (m *UserArticlesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserArticlesResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserArticlesResp proto.InternalMessageInfo

func (m *UserArticlesResp) GetItems() []*ArticleInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyStruct)(nil), "service.article.EmptyStruct")
	proto.RegisterType((*Creator)(nil), "service.article.Creator")
	proto.RegisterType((*DBArticle)(nil), "service.article.DBArticle")
	proto.RegisterType((*ArticlesResp)(nil), "service.article.ArticlesResp")
	proto.RegisterType((*ArticleInfo)(nil), "service.article.ArticleInfo")
	proto.RegisterType((*ArticleStat)(nil), "service.article.ArticleStat")
	proto.RegisterType((*ReviseStat)(nil), "service.article.ReviseStat")
	proto.RegisterType((*ReviseInfo)(nil), "service.article.ReviseInfo")
	proto.RegisterType((*IDReq)(nil), "service.article.IDReq")
	proto.RegisterType((*UserArticlesReq)(nil), "service.article.UserArticlesReq")
	proto.RegisterType((*UserArticlesResp)(nil), "service.article.UserArticlesResp")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0x96, 0xe3, 0xfc, 0xb9, 0x32, 0x99, 0xdd, 0x6d, 0xad, 0x90, 0x15, 0x96, 0x71, 0xb0, 0x58,
	0x14, 0xa4, 0x21, 0x8b, 0x02, 0x1c, 0x40, 0x42, 0x10, 0x4f, 0x96, 0x51, 0xa4, 0xe5, 0xaf, 0x77,
	0xe7, 0x02, 0x87, 0xc8, 0x71, 0x7a, 0x42, 0x6b, 0xed, 0xd8, 0x6b, 0x77, 0x46, 0xbb, 0x07, 0x1e,
	0x83, 0x3b, 0x27, 0xc4, 0xa3, 0x70, 0x84, 0x07, 0xc0, 0x42, 0x73, 0xf4, 0x99, 0x07, 0x40, 0xae,
	0xf6, 0x6f, 0xa2, 0x0c, 0x9a, 0x1b, 0x87, 0xbd, 0xa5, 0xbf, 0xfa, 0xbe, 0xae, 0xcf, 0xd5, 0xd5,
	0xd5, 0x81, 0x6e, 0xb0, 0x1c, 0x07, 0xa1, 0x2f, 0x7c, 0x72, 0x27, 0x62, 0xe1, 0x15, 0x77, 0xd8,
	0xd8, 0x0e, 0x05, 0x77, 0x5c, 0x36, 0x78, 0x7f, 0xcd, 0xc5, 0x8f, 0xdb, 0xe5, 0xd8, 0xf1, 0xbd,
	0x47, 0x6b, 0x7f, 0xed, 0x3f, 0x42, 0xde, 0x72, 0x7b, 0x89, 0x2b, 0x5c, 0xe0, 0x2f, 0xa9, 0x37,
	0xfb, 0xd0, 0x7b, 0xec, 0x05, 0xe2, 0xd5, 0x53, 0x11, 0x6e, 0x1d, 0x61, 0xfe, 0xaa, 0x40, 0xe7,
	0x2c, 0x64, 0xb6, 0xf0, 0x43, 0xf2, 0x06, 0x34, 0xe6, 0x33, 0x5d, 0x19, 0x2a, 0x23, 0xd5, 0x6a,
	0x27, 0xb1, 0xd1, 0xe0, 0x2b, 0xda, 0x98, 0xcf, 0xc8, 0x7b, 0xd0, 0xbd, 0x88, 0x58, 0xf8, 0xb5,
	0xed, 0x31, 0xbd, 0x31, 0x54, 0x46, 0x9a, 0xd5, 0x4f, 0x62, 0x43, 0xdb, 0x46, 0x2c, 0x5c, 0x6c,
	0x6c, 0x8f, 0xd1, 0x22, 0x4c, 0x4c, 0x68, 0x4f, 0xaf, 0x6c, 0x61, 0x87, 0xba, 0x8a, 0x44, 0x48,
	0x62, 0xa3, 0x6d, 0x23, 0x42, 0xb3, 0x08, 0xf9, 0x08, 0x8e, 0xe6, 0x1b, 0x11, 0xfa, 0xab, 0xad,
	0x23, 0xb8, 0xbf, 0xd1, 0x9b, 0xc8, 0xbc, 0x9b, 0xc4, 0xc6, 0x11, 0xaf, 0xe0, 0xb4, 0xc6, 0x32,
	0x7f, 0x6e, 0x80, 0x36, 0xb3, 0xa6, 0xf2, 0xa3, 0xc9, 0x71, 0x69, 0x15, 0x2d, 0xde, 0x87, 0xd6,
	0x33, 0x2e, 0xdc, 0xcc, 0x1f, 0x95, 0x0b, 0xa2, 0x43, 0xe7, 0xcc, 0xdf, 0x08, 0xb6, 0x11, 0xd2,
	0x0e, 0xcd, 0x97, 0x64, 0x08, 0xbd, 0xec, 0xe7, 0x33, 0xf6, 0x52, 0x48, 0x0b, 0xb4, 0x0a, 0x91,
	0x77, 0xa0, 0x3f, 0xe3, 0x91, 0xbd, 0x74, 0x19, 0x65, 0x57, 0x3c, 0x62, 0x7a, 0x6b, 0xa8, 0x8c,
	0xba, 0xb4, 0x0e, 0x92, 0x77, 0xe1, 0x38, 0x03, 0xce, 0x7c, 0xcf, 0x4b, 0x13, 0xb5, 0x91, 0xb6,
	0x83, 0x92, 0x07, 0xa0, 0x61, 0x95, 0xd9, 0xca, 0x7a, 0xa5, 0x77, 0xd0, 0x76, 0x09, 0x54, 0xa2,
	0x53, 0xa1, 0x77, 0x6b, 0xd1, 0x29, 0x6a, 0x2f, 0x82, 0x55, 0x16, 0xd5, 0x64, 0xb4, 0x00, 0xcc,
	0x2f, 0xe0, 0x28, 0x2b, 0x4a, 0x44, 0x59, 0x14, 0x90, 0x0f, 0xa0, 0x35, 0x17, 0xcc, 0x8b, 0x74,
	0x65, 0xa8, 0x8e, 0x7a, 0x93, 0xc1, 0x78, 0xa7, 0x5f, 0xc6, 0x45, 0x11, 0xa9, 0x24, 0x9a, 0xff,
	0x34, 0xa0, 0x97, 0x41, 0xf3, 0xcd, 0xa5, 0x7f, 0xb0, 0x0d, 0x8c, 0x5a, 0x8d, 0x2d, 0x2d, 0x89,
	0x8d, 0x96, 0x48, 0x81, 0xbc, 0xdc, 0x0f, 0xa1, 0xf3, 0xf8, 0xa5, 0xc3, 0xc2, 0x20, 0x2b, 0xb7,
	0xd5, 0x4b, 0x62, 0xa3, 0xc3, 0x24, 0x44, 0xf3, 0x18, 0x39, 0x05, 0x6d, 0xee, 0xd9, 0x6b, 0x76,
	0x11, 0xba, 0x91, 0xde, 0x1c, 0xaa, 0x23, 0xcd, 0x3a, 0x4e, 0x62, 0x03, 0x78, 0x0a, 0x2e, 0xb6,
	0xa1, 0x1b, 0xd1, 0x92, 0x40, 0x3e, 0x2f, 0xfa, 0x13, 0x4f, 0xa0, 0x37, 0xd1, 0xf7, 0xbe, 0x28,
	0x8b, 0xcb, 0x74, 0x8e, 0x5c, 0xd0, 0xa2, 0xab, 0x4f, 0xab, 0xc5, 0x6d, 0xe3, 0x57, 0x61, 0x3a,
	0x47, 0x82, 0x0b, 0x5b, 0x54, 0x8b, 0x7d, 0x5a, 0x2d, 0x76, 0xa7, 0x64, 0x6f, 0x25, 0x88, 0xec,
	0x82, 0x40, 0x3e, 0x85, 0xe6, 0x53, 0x61, 0xcb, 0x33, 0xeb, 0x4d, 0x1e, 0xec, 0x39, 0xcb, 0xca,
	0x9a, 0x72, 0xac, 0x6e, 0x12, 0x1b, 0xcd, 0x48, 0xd8, 0x82, 0xa2, 0xc6, 0xfc, 0x4b, 0x29, 0xca,
	0x9e, 0xae, 0xc9, 0x04, 0x7a, 0xb2, 0xa9, 0xce, 0xfc, 0xed, 0x46, 0x60, 0xfd, 0x5b, 0xf2, 0x56,
	0x84, 0x08, 0x2f, 0x9c, 0x14, 0xa7, 0x55, 0x52, 0xea, 0xf6, 0x09, 0x7f, 0x9e, 0x29, 0x1a, 0xa8,
	0x40, 0xb7, 0x2e, 0x7f, 0x9e, 0xf3, 0x4b, 0x02, 0xf9, 0x18, 0x8e, 0x66, 0x3c, 0x72, 0x0b, 0x81,
	0x8a, 0x82, 0x7b, 0x49, 0x6c, 0xf4, 0x57, 0x12, 0xcf, 0x34, 0x35, 0x5a, 0x2a, 0xcb, 0xda, 0x58,
	0xca, 0x9a, 0xa5, 0xcc, 0x91, 0x78, 0x2e, 0xab, 0xd2, 0xcc, 0xdf, 0x14, 0x00, 0xe9, 0x15, 0x3f,
	0xef, 0xff, 0x6c, 0xf5, 0x17, 0x35, 0xb7, 0xfa, 0xfa, 0x02, 0xdc, 0xee, 0x02, 0x7c, 0x52, 0xbb,
	0x00, 0x6f, 0xee, 0x39, 0x2b, 0x1b, 0x60, 0xb7, 0xff, 0xd3, 0x44, 0xf9, 0xd4, 0x99, 0xc9, 0xb1,
	0x26, 0x13, 0x65, 0xd2, 0x05, 0x5f, 0xd1, 0x92, 0x60, 0x1a, 0xd0, 0x9a, 0xcf, 0x28, 0x7b, 0x71,
	0xe8, 0x70, 0xcc, 0x9f, 0xe0, 0x4e, 0xfa, 0x0a, 0x95, 0xb3, 0xf0, 0x05, 0x79, 0x08, 0xda, 0xd4,
	0xc1, 0xf3, 0x2e, 0x14, 0x9d, 0x24, 0x36, 0x54, 0x1b, 0xb7, 0xce, 0x23, 0xe9, 0xb1, 0x3e, 0xe1,
	0x1e, 0xcf, 0xbb, 0x12, 0x8f, 0xd5, 0x4d, 0x01, 0x2a, 0xf1, 0xf4, 0x51, 0xfb, 0xe6, 0xf2, 0x32,
	0x62, 0x79, 0x1b, 0xe2, 0xa3, 0xe6, 0x23, 0x42, 0xb3, 0x88, 0xf9, 0x1d, 0xdc, 0xad, 0xa7, 0x8f,
	0x02, 0xf2, 0x59, 0x7d, 0x14, 0x1f, 0x1c, 0x0f, 0x69, 0xd3, 0xc9, 0xb4, 0x3c, 0xa5, 0x67, 0x73,
	0x79, 0xf2, 0xa7, 0x0a, 0x9d, 0xfc, 0xbd, 0xfb, 0x0a, 0x8e, 0xcf, 0x99, 0x98, 0xba, 0x6e, 0x9e,
	0x80, 0xec, 0xef, 0x56, 0x79, 0xd6, 0x07, 0x6f, 0x1d, 0xca, 0x25, 0x9d, 0x7d, 0x29, 0xb7, 0xab,
	0x0e, 0xfd, 0x3d, 0x01, 0x96, 0x7b, 0x70, 0xa3, 0x69, 0x32, 0x83, 0xfe, 0x39, 0x13, 0xd5, 0xab,
	0x73, 0x60, 0x9b, 0x43, 0x9d, 0xb1, 0xb7, 0x0b, 0xb6, 0xc6, 0x6d, 0x77, 0x41, 0x51, 0xed, 0x9b,
	0x6e, 0xdc, 0xe6, 0xc6, 0x39, 0x4d, 0x7e, 0x80, 0xfb, 0xe7, 0x4c, 0x54, 0x0f, 0xf3, 0x5b, 0x7b,
	0xcd, 0x56, 0x64, 0xb8, 0xa7, 0xda, 0xe9, 0xb7, 0xc1, 0xdb, 0xff, 0xc1, 0x88, 0x02, 0xeb, 0xde,
	0xef, 0xd7, 0x27, 0xca, 0x1f, 0xd7, 0x27, 0xca, 0xdf, 0xd7, 0x27, 0xca, 0xf7, 0xaa, 0x1d, 0xf0,
	0x65, 0x1b, 0xff, 0x97, 0x7d, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0xa5, 0xe5, 0x7e,
	0xe3, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArticleClient interface {
	GetAllArticles(ctx context.Context, in *EmptyStruct, opts ...grpc.CallOption) (*ArticlesResp, error)
	GetArticleInfo(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleInfo, error)
	GetReviseInfo(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseInfo, error)
	GetReviseStat(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseStat, error)
	GetArticleStat(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleStat, error)
	GetUserArticlesPaged(ctx context.Context, in *UserArticlesReq, opts ...grpc.CallOption) (*UserArticlesResp, error)
}

type articleClient struct {
	cc *grpc.ClientConn
}

func NewArticleClient(cc *grpc.ClientConn) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) GetAllArticles(ctx context.Context, in *EmptyStruct, opts ...grpc.CallOption) (*ArticlesResp, error) {
	out := new(ArticlesResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetAllArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleInfo(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleInfo, error) {
	out := new(ArticleInfo)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetReviseInfo(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseInfo, error) {
	out := new(ReviseInfo)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetReviseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetReviseStat(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseStat, error) {
	out := new(ReviseStat)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetReviseStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleStat(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleStat, error) {
	out := new(ArticleStat)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetUserArticlesPaged(ctx context.Context, in *UserArticlesReq, opts ...grpc.CallOption) (*UserArticlesResp, error) {
	out := new(UserArticlesResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetUserArticlesPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
type ArticleServer interface {
	GetAllArticles(context.Context, *EmptyStruct) (*ArticlesResp, error)
	GetArticleInfo(context.Context, *IDReq) (*ArticleInfo, error)
	GetReviseInfo(context.Context, *IDReq) (*ReviseInfo, error)
	GetReviseStat(context.Context, *IDReq) (*ReviseStat, error)
	GetArticleStat(context.Context, *IDReq) (*ArticleStat, error)
	GetUserArticlesPaged(context.Context, *UserArticlesReq) (*UserArticlesResp, error)
}

// UnimplementedArticleServer can be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (*UnimplementedArticleServer) GetAllArticles(ctx context.Context, req *EmptyStruct) (*ArticlesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArticles not implemented")
}
func (*UnimplementedArticleServer) GetArticleInfo(ctx context.Context, req *IDReq) (*ArticleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleInfo not implemented")
}
func (*UnimplementedArticleServer) GetReviseInfo(ctx context.Context, req *IDReq) (*ReviseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviseInfo not implemented")
}
func (*UnimplementedArticleServer) GetReviseStat(ctx context.Context, req *IDReq) (*ReviseStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviseStat not implemented")
}
func (*UnimplementedArticleServer) GetArticleStat(ctx context.Context, req *IDReq) (*ArticleStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleStat not implemented")
}
func (*UnimplementedArticleServer) GetUserArticlesPaged(ctx context.Context, req *UserArticlesReq) (*UserArticlesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArticlesPaged not implemented")
}

func RegisterArticleServer(s *grpc.Server, srv ArticleServer) {
	s.RegisterService(&_Article_serviceDesc, srv)
}

func _Article_GetAllArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetAllArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetAllArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetAllArticles(ctx, req.(*EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleInfo(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetReviseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetReviseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetReviseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetReviseInfo(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetReviseStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetReviseStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetReviseStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetReviseStat(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleStat(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetUserArticlesPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserArticlesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetUserArticlesPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetUserArticlesPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetUserArticlesPaged(ctx, req.(*UserArticlesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Article_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.article.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllArticles",
			Handler:    _Article_GetAllArticles_Handler,
		},
		{
			MethodName: "GetArticleInfo",
			Handler:    _Article_GetArticleInfo_Handler,
		},
		{
			MethodName: "GetReviseInfo",
			Handler:    _Article_GetReviseInfo_Handler,
		},
		{
			MethodName: "GetReviseStat",
			Handler:    _Article_GetReviseStat_Handler,
		},
		{
			MethodName: "GetArticleStat",
			Handler:    _Article_GetArticleStat_Handler,
		},
		{
			MethodName: "GetUserArticlesPaged",
			Handler:    _Article_GetUserArticlesPaged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Creator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Creator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Creator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBArticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBArticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedBy != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x38
	}
	if m.DisableComment {
		i--
		if m.DisableComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DisableRevise {
		i--
		if m.DisableRevise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContentText) > 0 {
		i -= len(m.ContentText)
		copy(dAtA[i:], m.ContentText)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ContentText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticlesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticlesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticlesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageUrls) > 0 {
		for iNdEx := len(m.ImageUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImageUrls[iNdEx])
			copy(dAtA[i:], m.ImageUrls[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.ImageUrls[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Excerpt) > 0 {
		i -= len(m.Excerpt)
		copy(dAtA[i:], m.Excerpt)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Excerpt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommentCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x20
	}
	if m.DislikeCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DislikeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.LikeCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ReviseCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ReviseCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReviseStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReviseStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReviseStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommentCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x20
	}
	if m.DislikeCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DislikeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.LikeCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ReviseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReviseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReviseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x48
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageUrls) > 0 {
		for iNdEx := len(m.ImageUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImageUrls[iNdEx])
			copy(dAtA[i:], m.ImageUrls[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.ImageUrls[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Excerpt) > 0 {
		i -= len(m.Excerpt)
		copy(dAtA[i:], m.Excerpt)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Excerpt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserArticlesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserArticlesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserArticlesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserArticlesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserArticlesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserArticlesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Creator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBArticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.ContentText)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.DisableRevise {
		n += 2
	}
	if m.DisableComment {
		n += 2
	}
	if m.CreatedBy != 0 {
		n += 1 + sovPb(uint64(m.CreatedBy))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticlesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Excerpt)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviseCount != 0 {
		n += 1 + sovPb(uint64(m.ReviseCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovPb(uint64(m.LikeCount))
	}
	if m.DislikeCount != 0 {
		n += 1 + sovPb(uint64(m.DislikeCount))
	}
	if m.CommentCount != 0 {
		n += 1 + sovPb(uint64(m.CommentCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReviseStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LikeCount != 0 {
		n += 1 + sovPb(uint64(m.LikeCount))
	}
	if m.DislikeCount != 0 {
		n += 1 + sovPb(uint64(m.DislikeCount))
	}
	if m.CommentCount != 0 {
		n += 1 + sovPb(uint64(m.CommentCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReviseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Excerpt)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserArticlesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserArticlesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Creator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Creator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Creator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRevise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableRevise = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableComment = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticlesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticlesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticlesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DBArticle{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Excerpt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Excerpt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &Creator{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &ArticleStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseCount", wireType)
			}
			m.ReviseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeCount", wireType)
			}
			m.DislikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReviseStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviseStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviseStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeCount", wireType)
			}
			m.DislikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReviseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Excerpt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Excerpt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &Creator{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &ReviseStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserArticlesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserArticlesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserArticlesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserArticlesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserArticlesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserArticlesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ArticleInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb   = fmt.Errorf("proto: integer overflow")
)
