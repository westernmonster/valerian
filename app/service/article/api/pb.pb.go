// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
type EmptyStruct struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{0}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(m, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

type Creator struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	UserName             string   `protobuf:"bytes,2,opt,name=UserName,proto3" json:"user_name"`
	Avatar               string   `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"avatar"`
	Introduction         string   `protobuf:"bytes,4,opt,name=Introduction,proto3" json:"introduction"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Creator) Reset()         { *m = Creator{} }
func (m *Creator) String() string { return proto.CompactTextString(m) }
func (*Creator) ProtoMessage()    {}
func (*Creator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{1}
}
func (m *Creator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Creator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Creator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Creator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Creator.Merge(m, src)
}
func (m *Creator) XXX_Size() int {
	return m.Size()
}
func (m *Creator) XXX_DiscardUnknown() {
	xxx_messageInfo_Creator.DiscardUnknown(m)
}

var xxx_messageInfo_Creator proto.InternalMessageInfo

func (m *Creator) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Creator) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Creator) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Creator) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

type DBArticle struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	ContentText          string   `protobuf:"bytes,4,opt,name=ContentText,proto3" json:"ContentText,omitempty"`
	DisableRevise        bool     `protobuf:"varint,5,opt,name=DisableRevise,proto3" json:"DisableRevise,omitempty"`
	DisableComment       bool     `protobuf:"varint,6,opt,name=DisableComment,proto3" json:"DisableComment,omitempty"`
	CreatedBy            int64    `protobuf:"varint,7,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	CreatedAt            int64    `protobuf:"varint,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,9,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBArticle) Reset()         { *m = DBArticle{} }
func (m *DBArticle) String() string { return proto.CompactTextString(m) }
func (*DBArticle) ProtoMessage()    {}
func (*DBArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{2}
}
func (m *DBArticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBArticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBArticle.Merge(m, src)
}
func (m *DBArticle) XXX_Size() int {
	return m.Size()
}
func (m *DBArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_DBArticle.DiscardUnknown(m)
}

var xxx_messageInfo_DBArticle proto.InternalMessageInfo

func (m *DBArticle) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DBArticle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DBArticle) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *DBArticle) GetContentText() string {
	if m != nil {
		return m.ContentText
	}
	return ""
}

func (m *DBArticle) GetDisableRevise() bool {
	if m != nil {
		return m.DisableRevise
	}
	return false
}

func (m *DBArticle) GetDisableComment() bool {
	if m != nil {
		return m.DisableComment
	}
	return false
}

func (m *DBArticle) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *DBArticle) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *DBArticle) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ArticlesResp struct {
	Items                []*DBArticle `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ArticlesResp) Reset()         { *m = ArticlesResp{} }
func (m *ArticlesResp) String() string { return proto.CompactTextString(m) }
func (*ArticlesResp) ProtoMessage()    {}
func (*ArticlesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{3}
}
func (m *ArticlesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticlesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticlesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticlesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticlesResp.Merge(m, src)
}
func (m *ArticlesResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticlesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticlesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticlesResp proto.InternalMessageInfo

func (m *ArticlesResp) GetItems() []*DBArticle {
	if m != nil {
		return m.Items
	}
	return nil
}

type ArticleDetail struct {
	ID        int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title     string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	ImageUrls []string `protobuf:"bytes,4,rep,name=ImageUrls,proto3" json:"image_urls"`
	Creator   *Creator `protobuf:"bytes,5,opt,name=Creator,proto3" json:"creator"`
	// unix timestamp
	CreatedAt int64 `protobuf:"varint,6,opt,name=CreatedAt,proto3" json:"created_at"`
	// unix timestamp
	UpdatedAt            int64               `protobuf:"varint,7,opt,name=UpdatedAt,proto3" json:"updated_at"`
	Stat                 *ArticleStat        `protobuf:"bytes,8,opt,name=Stat,proto3" json:"stat"`
	Content              string              `protobuf:"bytes,9,opt,name=Content,proto3" json:"content"`
	ContentText          string              `protobuf:"bytes,10,opt,name=ContentText,proto3" json:"content_text"`
	DisableRevise        bool                `protobuf:"varint,11,opt,name=DisableRevise,proto3" json:"disable_revise"`
	DisableComment       bool                `protobuf:"varint,12,opt,name=DisableComment,proto3" json:"disable_comment"`
	LastHistory          *ArticleHistoryResp `protobuf:"bytes,13,opt,name=LastHistory,proto3" json:"LastHistory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ArticleDetail) Reset()         { *m = ArticleDetail{} }
func (m *ArticleDetail) String() string { return proto.CompactTextString(m) }
func (*ArticleDetail) ProtoMessage()    {}
func (*ArticleDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{4}
}
func (m *ArticleDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleDetail.Merge(m, src)
}
func (m *ArticleDetail) XXX_Size() int {
	return m.Size()
}
func (m *ArticleDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleDetail proto.InternalMessageInfo

func (m *ArticleDetail) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArticleDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ArticleDetail) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *ArticleDetail) GetCreator() *Creator {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ArticleDetail) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ArticleDetail) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ArticleDetail) GetStat() *ArticleStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *ArticleDetail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ArticleDetail) GetContentText() string {
	if m != nil {
		return m.ContentText
	}
	return ""
}

func (m *ArticleDetail) GetDisableRevise() bool {
	if m != nil {
		return m.DisableRevise
	}
	return false
}

func (m *ArticleDetail) GetDisableComment() bool {
	if m != nil {
		return m.DisableComment
	}
	return false
}

func (m *ArticleDetail) GetLastHistory() *ArticleHistoryResp {
	if m != nil {
		return m.LastHistory
	}
	return nil
}

type ArticleInfo struct {
	ID        int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title     string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	Excerpt   string   `protobuf:"bytes,3,opt,name=Excerpt,proto3" json:"excerpt"`
	ImageUrls []string `protobuf:"bytes,4,rep,name=ImageUrls,proto3" json:"image_urls"`
	Creator   *Creator `protobuf:"bytes,5,opt,name=Creator,proto3" json:"creator"`
	// unix timestamp
	CreatedAt int64 `protobuf:"varint,6,opt,name=CreatedAt,proto3" json:"created_at"`
	// unix timestamp
	UpdatedAt            int64        `protobuf:"varint,7,opt,name=UpdatedAt,proto3" json:"updated_at"`
	Stat                 *ArticleStat `protobuf:"bytes,8,opt,name=Stat,proto3" json:"stat"`
	Content              string       `protobuf:"bytes,9,opt,name=Content,proto3" json:"content"`
	ContentText          string       `protobuf:"bytes,10,opt,name=ContentText,proto3" json:"content_text"`
	DisableRevise        bool         `protobuf:"varint,11,opt,name=DisableRevise,proto3" json:"disable_revise"`
	DisableComment       bool         `protobuf:"varint,12,opt,name=DisableComment,proto3" json:"disable_comment"`
	ChangeDesc           string       `protobuf:"bytes,13,opt,name=ChangeDesc,proto3" json:"ChangeDesc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ArticleInfo) Reset()         { *m = ArticleInfo{} }
func (m *ArticleInfo) String() string { return proto.CompactTextString(m) }
func (*ArticleInfo) ProtoMessage()    {}
func (*ArticleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{5}
}
func (m *ArticleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleInfo.Merge(m, src)
}
func (m *ArticleInfo) XXX_Size() int {
	return m.Size()
}
func (m *ArticleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleInfo proto.InternalMessageInfo

func (m *ArticleInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArticleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ArticleInfo) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *ArticleInfo) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *ArticleInfo) GetCreator() *Creator {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ArticleInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ArticleInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ArticleInfo) GetStat() *ArticleStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *ArticleInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ArticleInfo) GetContentText() string {
	if m != nil {
		return m.ContentText
	}
	return ""
}

func (m *ArticleInfo) GetDisableRevise() bool {
	if m != nil {
		return m.DisableRevise
	}
	return false
}

func (m *ArticleInfo) GetDisableComment() bool {
	if m != nil {
		return m.DisableComment
	}
	return false
}

func (m *ArticleInfo) GetChangeDesc() string {
	if m != nil {
		return m.ChangeDesc
	}
	return ""
}

type ArticleStat struct {
	ReviseCount          int32    `protobuf:"varint,1,opt,name=ReviseCount,proto3" json:"revise_count"`
	LikeCount            int32    `protobuf:"varint,2,opt,name=LikeCount,proto3" json:"like_count"`
	DislikeCount         int32    `protobuf:"varint,3,opt,name=DislikeCount,proto3" json:"dislike_count"`
	CommentCount         int32    `protobuf:"varint,4,opt,name=CommentCount,proto3" json:"comment_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleStat) Reset()         { *m = ArticleStat{} }
func (m *ArticleStat) String() string { return proto.CompactTextString(m) }
func (*ArticleStat) ProtoMessage()    {}
func (*ArticleStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{6}
}
func (m *ArticleStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleStat.Merge(m, src)
}
func (m *ArticleStat) XXX_Size() int {
	return m.Size()
}
func (m *ArticleStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleStat.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleStat proto.InternalMessageInfo

func (m *ArticleStat) GetReviseCount() int32 {
	if m != nil {
		return m.ReviseCount
	}
	return 0
}

func (m *ArticleStat) GetLikeCount() int32 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *ArticleStat) GetDislikeCount() int32 {
	if m != nil {
		return m.DislikeCount
	}
	return 0
}

func (m *ArticleStat) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

type ReviseStat struct {
	LikeCount            int32    `protobuf:"varint,2,opt,name=LikeCount,proto3" json:"like_count"`
	DislikeCount         int32    `protobuf:"varint,3,opt,name=DislikeCount,proto3" json:"dislike_count"`
	CommentCount         int32    `protobuf:"varint,4,opt,name=CommentCount,proto3" json:"comment_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReviseStat) Reset()         { *m = ReviseStat{} }
func (m *ReviseStat) String() string { return proto.CompactTextString(m) }
func (*ReviseStat) ProtoMessage()    {}
func (*ReviseStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{7}
}
func (m *ReviseStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReviseStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReviseStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReviseStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviseStat.Merge(m, src)
}
func (m *ReviseStat) XXX_Size() int {
	return m.Size()
}
func (m *ReviseStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviseStat.DiscardUnknown(m)
}

var xxx_messageInfo_ReviseStat proto.InternalMessageInfo

func (m *ReviseStat) GetLikeCount() int32 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *ReviseStat) GetDislikeCount() int32 {
	if m != nil {
		return m.DislikeCount
	}
	return 0
}

func (m *ReviseStat) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

type ReviseInfo struct {
	ID        int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title     string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	Excerpt   string   `protobuf:"bytes,3,opt,name=Excerpt,proto3" json:"excerpt"`
	ImageUrls []string `protobuf:"bytes,4,rep,name=ImageUrls,proto3" json:"image_urls"`
	Creator   *Creator `protobuf:"bytes,5,opt,name=Creator,proto3" json:"creator"`
	// unix timestamp
	CreatedAt int64 `protobuf:"varint,6,opt,name=CreatedAt,proto3" json:"created_at"`
	// unix timestamp
	UpdatedAt            int64       `protobuf:"varint,7,opt,name=UpdatedAt,proto3" json:"updated_at"`
	Stat                 *ReviseStat `protobuf:"bytes,8,opt,name=Stat,proto3" json:"stat"`
	ArticleID            int64       `protobuf:"varint,9,opt,name=ArticleID,proto3" json:"article_id"`
	Content              string      `protobuf:"bytes,10,opt,name=Content,proto3" json:"content"`
	ContentText          string      `protobuf:"bytes,11,opt,name=ContentText,proto3" json:"content_text"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReviseInfo) Reset()         { *m = ReviseInfo{} }
func (m *ReviseInfo) String() string { return proto.CompactTextString(m) }
func (*ReviseInfo) ProtoMessage()    {}
func (*ReviseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{8}
}
func (m *ReviseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReviseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReviseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReviseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviseInfo.Merge(m, src)
}
func (m *ReviseInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReviseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReviseInfo proto.InternalMessageInfo

func (m *ReviseInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ReviseInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReviseInfo) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *ReviseInfo) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *ReviseInfo) GetCreator() *Creator {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ReviseInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ReviseInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ReviseInfo) GetStat() *ReviseStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *ReviseInfo) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ReviseInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviseInfo) GetContentText() string {
	if m != nil {
		return m.ContentText
	}
	return ""
}

type ReviseDetail struct {
	ID        int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title     string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	ImageUrls []string `protobuf:"bytes,4,rep,name=ImageUrls,proto3" json:"image_urls"`
	Creator   *Creator `protobuf:"bytes,5,opt,name=Creator,proto3" json:"creator"`
	// unix timestamp
	CreatedAt int64 `protobuf:"varint,6,opt,name=CreatedAt,proto3" json:"created_at"`
	// unix timestamp
	UpdatedAt            int64             `protobuf:"varint,7,opt,name=UpdatedAt,proto3" json:"updated_at"`
	Stat                 *ReviseStat       `protobuf:"bytes,8,opt,name=Stat,proto3" json:"stat"`
	ArticleID            int64             `protobuf:"varint,9,opt,name=ArticleID,proto3" json:"article_id"`
	Content              string            `protobuf:"bytes,10,opt,name=Content,proto3" json:"content"`
	ContentText          string            `protobuf:"bytes,11,opt,name=ContentText,proto3" json:"content_text"`
	Files                []*ReviseFileResp `protobuf:"bytes,12,rep,name=Files,proto3" json:"Files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReviseDetail) Reset()         { *m = ReviseDetail{} }
func (m *ReviseDetail) String() string { return proto.CompactTextString(m) }
func (*ReviseDetail) ProtoMessage()    {}
func (*ReviseDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{9}
}
func (m *ReviseDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReviseDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReviseDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReviseDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviseDetail.Merge(m, src)
}
func (m *ReviseDetail) XXX_Size() int {
	return m.Size()
}
func (m *ReviseDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviseDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ReviseDetail proto.InternalMessageInfo

func (m *ReviseDetail) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ReviseDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReviseDetail) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *ReviseDetail) GetCreator() *Creator {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *ReviseDetail) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ReviseDetail) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ReviseDetail) GetStat() *ReviseStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *ReviseDetail) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ReviseDetail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviseDetail) GetContentText() string {
	if m != nil {
		return m.ContentText
	}
	return ""
}

func (m *ReviseDetail) GetFiles() []*ReviseFileResp {
	if m != nil {
		return m.Files
	}
	return nil
}

type ArgAddArticle struct {
	Title                string                `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Content              string                `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	DisableRevise        bool                  `protobuf:"varint,3,opt,name=DisableRevise,proto3" json:"DisableRevise,omitempty"`
	DisableComment       bool                  `protobuf:"varint,4,opt,name=DisableComment,proto3" json:"DisableComment,omitempty"`
	Files                []*ArgArticleFile     `protobuf:"bytes,5,rep,name=Files,proto3" json:"Files,omitempty"`
	Relations            []*ArgArticleRelation `protobuf:"bytes,6,rep,name=Relations,proto3" json:"Relations,omitempty"`
	Aid                  int64                 `protobuf:"varint,7,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ArgAddArticle) Reset()         { *m = ArgAddArticle{} }
func (m *ArgAddArticle) String() string { return proto.CompactTextString(m) }
func (*ArgAddArticle) ProtoMessage()    {}
func (*ArgAddArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{10}
}
func (m *ArgAddArticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgAddArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgAddArticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgAddArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgAddArticle.Merge(m, src)
}
func (m *ArgAddArticle) XXX_Size() int {
	return m.Size()
}
func (m *ArgAddArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgAddArticle.DiscardUnknown(m)
}

var xxx_messageInfo_ArgAddArticle proto.InternalMessageInfo

func (m *ArgAddArticle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ArgAddArticle) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ArgAddArticle) GetDisableRevise() bool {
	if m != nil {
		return m.DisableRevise
	}
	return false
}

func (m *ArgAddArticle) GetDisableComment() bool {
	if m != nil {
		return m.DisableComment
	}
	return false
}

func (m *ArgAddArticle) GetFiles() []*ArgArticleFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *ArgAddArticle) GetRelations() []*ArgArticleRelation {
	if m != nil {
		return m.Relations
	}
	return nil
}

func (m *ArgAddArticle) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type ArgUpdateArticle struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Types that are valid to be assigned to Title:
	//	*ArgUpdateArticle_TitleValue
	Title   isArgUpdateArticle_Title `protobuf_oneof:"Title"`
	Content string                   `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	// Types that are valid to be assigned to DisableRevise:
	//	*ArgUpdateArticle_DisableReviseValue
	DisableRevise isArgUpdateArticle_DisableRevise `protobuf_oneof:"DisableRevise"`
	// Types that are valid to be assigned to DisableComment:
	//	*ArgUpdateArticle_DisableCommentValue
	DisableComment       isArgUpdateArticle_DisableComment `protobuf_oneof:"DisableComment"`
	ChangeDesc           string                            `protobuf:"bytes,6,opt,name=ChangeDesc,proto3" json:"ChangeDesc,omitempty"`
	Aid                  int64                             `protobuf:"varint,7,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ArgUpdateArticle) Reset()         { *m = ArgUpdateArticle{} }
func (m *ArgUpdateArticle) String() string { return proto.CompactTextString(m) }
func (*ArgUpdateArticle) ProtoMessage()    {}
func (*ArgUpdateArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{11}
}
func (m *ArgUpdateArticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgUpdateArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgUpdateArticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgUpdateArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgUpdateArticle.Merge(m, src)
}
func (m *ArgUpdateArticle) XXX_Size() int {
	return m.Size()
}
func (m *ArgUpdateArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgUpdateArticle.DiscardUnknown(m)
}

var xxx_messageInfo_ArgUpdateArticle proto.InternalMessageInfo

type isArgUpdateArticle_Title interface {
	isArgUpdateArticle_Title()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isArgUpdateArticle_DisableRevise interface {
	isArgUpdateArticle_DisableRevise()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isArgUpdateArticle_DisableComment interface {
	isArgUpdateArticle_DisableComment()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ArgUpdateArticle_TitleValue struct {
	TitleValue string `protobuf:"bytes,2,opt,name=TitleValue,proto3,oneof" json:"TitleValue,omitempty"`
}
type ArgUpdateArticle_DisableReviseValue struct {
	DisableReviseValue bool `protobuf:"varint,4,opt,name=DisableReviseValue,proto3,oneof" json:"DisableReviseValue,omitempty"`
}
type ArgUpdateArticle_DisableCommentValue struct {
	DisableCommentValue bool `protobuf:"varint,5,opt,name=DisableCommentValue,proto3,oneof" json:"DisableCommentValue,omitempty"`
}

func (*ArgUpdateArticle_TitleValue) isArgUpdateArticle_Title()                   {}
func (*ArgUpdateArticle_DisableReviseValue) isArgUpdateArticle_DisableRevise()   {}
func (*ArgUpdateArticle_DisableCommentValue) isArgUpdateArticle_DisableComment() {}

func (m *ArgUpdateArticle) GetTitle() isArgUpdateArticle_Title {
	if m != nil {
		return m.Title
	}
	return nil
}
func (m *ArgUpdateArticle) GetDisableRevise() isArgUpdateArticle_DisableRevise {
	if m != nil {
		return m.DisableRevise
	}
	return nil
}
func (m *ArgUpdateArticle) GetDisableComment() isArgUpdateArticle_DisableComment {
	if m != nil {
		return m.DisableComment
	}
	return nil
}

func (m *ArgUpdateArticle) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArgUpdateArticle) GetTitleValue() string {
	if x, ok := m.GetTitle().(*ArgUpdateArticle_TitleValue); ok {
		return x.TitleValue
	}
	return ""
}

func (m *ArgUpdateArticle) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ArgUpdateArticle) GetDisableReviseValue() bool {
	if x, ok := m.GetDisableRevise().(*ArgUpdateArticle_DisableReviseValue); ok {
		return x.DisableReviseValue
	}
	return false
}

func (m *ArgUpdateArticle) GetDisableCommentValue() bool {
	if x, ok := m.GetDisableComment().(*ArgUpdateArticle_DisableCommentValue); ok {
		return x.DisableCommentValue
	}
	return false
}

func (m *ArgUpdateArticle) GetChangeDesc() string {
	if m != nil {
		return m.ChangeDesc
	}
	return ""
}

func (m *ArgUpdateArticle) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ArgUpdateArticle) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ArgUpdateArticle_TitleValue)(nil),
		(*ArgUpdateArticle_DisableReviseValue)(nil),
		(*ArgUpdateArticle_DisableCommentValue)(nil),
	}
}

type ArgArticleFile struct {
	FileName             string   `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileURL              string   `protobuf:"bytes,2,opt,name=FileURL,proto3" json:"FileURL,omitempty"`
	Seq                  int32    `protobuf:"varint,3,opt,name=Seq,proto3" json:"Seq,omitempty"`
	FileType             string   `protobuf:"bytes,4,opt,name=FileType,proto3" json:"FileType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgArticleFile) Reset()         { *m = ArgArticleFile{} }
func (m *ArgArticleFile) String() string { return proto.CompactTextString(m) }
func (*ArgArticleFile) ProtoMessage()    {}
func (*ArgArticleFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{12}
}
func (m *ArgArticleFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgArticleFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgArticleFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgArticleFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgArticleFile.Merge(m, src)
}
func (m *ArgArticleFile) XXX_Size() int {
	return m.Size()
}
func (m *ArgArticleFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgArticleFile.DiscardUnknown(m)
}

var xxx_messageInfo_ArgArticleFile proto.InternalMessageInfo

func (m *ArgArticleFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ArgArticleFile) GetFileURL() string {
	if m != nil {
		return m.FileURL
	}
	return ""
}

func (m *ArgArticleFile) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ArgArticleFile) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

type ArgArticleRelation struct {
	ParentID             int64    `protobuf:"varint,1,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	TopicID              int64    `protobuf:"varint,2,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
	Primary              bool     `protobuf:"varint,3,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Permission           string   `protobuf:"bytes,4,opt,name=Permission,proto3" json:"Permission,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgArticleRelation) Reset()         { *m = ArgArticleRelation{} }
func (m *ArgArticleRelation) String() string { return proto.CompactTextString(m) }
func (*ArgArticleRelation) ProtoMessage()    {}
func (*ArgArticleRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{13}
}
func (m *ArgArticleRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgArticleRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgArticleRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgArticleRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgArticleRelation.Merge(m, src)
}
func (m *ArgArticleRelation) XXX_Size() int {
	return m.Size()
}
func (m *ArgArticleRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgArticleRelation.DiscardUnknown(m)
}

var xxx_messageInfo_ArgArticleRelation proto.InternalMessageInfo

func (m *ArgArticleRelation) GetParentID() int64 {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *ArgArticleRelation) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *ArgArticleRelation) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *ArgArticleRelation) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

type IDReq struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Include              string   `protobuf:"bytes,2,opt,name=include,proto3" json:"include"`
	UseMaster            bool     `protobuf:"varint,3,opt,name=UseMaster,proto3" json:"UseMaster,omitempty"`
	Aid                  int64    `protobuf:"varint,4,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDReq) Reset()         { *m = IDReq{} }
func (m *IDReq) String() string { return proto.CompactTextString(m) }
func (*IDReq) ProtoMessage()    {}
func (*IDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{14}
}
func (m *IDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDReq.Merge(m, src)
}
func (m *IDReq) XXX_Size() int {
	return m.Size()
}
func (m *IDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IDReq.DiscardUnknown(m)
}

var xxx_messageInfo_IDReq proto.InternalMessageInfo

func (m *IDReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *IDReq) GetInclude() string {
	if m != nil {
		return m.Include
	}
	return ""
}

func (m *IDReq) GetUseMaster() bool {
	if m != nil {
		return m.UseMaster
	}
	return false
}

func (m *IDReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type UserArticlesReq struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"aid"`
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,proto3" json:"limit"`
	Offset               int32    `protobuf:"varint,3,opt,name=Offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserArticlesReq) Reset()         { *m = UserArticlesReq{} }
func (m *UserArticlesReq) String() string { return proto.CompactTextString(m) }
func (*UserArticlesReq) ProtoMessage()    {}
func (*UserArticlesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{15}
}
func (m *UserArticlesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserArticlesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserArticlesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserArticlesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserArticlesReq.Merge(m, src)
}
func (m *UserArticlesReq) XXX_Size() int {
	return m.Size()
}
func (m *UserArticlesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserArticlesReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserArticlesReq proto.InternalMessageInfo

func (m *UserArticlesReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *UserArticlesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UserArticlesReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type UserRevisesReq struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"aid"`
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,proto3" json:"limit"`
	Offset               int32    `protobuf:"varint,3,opt,name=Offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRevisesReq) Reset()         { *m = UserRevisesReq{} }
func (m *UserRevisesReq) String() string { return proto.CompactTextString(m) }
func (*UserRevisesReq) ProtoMessage()    {}
func (*UserRevisesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{16}
}
func (m *UserRevisesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRevisesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRevisesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRevisesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRevisesReq.Merge(m, src)
}
func (m *UserRevisesReq) XXX_Size() int {
	return m.Size()
}
func (m *UserRevisesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRevisesReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserRevisesReq proto.InternalMessageInfo

func (m *UserRevisesReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *UserRevisesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UserRevisesReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type UserArticlesResp struct {
	Items                []*ArticleInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UserArticlesResp) Reset()         { *m = UserArticlesResp{} }
func (m *UserArticlesResp) String() string { return proto.CompactTextString(m) }
func (*UserArticlesResp) ProtoMessage()    {}
func (*UserArticlesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{17}
}
func (m *UserArticlesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserArticlesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserArticlesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserArticlesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserArticlesResp.Merge(m, src)
}
func (m *UserArticlesResp) XXX_Size() int {
	return m.Size()
}
func (m *UserArticlesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserArticlesResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserArticlesResp proto.InternalMessageInfo

func (m *UserArticlesResp) GetItems() []*ArticleInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type ArticleFileResp struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileURL              string   `protobuf:"bytes,3,opt,name=FileURL,proto3" json:"FileURL,omitempty"`
	Seq                  int32    `protobuf:"varint,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	FileType             string   `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`
	PdfURL               string   `protobuf:"bytes,6,opt,name=PdfURL,proto3" json:"PdfURL,omitempty"`
	CreatedAt            int64    `protobuf:"varint,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleFileResp) Reset()         { *m = ArticleFileResp{} }
func (m *ArticleFileResp) String() string { return proto.CompactTextString(m) }
func (*ArticleFileResp) ProtoMessage()    {}
func (*ArticleFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{18}
}
func (m *ArticleFileResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleFileResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleFileResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleFileResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleFileResp.Merge(m, src)
}
func (m *ArticleFileResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticleFileResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleFileResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleFileResp proto.InternalMessageInfo

func (m *ArticleFileResp) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArticleFileResp) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ArticleFileResp) GetFileURL() string {
	if m != nil {
		return m.FileURL
	}
	return ""
}

func (m *ArticleFileResp) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ArticleFileResp) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

func (m *ArticleFileResp) GetPdfURL() string {
	if m != nil {
		return m.PdfURL
	}
	return ""
}

func (m *ArticleFileResp) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ArticleFilesResp struct {
	Items                []*ArticleFileResp `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ArticleFilesResp) Reset()         { *m = ArticleFilesResp{} }
func (m *ArticleFilesResp) String() string { return proto.CompactTextString(m) }
func (*ArticleFilesResp) ProtoMessage()    {}
func (*ArticleFilesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{19}
}
func (m *ArticleFilesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleFilesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleFilesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleFilesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleFilesResp.Merge(m, src)
}
func (m *ArticleFilesResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticleFilesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleFilesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleFilesResp proto.InternalMessageInfo

func (m *ArticleFilesResp) GetItems() []*ArticleFileResp {
	if m != nil {
		return m.Items
	}
	return nil
}

type ArticleRelationsResp struct {
	Items                []*ArticleRelationResp `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ArticleRelationsResp) Reset()         { *m = ArticleRelationsResp{} }
func (m *ArticleRelationsResp) String() string { return proto.CompactTextString(m) }
func (*ArticleRelationsResp) ProtoMessage()    {}
func (*ArticleRelationsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{20}
}
func (m *ArticleRelationsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleRelationsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleRelationsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleRelationsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleRelationsResp.Merge(m, src)
}
func (m *ArticleRelationsResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticleRelationsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleRelationsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleRelationsResp proto.InternalMessageInfo

func (m *ArticleRelationsResp) GetItems() []*ArticleRelationResp {
	if m != nil {
		return m.Items
	}
	return nil
}

type ArticleHistoryResp struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ArticleID            int64    `protobuf:"varint,2,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	Updator              *Creator `protobuf:"bytes,3,opt,name=Updator,proto3" json:"Updator,omitempty"`
	Diff                 string   `protobuf:"bytes,4,opt,name=Diff,proto3" json:"Diff,omitempty"`
	ChangeDesc           string   `protobuf:"bytes,5,opt,name=ChangeDesc,proto3" json:"ChangeDesc,omitempty"`
	Seq                  int32    `protobuf:"varint,6,opt,name=Seq,proto3" json:"Seq,omitempty"`
	CreatedAt            int64    `protobuf:"varint,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,8,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleHistoryResp) Reset()         { *m = ArticleHistoryResp{} }
func (m *ArticleHistoryResp) String() string { return proto.CompactTextString(m) }
func (*ArticleHistoryResp) ProtoMessage()    {}
func (*ArticleHistoryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{21}
}
func (m *ArticleHistoryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleHistoryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleHistoryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleHistoryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleHistoryResp.Merge(m, src)
}
func (m *ArticleHistoryResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticleHistoryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleHistoryResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleHistoryResp proto.InternalMessageInfo

func (m *ArticleHistoryResp) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArticleHistoryResp) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArticleHistoryResp) GetUpdator() *Creator {
	if m != nil {
		return m.Updator
	}
	return nil
}

func (m *ArticleHistoryResp) GetDiff() string {
	if m != nil {
		return m.Diff
	}
	return ""
}

func (m *ArticleHistoryResp) GetChangeDesc() string {
	if m != nil {
		return m.ChangeDesc
	}
	return ""
}

func (m *ArticleHistoryResp) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ArticleHistoryResp) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ArticleHistoryResp) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ArticleHistoryItem struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ArticleID            int64    `protobuf:"varint,2,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	Updator              *Creator `protobuf:"bytes,3,opt,name=Updator,proto3" json:"Updator,omitempty"`
	ChangeDesc           string   `protobuf:"bytes,5,opt,name=ChangeDesc,proto3" json:"ChangeDesc,omitempty"`
	Seq                  int32    `protobuf:"varint,6,opt,name=Seq,proto3" json:"Seq,omitempty"`
	CreatedAt            int64    `protobuf:"varint,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,8,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleHistoryItem) Reset()         { *m = ArticleHistoryItem{} }
func (m *ArticleHistoryItem) String() string { return proto.CompactTextString(m) }
func (*ArticleHistoryItem) ProtoMessage()    {}
func (*ArticleHistoryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{22}
}
func (m *ArticleHistoryItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleHistoryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleHistoryItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleHistoryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleHistoryItem.Merge(m, src)
}
func (m *ArticleHistoryItem) XXX_Size() int {
	return m.Size()
}
func (m *ArticleHistoryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleHistoryItem.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleHistoryItem proto.InternalMessageInfo

func (m *ArticleHistoryItem) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArticleHistoryItem) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArticleHistoryItem) GetUpdator() *Creator {
	if m != nil {
		return m.Updator
	}
	return nil
}

func (m *ArticleHistoryItem) GetChangeDesc() string {
	if m != nil {
		return m.ChangeDesc
	}
	return ""
}

func (m *ArticleHistoryItem) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ArticleHistoryItem) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ArticleHistoryItem) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ArticleHistoryListResp struct {
	Items                []*ArticleHistoryItem `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ArticleHistoryListResp) Reset()         { *m = ArticleHistoryListResp{} }
func (m *ArticleHistoryListResp) String() string { return proto.CompactTextString(m) }
func (*ArticleHistoryListResp) ProtoMessage()    {}
func (*ArticleHistoryListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{23}
}
func (m *ArticleHistoryListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleHistoryListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleHistoryListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleHistoryListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleHistoryListResp.Merge(m, src)
}
func (m *ArticleHistoryListResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticleHistoryListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleHistoryListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleHistoryListResp proto.InternalMessageInfo

func (m *ArticleHistoryListResp) GetItems() []*ArticleHistoryItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ArticleRelationResp struct {
	ID                   int64      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CatalogFullPath      string     `protobuf:"bytes,2,opt,name=CatalogFullPath,proto3" json:"CatalogFullPath,omitempty"`
	Primary              bool       `protobuf:"varint,3,opt,name=Primary,proto3" json:"Primary,omitempty"`
	ToTopicID            int64      `protobuf:"varint,4,opt,name=ToTopicID,proto3" json:"ToTopicID,omitempty"`
	Name                 string     `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Avatar               string     `protobuf:"bytes,6,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Permission           string     `protobuf:"bytes,7,opt,name=Permission,proto3" json:"Permission,omitempty"`
	EditPermission       string     `protobuf:"bytes,8,opt,name=EditPermission,proto3" json:"EditPermission,omitempty"`
	Introduction         string     `protobuf:"bytes,9,opt,name=Introduction,proto3" json:"Introduction,omitempty"`
	Stat                 *TopicStat `protobuf:"bytes,10,opt,name=Stat,proto3" json:"Stat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ArticleRelationResp) Reset()         { *m = ArticleRelationResp{} }
func (m *ArticleRelationResp) String() string { return proto.CompactTextString(m) }
func (*ArticleRelationResp) ProtoMessage()    {}
func (*ArticleRelationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{24}
}
func (m *ArticleRelationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleRelationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleRelationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleRelationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleRelationResp.Merge(m, src)
}
func (m *ArticleRelationResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticleRelationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleRelationResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleRelationResp proto.InternalMessageInfo

func (m *ArticleRelationResp) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArticleRelationResp) GetCatalogFullPath() string {
	if m != nil {
		return m.CatalogFullPath
	}
	return ""
}

func (m *ArticleRelationResp) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *ArticleRelationResp) GetToTopicID() int64 {
	if m != nil {
		return m.ToTopicID
	}
	return 0
}

func (m *ArticleRelationResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArticleRelationResp) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *ArticleRelationResp) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *ArticleRelationResp) GetEditPermission() string {
	if m != nil {
		return m.EditPermission
	}
	return ""
}

func (m *ArticleRelationResp) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *ArticleRelationResp) GetStat() *TopicStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

type ArgUpdateArticleFile struct {
	// Types that are valid to be assigned to ID:
	//	*ArgUpdateArticleFile_IDValue
	ID                   isArgUpdateArticleFile_ID `protobuf_oneof:"ID"`
	FileName             string                    `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileURL              string                    `protobuf:"bytes,3,opt,name=FileURL,proto3" json:"FileURL,omitempty"`
	Seq                  int32                     `protobuf:"varint,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	FileType             string                    `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ArgUpdateArticleFile) Reset()         { *m = ArgUpdateArticleFile{} }
func (m *ArgUpdateArticleFile) String() string { return proto.CompactTextString(m) }
func (*ArgUpdateArticleFile) ProtoMessage()    {}
func (*ArgUpdateArticleFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{25}
}
func (m *ArgUpdateArticleFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgUpdateArticleFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgUpdateArticleFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgUpdateArticleFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgUpdateArticleFile.Merge(m, src)
}
func (m *ArgUpdateArticleFile) XXX_Size() int {
	return m.Size()
}
func (m *ArgUpdateArticleFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgUpdateArticleFile.DiscardUnknown(m)
}

var xxx_messageInfo_ArgUpdateArticleFile proto.InternalMessageInfo

type isArgUpdateArticleFile_ID interface {
	isArgUpdateArticleFile_ID()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ArgUpdateArticleFile_IDValue struct {
	IDValue int64 `protobuf:"varint,1,opt,name=IDValue,proto3,oneof" json:"IDValue,omitempty"`
}

func (*ArgUpdateArticleFile_IDValue) isArgUpdateArticleFile_ID() {}

func (m *ArgUpdateArticleFile) GetID() isArgUpdateArticleFile_ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ArgUpdateArticleFile) GetIDValue() int64 {
	if x, ok := m.GetID().(*ArgUpdateArticleFile_IDValue); ok {
		return x.IDValue
	}
	return 0
}

func (m *ArgUpdateArticleFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ArgUpdateArticleFile) GetFileURL() string {
	if m != nil {
		return m.FileURL
	}
	return ""
}

func (m *ArgUpdateArticleFile) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ArgUpdateArticleFile) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ArgUpdateArticleFile) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ArgUpdateArticleFile_IDValue)(nil),
	}
}

type ArgSaveArticleFiles struct {
	Items                []*ArgUpdateArticleFile `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	ArticleID            int64                   `protobuf:"varint,2,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	Aid                  int64                   `protobuf:"varint,3,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ArgSaveArticleFiles) Reset()         { *m = ArgSaveArticleFiles{} }
func (m *ArgSaveArticleFiles) String() string { return proto.CompactTextString(m) }
func (*ArgSaveArticleFiles) ProtoMessage()    {}
func (*ArgSaveArticleFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{26}
}
func (m *ArgSaveArticleFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgSaveArticleFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgSaveArticleFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgSaveArticleFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgSaveArticleFiles.Merge(m, src)
}
func (m *ArgSaveArticleFiles) XXX_Size() int {
	return m.Size()
}
func (m *ArgSaveArticleFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgSaveArticleFiles.DiscardUnknown(m)
}

var xxx_messageInfo_ArgSaveArticleFiles proto.InternalMessageInfo

func (m *ArgSaveArticleFiles) GetItems() []*ArgUpdateArticleFile {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ArgSaveArticleFiles) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArgSaveArticleFiles) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type ArgSetPrimaryArticleRelation struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ArticleID            int64    `protobuf:"varint,2,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	Aid                  int64    `protobuf:"varint,3,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgSetPrimaryArticleRelation) Reset()         { *m = ArgSetPrimaryArticleRelation{} }
func (m *ArgSetPrimaryArticleRelation) String() string { return proto.CompactTextString(m) }
func (*ArgSetPrimaryArticleRelation) ProtoMessage()    {}
func (*ArgSetPrimaryArticleRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{27}
}
func (m *ArgSetPrimaryArticleRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgSetPrimaryArticleRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgSetPrimaryArticleRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgSetPrimaryArticleRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgSetPrimaryArticleRelation.Merge(m, src)
}
func (m *ArgSetPrimaryArticleRelation) XXX_Size() int {
	return m.Size()
}
func (m *ArgSetPrimaryArticleRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgSetPrimaryArticleRelation.DiscardUnknown(m)
}

var xxx_messageInfo_ArgSetPrimaryArticleRelation proto.InternalMessageInfo

func (m *ArgSetPrimaryArticleRelation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArgSetPrimaryArticleRelation) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArgSetPrimaryArticleRelation) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type ArgDelArticleRelation struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ArticleID            int64    `protobuf:"varint,2,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	Aid                  int64    `protobuf:"varint,3,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgDelArticleRelation) Reset()         { *m = ArgDelArticleRelation{} }
func (m *ArgDelArticleRelation) String() string { return proto.CompactTextString(m) }
func (*ArgDelArticleRelation) ProtoMessage()    {}
func (*ArgDelArticleRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{28}
}
func (m *ArgDelArticleRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgDelArticleRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgDelArticleRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgDelArticleRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgDelArticleRelation.Merge(m, src)
}
func (m *ArgDelArticleRelation) XXX_Size() int {
	return m.Size()
}
func (m *ArgDelArticleRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgDelArticleRelation.DiscardUnknown(m)
}

var xxx_messageInfo_ArgDelArticleRelation proto.InternalMessageInfo

func (m *ArgDelArticleRelation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArgDelArticleRelation) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArgDelArticleRelation) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type ArgAddArticleRelation struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	ParentID             int64    `protobuf:"varint,2,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	TopicID              int64    `protobuf:"varint,3,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
	Primary              bool     `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Permission           string   `protobuf:"bytes,5,opt,name=Permission,proto3" json:"Permission,omitempty"`
	Aid                  int64    `protobuf:"varint,6,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgAddArticleRelation) Reset()         { *m = ArgAddArticleRelation{} }
func (m *ArgAddArticleRelation) String() string { return proto.CompactTextString(m) }
func (*ArgAddArticleRelation) ProtoMessage()    {}
func (*ArgAddArticleRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{29}
}
func (m *ArgAddArticleRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgAddArticleRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgAddArticleRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgAddArticleRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgAddArticleRelation.Merge(m, src)
}
func (m *ArgAddArticleRelation) XXX_Size() int {
	return m.Size()
}
func (m *ArgAddArticleRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgAddArticleRelation.DiscardUnknown(m)
}

var xxx_messageInfo_ArgAddArticleRelation proto.InternalMessageInfo

func (m *ArgAddArticleRelation) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArgAddArticleRelation) GetParentID() int64 {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *ArgAddArticleRelation) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *ArgAddArticleRelation) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *ArgAddArticleRelation) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *ArgAddArticleRelation) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type AddArticleRelation struct {
	ParentID             int64    `protobuf:"varint,2,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	TopicID              int64    `protobuf:"varint,3,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
	Primary              bool     `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Permission           string   `protobuf:"bytes,5,opt,name=Permission,proto3" json:"Permission,omitempty"`
	Aid                  int64    `protobuf:"varint,6,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddArticleRelation) Reset()         { *m = AddArticleRelation{} }
func (m *AddArticleRelation) String() string { return proto.CompactTextString(m) }
func (*AddArticleRelation) ProtoMessage()    {}
func (*AddArticleRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{30}
}
func (m *AddArticleRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddArticleRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddArticleRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddArticleRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddArticleRelation.Merge(m, src)
}
func (m *AddArticleRelation) XXX_Size() int {
	return m.Size()
}
func (m *AddArticleRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_AddArticleRelation.DiscardUnknown(m)
}

var xxx_messageInfo_AddArticleRelation proto.InternalMessageInfo

func (m *AddArticleRelation) GetParentID() int64 {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *AddArticleRelation) GetTopicID() int64 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *AddArticleRelation) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *AddArticleRelation) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *AddArticleRelation) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type ArgUpdateArticleRelation struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Primary              bool     `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Permission           string   `protobuf:"bytes,5,opt,name=Permission,proto3" json:"Permission,omitempty"`
	Aid                  int64    `protobuf:"varint,6,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgUpdateArticleRelation) Reset()         { *m = ArgUpdateArticleRelation{} }
func (m *ArgUpdateArticleRelation) String() string { return proto.CompactTextString(m) }
func (*ArgUpdateArticleRelation) ProtoMessage()    {}
func (*ArgUpdateArticleRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{31}
}
func (m *ArgUpdateArticleRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgUpdateArticleRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgUpdateArticleRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgUpdateArticleRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgUpdateArticleRelation.Merge(m, src)
}
func (m *ArgUpdateArticleRelation) XXX_Size() int {
	return m.Size()
}
func (m *ArgUpdateArticleRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgUpdateArticleRelation.DiscardUnknown(m)
}

var xxx_messageInfo_ArgUpdateArticleRelation proto.InternalMessageInfo

func (m *ArgUpdateArticleRelation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArgUpdateArticleRelation) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *ArgUpdateArticleRelation) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *ArgUpdateArticleRelation) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type IDResp struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDResp) Reset()         { *m = IDResp{} }
func (m *IDResp) String() string { return proto.CompactTextString(m) }
func (*IDResp) ProtoMessage()    {}
func (*IDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{32}
}
func (m *IDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDResp.Merge(m, src)
}
func (m *IDResp) XXX_Size() int {
	return m.Size()
}
func (m *IDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IDResp.DiscardUnknown(m)
}

var xxx_messageInfo_IDResp proto.InternalMessageInfo

func (m *IDResp) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type ArgArticleHistoriesPaged struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset               int32    `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Aid                  int64    `protobuf:"varint,4,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgArticleHistoriesPaged) Reset()         { *m = ArgArticleHistoriesPaged{} }
func (m *ArgArticleHistoriesPaged) String() string { return proto.CompactTextString(m) }
func (*ArgArticleHistoriesPaged) ProtoMessage()    {}
func (*ArgArticleHistoriesPaged) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{33}
}
func (m *ArgArticleHistoriesPaged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgArticleHistoriesPaged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgArticleHistoriesPaged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgArticleHistoriesPaged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgArticleHistoriesPaged.Merge(m, src)
}
func (m *ArgArticleHistoriesPaged) XXX_Size() int {
	return m.Size()
}
func (m *ArgArticleHistoriesPaged) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgArticleHistoriesPaged.DiscardUnknown(m)
}

var xxx_messageInfo_ArgArticleHistoriesPaged proto.InternalMessageInfo

func (m *ArgArticleHistoriesPaged) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArgArticleHistoriesPaged) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ArgArticleHistoriesPaged) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ArgArticleHistoriesPaged) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type ArgAddRevise struct {
	ArticleID            int64            `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	Content              string           `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Aid                  int64            `protobuf:"varint,3,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Files                []*AddReviseFile `protobuf:"bytes,4,rep,name=Files,proto3" json:"Files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ArgAddRevise) Reset()         { *m = ArgAddRevise{} }
func (m *ArgAddRevise) String() string { return proto.CompactTextString(m) }
func (*ArgAddRevise) ProtoMessage()    {}
func (*ArgAddRevise) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{34}
}
func (m *ArgAddRevise) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgAddRevise) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgAddRevise.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgAddRevise) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgAddRevise.Merge(m, src)
}
func (m *ArgAddRevise) XXX_Size() int {
	return m.Size()
}
func (m *ArgAddRevise) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgAddRevise.DiscardUnknown(m)
}

var xxx_messageInfo_ArgAddRevise proto.InternalMessageInfo

func (m *ArgAddRevise) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArgAddRevise) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ArgAddRevise) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ArgAddRevise) GetFiles() []*AddReviseFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type AddReviseFile struct {
	// Types that are valid to be assigned to ID:
	//	*AddReviseFile_IDValue
	ID                   isAddReviseFile_ID `protobuf_oneof:"ID"`
	FileName             string             `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileURL              string             `protobuf:"bytes,3,opt,name=FileURL,proto3" json:"FileURL,omitempty"`
	Seq                  int32              `protobuf:"varint,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AddReviseFile) Reset()         { *m = AddReviseFile{} }
func (m *AddReviseFile) String() string { return proto.CompactTextString(m) }
func (*AddReviseFile) ProtoMessage()    {}
func (*AddReviseFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{35}
}
func (m *AddReviseFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReviseFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReviseFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReviseFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReviseFile.Merge(m, src)
}
func (m *AddReviseFile) XXX_Size() int {
	return m.Size()
}
func (m *AddReviseFile) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReviseFile.DiscardUnknown(m)
}

var xxx_messageInfo_AddReviseFile proto.InternalMessageInfo

type isAddReviseFile_ID interface {
	isAddReviseFile_ID()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AddReviseFile_IDValue struct {
	IDValue int64 `protobuf:"varint,1,opt,name=IDValue,proto3,oneof" json:"IDValue,omitempty"`
}

func (*AddReviseFile_IDValue) isAddReviseFile_ID() {}

func (m *AddReviseFile) GetID() isAddReviseFile_ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *AddReviseFile) GetIDValue() int64 {
	if x, ok := m.GetID().(*AddReviseFile_IDValue); ok {
		return x.IDValue
	}
	return 0
}

func (m *AddReviseFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *AddReviseFile) GetFileURL() string {
	if m != nil {
		return m.FileURL
	}
	return ""
}

func (m *AddReviseFile) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AddReviseFile) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AddReviseFile_IDValue)(nil),
	}
}

type ArgUpdateRevise struct {
	ID                   int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Content              string           `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Aid                  int64            `protobuf:"varint,3,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Files                []*AddReviseFile `protobuf:"bytes,4,rep,name=Files,proto3" json:"Files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ArgUpdateRevise) Reset()         { *m = ArgUpdateRevise{} }
func (m *ArgUpdateRevise) String() string { return proto.CompactTextString(m) }
func (*ArgUpdateRevise) ProtoMessage()    {}
func (*ArgUpdateRevise) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{36}
}
func (m *ArgUpdateRevise) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgUpdateRevise) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgUpdateRevise.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgUpdateRevise) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgUpdateRevise.Merge(m, src)
}
func (m *ArgUpdateRevise) XXX_Size() int {
	return m.Size()
}
func (m *ArgUpdateRevise) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgUpdateRevise.DiscardUnknown(m)
}

var xxx_messageInfo_ArgUpdateRevise proto.InternalMessageInfo

func (m *ArgUpdateRevise) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ArgUpdateRevise) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ArgUpdateRevise) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ArgUpdateRevise) GetFiles() []*AddReviseFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type ArgSaveReviseFiles struct {
	ReviseID             int64            `protobuf:"varint,1,opt,name=ReviseID,proto3" json:"ReviseID,omitempty"`
	Content              string           `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Items                []*AddReviseFile `protobuf:"bytes,4,rep,name=Items,proto3" json:"Items,omitempty"`
	Aid                  int64            `protobuf:"varint,5,opt,name=Aid,proto3" json:"Aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ArgSaveReviseFiles) Reset()         { *m = ArgSaveReviseFiles{} }
func (m *ArgSaveReviseFiles) String() string { return proto.CompactTextString(m) }
func (*ArgSaveReviseFiles) ProtoMessage()    {}
func (*ArgSaveReviseFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{37}
}
func (m *ArgSaveReviseFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgSaveReviseFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgSaveReviseFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgSaveReviseFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgSaveReviseFiles.Merge(m, src)
}
func (m *ArgSaveReviseFiles) XXX_Size() int {
	return m.Size()
}
func (m *ArgSaveReviseFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgSaveReviseFiles.DiscardUnknown(m)
}

var xxx_messageInfo_ArgSaveReviseFiles proto.InternalMessageInfo

func (m *ArgSaveReviseFiles) GetReviseID() int64 {
	if m != nil {
		return m.ReviseID
	}
	return 0
}

func (m *ArgSaveReviseFiles) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ArgSaveReviseFiles) GetItems() []*AddReviseFile {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ArgSaveReviseFiles) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type ReviseFileResp struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileURL              string   `protobuf:"bytes,3,opt,name=FileURL,proto3" json:"FileURL,omitempty"`
	Seq                  int32    `protobuf:"varint,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	FileType             string   `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`
	PdfURL               string   `protobuf:"bytes,6,opt,name=PdfURL,proto3" json:"PdfURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReviseFileResp) Reset()         { *m = ReviseFileResp{} }
func (m *ReviseFileResp) String() string { return proto.CompactTextString(m) }
func (*ReviseFileResp) ProtoMessage()    {}
func (*ReviseFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{38}
}
func (m *ReviseFileResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReviseFileResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReviseFileResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReviseFileResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviseFileResp.Merge(m, src)
}
func (m *ReviseFileResp) XXX_Size() int {
	return m.Size()
}
func (m *ReviseFileResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviseFileResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReviseFileResp proto.InternalMessageInfo

func (m *ReviseFileResp) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ReviseFileResp) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ReviseFileResp) GetFileURL() string {
	if m != nil {
		return m.FileURL
	}
	return ""
}

func (m *ReviseFileResp) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReviseFileResp) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

func (m *ReviseFileResp) GetPdfURL() string {
	if m != nil {
		return m.PdfURL
	}
	return ""
}

type ReviseFilesResp struct {
	Items                []*ReviseFileResp `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReviseFilesResp) Reset()         { *m = ReviseFilesResp{} }
func (m *ReviseFilesResp) String() string { return proto.CompactTextString(m) }
func (*ReviseFilesResp) ProtoMessage()    {}
func (*ReviseFilesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{39}
}
func (m *ReviseFilesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReviseFilesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReviseFilesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReviseFilesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviseFilesResp.Merge(m, src)
}
func (m *ReviseFilesResp) XXX_Size() int {
	return m.Size()
}
func (m *ReviseFilesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviseFilesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReviseFilesResp proto.InternalMessageInfo

func (m *ReviseFilesResp) GetItems() []*ReviseFileResp {
	if m != nil {
		return m.Items
	}
	return nil
}

type ReviseListResp struct {
	Items                []*ReviseInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	ReviseCount          int32         `protobuf:"varint,2,opt,name=ReviseCount,proto3" json:"ReviseCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReviseListResp) Reset()         { *m = ReviseListResp{} }
func (m *ReviseListResp) String() string { return proto.CompactTextString(m) }
func (*ReviseListResp) ProtoMessage()    {}
func (*ReviseListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{40}
}
func (m *ReviseListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReviseListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReviseListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReviseListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviseListResp.Merge(m, src)
}
func (m *ReviseListResp) XXX_Size() int {
	return m.Size()
}
func (m *ReviseListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviseListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReviseListResp proto.InternalMessageInfo

func (m *ReviseListResp) GetItems() []*ReviseInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ReviseListResp) GetReviseCount() int32 {
	if m != nil {
		return m.ReviseCount
	}
	return 0
}

type ArgArticleRevisesPaged struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	Sort                 string   `protobuf:"bytes,2,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset               int32    `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgArticleRevisesPaged) Reset()         { *m = ArgArticleRevisesPaged{} }
func (m *ArgArticleRevisesPaged) String() string { return proto.CompactTextString(m) }
func (*ArgArticleRevisesPaged) ProtoMessage()    {}
func (*ArgArticleRevisesPaged) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{41}
}
func (m *ArgArticleRevisesPaged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgArticleRevisesPaged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgArticleRevisesPaged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgArticleRevisesPaged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgArticleRevisesPaged.Merge(m, src)
}
func (m *ArgArticleRevisesPaged) XXX_Size() int {
	return m.Size()
}
func (m *ArgArticleRevisesPaged) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgArticleRevisesPaged.DiscardUnknown(m)
}

var xxx_messageInfo_ArgArticleRevisesPaged proto.InternalMessageInfo

func (m *ArgArticleRevisesPaged) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func (m *ArgArticleRevisesPaged) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *ArgArticleRevisesPaged) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ArgArticleRevisesPaged) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type BoolResp struct {
	Result               bool     `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolResp) Reset()         { *m = BoolResp{} }
func (m *BoolResp) String() string { return proto.CompactTextString(m) }
func (*BoolResp) ProtoMessage()    {}
func (*BoolResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{42}
}
func (m *BoolResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoolResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoolResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoolResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolResp.Merge(m, src)
}
func (m *BoolResp) XXX_Size() int {
	return m.Size()
}
func (m *BoolResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolResp.DiscardUnknown(m)
}

var xxx_messageInfo_BoolResp proto.InternalMessageInfo

func (m *BoolResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type IDsResp struct {
	IDs                  []int64  `protobuf:"varint,1,rep,packed,name=IDs,proto3" json:"ids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDsResp) Reset()         { *m = IDsResp{} }
func (m *IDsResp) String() string { return proto.CompactTextString(m) }
func (*IDsResp) ProtoMessage()    {}
func (*IDsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{43}
}
func (m *IDsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDsResp.Merge(m, src)
}
func (m *IDsResp) XXX_Size() int {
	return m.Size()
}
func (m *IDsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IDsResp.DiscardUnknown(m)
}

var xxx_messageInfo_IDsResp proto.InternalMessageInfo

func (m *IDsResp) GetIDs() []int64 {
	if m != nil {
		return m.IDs
	}
	return nil
}

type AidReq struct {
	AccountID            int64    `protobuf:"varint,1,opt,name=AccountID,proto3" json:"account_id"`
	UseMaster            bool     `protobuf:"varint,2,opt,name=UseMaster,proto3" json:"UseMaster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AidReq) Reset()         { *m = AidReq{} }
func (m *AidReq) String() string { return proto.CompactTextString(m) }
func (*AidReq) ProtoMessage()    {}
func (*AidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{44}
}
func (m *AidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AidReq.Merge(m, src)
}
func (m *AidReq) XXX_Size() int {
	return m.Size()
}
func (m *AidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AidReq.DiscardUnknown(m)
}

var xxx_messageInfo_AidReq proto.InternalMessageInfo

func (m *AidReq) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *AidReq) GetUseMaster() bool {
	if m != nil {
		return m.UseMaster
	}
	return false
}

type TopicStat struct {
	MemberCount          int32    `protobuf:"varint,1,opt,name=MemberCount,proto3" json:"member_count"`
	ArticleCount         int32    `protobuf:"varint,2,opt,name=ArticleCount,proto3" json:"article_count"`
	DiscussionCount      int32    `protobuf:"varint,3,opt,name=DiscussionCount,proto3" json:"discussion_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicStat) Reset()         { *m = TopicStat{} }
func (m *TopicStat) String() string { return proto.CompactTextString(m) }
func (*TopicStat) ProtoMessage()    {}
func (*TopicStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{45}
}
func (m *TopicStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicStat.Merge(m, src)
}
func (m *TopicStat) XXX_Size() int {
	return m.Size()
}
func (m *TopicStat) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicStat.DiscardUnknown(m)
}

var xxx_messageInfo_TopicStat proto.InternalMessageInfo

func (m *TopicStat) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *TopicStat) GetArticleCount() int32 {
	if m != nil {
		return m.ArticleCount
	}
	return 0
}

func (m *TopicStat) GetDiscussionCount() int32 {
	if m != nil {
		return m.DiscussionCount
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyStruct)(nil), "service.article.EmptyStruct")
	proto.RegisterType((*Creator)(nil), "service.article.Creator")
	proto.RegisterType((*DBArticle)(nil), "service.article.DBArticle")
	proto.RegisterType((*ArticlesResp)(nil), "service.article.ArticlesResp")
	proto.RegisterType((*ArticleDetail)(nil), "service.article.ArticleDetail")
	proto.RegisterType((*ArticleInfo)(nil), "service.article.ArticleInfo")
	proto.RegisterType((*ArticleStat)(nil), "service.article.ArticleStat")
	proto.RegisterType((*ReviseStat)(nil), "service.article.ReviseStat")
	proto.RegisterType((*ReviseInfo)(nil), "service.article.ReviseInfo")
	proto.RegisterType((*ReviseDetail)(nil), "service.article.ReviseDetail")
	proto.RegisterType((*ArgAddArticle)(nil), "service.article.ArgAddArticle")
	proto.RegisterType((*ArgUpdateArticle)(nil), "service.article.ArgUpdateArticle")
	proto.RegisterType((*ArgArticleFile)(nil), "service.article.ArgArticleFile")
	proto.RegisterType((*ArgArticleRelation)(nil), "service.article.ArgArticleRelation")
	proto.RegisterType((*IDReq)(nil), "service.article.IDReq")
	proto.RegisterType((*UserArticlesReq)(nil), "service.article.UserArticlesReq")
	proto.RegisterType((*UserRevisesReq)(nil), "service.article.UserRevisesReq")
	proto.RegisterType((*UserArticlesResp)(nil), "service.article.UserArticlesResp")
	proto.RegisterType((*ArticleFileResp)(nil), "service.article.ArticleFileResp")
	proto.RegisterType((*ArticleFilesResp)(nil), "service.article.ArticleFilesResp")
	proto.RegisterType((*ArticleRelationsResp)(nil), "service.article.ArticleRelationsResp")
	proto.RegisterType((*ArticleHistoryResp)(nil), "service.article.ArticleHistoryResp")
	proto.RegisterType((*ArticleHistoryItem)(nil), "service.article.ArticleHistoryItem")
	proto.RegisterType((*ArticleHistoryListResp)(nil), "service.article.ArticleHistoryListResp")
	proto.RegisterType((*ArticleRelationResp)(nil), "service.article.ArticleRelationResp")
	proto.RegisterType((*ArgUpdateArticleFile)(nil), "service.article.ArgUpdateArticleFile")
	proto.RegisterType((*ArgSaveArticleFiles)(nil), "service.article.ArgSaveArticleFiles")
	proto.RegisterType((*ArgSetPrimaryArticleRelation)(nil), "service.article.ArgSetPrimaryArticleRelation")
	proto.RegisterType((*ArgDelArticleRelation)(nil), "service.article.ArgDelArticleRelation")
	proto.RegisterType((*ArgAddArticleRelation)(nil), "service.article.ArgAddArticleRelation")
	proto.RegisterType((*AddArticleRelation)(nil), "service.article.AddArticleRelation")
	proto.RegisterType((*ArgUpdateArticleRelation)(nil), "service.article.ArgUpdateArticleRelation")
	proto.RegisterType((*IDResp)(nil), "service.article.IDResp")
	proto.RegisterType((*ArgArticleHistoriesPaged)(nil), "service.article.ArgArticleHistoriesPaged")
	proto.RegisterType((*ArgAddRevise)(nil), "service.article.ArgAddRevise")
	proto.RegisterType((*AddReviseFile)(nil), "service.article.AddReviseFile")
	proto.RegisterType((*ArgUpdateRevise)(nil), "service.article.ArgUpdateRevise")
	proto.RegisterType((*ArgSaveReviseFiles)(nil), "service.article.ArgSaveReviseFiles")
	proto.RegisterType((*ReviseFileResp)(nil), "service.article.ReviseFileResp")
	proto.RegisterType((*ReviseFilesResp)(nil), "service.article.ReviseFilesResp")
	proto.RegisterType((*ReviseListResp)(nil), "service.article.ReviseListResp")
	proto.RegisterType((*ArgArticleRevisesPaged)(nil), "service.article.ArgArticleRevisesPaged")
	proto.RegisterType((*BoolResp)(nil), "service.article.BoolResp")
	proto.RegisterType((*IDsResp)(nil), "service.article.IDsResp")
	proto.RegisterType((*AidReq)(nil), "service.article.AidReq")
	proto.RegisterType((*TopicStat)(nil), "service.article.TopicStat")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 2480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x5f, 0x6f, 0x1b, 0x59,
	0x15, 0xdf, 0xf1, 0x7f, 0x1f, 0x27, 0x71, 0x7a, 0x9b, 0x06, 0x6f, 0x68, 0x63, 0xef, 0xb4, 0xd9,
	0x4d, 0xa5, 0x6e, 0x76, 0x09, 0x2d, 0x62, 0x77, 0xf9, 0x67, 0xc7, 0xed, 0xc6, 0x55, 0xba, 0x84,
	0x49, 0x5a, 0xc4, 0x22, 0x11, 0x26, 0xf6, 0x8d, 0x3b, 0xda, 0xb1, 0xc7, 0x9d, 0x19, 0x87, 0x46,
	0x82, 0x17, 0xe0, 0x15, 0x1e, 0x90, 0x58, 0x09, 0x69, 0x9f, 0x78, 0x40, 0x7c, 0x02, 0x78, 0xe0,
	0x0b, 0xf0, 0x06, 0x5f, 0x00, 0x0b, 0x55, 0x08, 0x21, 0x7f, 0x02, 0x24, 0x5e, 0xd0, 0xfd, 0x37,
	0x73, 0xef, 0xfc, 0xb1, 0xd3, 0x6a, 0x09, 0xab, 0x55, 0x9f, 0xe2, 0x7b, 0xee, 0xb9, 0xe7, 0x9e,
	0x7b, 0xee, 0x39, 0xe7, 0xfe, 0xce, 0x99, 0x40, 0x69, 0x74, 0xbc, 0x35, 0x72, 0x1d, 0xdf, 0x41,
	0x55, 0x0f, 0xbb, 0xa7, 0x56, 0x17, 0x6f, 0x99, 0xae, 0x6f, 0x75, 0x6d, 0xbc, 0xf6, 0x66, 0xdf,
	0xf2, 0x1f, 0x8f, 0x8f, 0xb7, 0xba, 0xce, 0xe0, 0xad, 0xbe, 0xd3, 0x77, 0xde, 0xa2, 0x7c, 0xc7,
	0xe3, 0x13, 0x3a, 0xa2, 0x03, 0xfa, 0x8b, 0xad, 0xd7, 0x17, 0xa1, 0x72, 0x77, 0x30, 0xf2, 0xcf,
	0x0e, 0x7c, 0x77, 0xdc, 0xf5, 0xf5, 0xdf, 0x69, 0x50, 0xdc, 0x71, 0xb1, 0xe9, 0x3b, 0x2e, 0x5a,
	0x85, 0x4c, 0xa7, 0x5d, 0xd3, 0x1a, 0xda, 0x66, 0xb6, 0x55, 0x98, 0x4e, 0xea, 0x19, 0xab, 0x67,
	0x64, 0x3a, 0x6d, 0x74, 0x13, 0x4a, 0x0f, 0x3d, 0xec, 0x7e, 0x60, 0x0e, 0x70, 0x2d, 0xd3, 0xd0,
	0x36, 0xcb, 0xad, 0xc5, 0xe9, 0xa4, 0x5e, 0x1e, 0x7b, 0xd8, 0x3d, 0x1a, 0x9a, 0x03, 0x6c, 0x04,
	0xd3, 0x48, 0x87, 0x42, 0xf3, 0xd4, 0xf4, 0x4d, 0xb7, 0x96, 0xa5, 0x8c, 0x30, 0x9d, 0xd4, 0x0b,
	0x26, 0xa5, 0x18, 0x7c, 0x06, 0xdd, 0x86, 0x85, 0xce, 0xd0, 0x77, 0x9d, 0xde, 0xb8, 0xeb, 0x5b,
	0xce, 0xb0, 0x96, 0xa3, 0x9c, 0xcb, 0xd3, 0x49, 0x7d, 0xc1, 0x92, 0xe8, 0x86, 0xc2, 0xa5, 0xff,
	0x3a, 0x03, 0xe5, 0x76, 0xab, 0xc9, 0x0e, 0x8d, 0x96, 0x42, 0x55, 0xa9, 0x8a, 0x2b, 0x90, 0x3f,
	0xb4, 0x7c, 0x9b, 0xeb, 0x67, 0xb0, 0x01, 0xaa, 0x41, 0x71, 0xc7, 0x19, 0xfa, 0x78, 0xe8, 0x33,
	0x75, 0x0c, 0x31, 0x44, 0x0d, 0xa8, 0xf0, 0x9f, 0x87, 0xf8, 0xa9, 0xcf, 0x54, 0x30, 0x64, 0x12,
	0xba, 0x01, 0x8b, 0x6d, 0xcb, 0x33, 0x8f, 0x6d, 0x6c, 0xe0, 0x53, 0xcb, 0xc3, 0xb5, 0x7c, 0x43,
	0xdb, 0x2c, 0x19, 0x2a, 0x11, 0xbd, 0x0e, 0x4b, 0x9c, 0xb0, 0xe3, 0x0c, 0x06, 0x64, 0xa3, 0x02,
	0x65, 0x8b, 0x50, 0xd1, 0x55, 0x28, 0x53, 0x2b, 0xe3, 0x5e, 0xeb, 0xac, 0x56, 0xa4, 0x6a, 0x87,
	0x04, 0x69, 0xb6, 0xe9, 0xd7, 0x4a, 0xca, 0x6c, 0x93, 0xae, 0x7d, 0x38, 0xea, 0xf1, 0xd9, 0x32,
	0x9b, 0x0d, 0x08, 0xfa, 0xb7, 0x60, 0x81, 0x1b, 0xc5, 0x33, 0xb0, 0x37, 0x42, 0x6f, 0x43, 0xbe,
	0xe3, 0xe3, 0x81, 0x57, 0xd3, 0x1a, 0xd9, 0xcd, 0xca, 0xf6, 0xda, 0x56, 0xc4, 0x5f, 0xb6, 0x02,
	0x23, 0x1a, 0x8c, 0x51, 0xff, 0x57, 0x0e, 0x16, 0x39, 0xa9, 0x8d, 0x7d, 0xd3, 0xb2, 0x53, 0x1d,
	0xa1, 0xae, 0x58, 0xb9, 0x55, 0x9e, 0x4e, 0xea, 0x79, 0x9f, 0x10, 0x84, 0xc1, 0x6f, 0x41, 0xb9,
	0x33, 0x30, 0xfb, 0xf8, 0xa1, 0x6b, 0x7b, 0xb5, 0x5c, 0x23, 0xbb, 0x59, 0x6e, 0x2d, 0x4d, 0x27,
	0x75, 0xb0, 0x08, 0xf1, 0x68, 0xec, 0xda, 0x9e, 0x11, 0x32, 0xa0, 0x6f, 0x06, 0xae, 0x47, 0x8d,
	0x5b, 0xd9, 0xae, 0xc5, 0x94, 0xe5, 0xf3, 0xad, 0xca, 0x74, 0x52, 0x2f, 0x76, 0xd9, 0xc0, 0x08,
	0x1c, 0xf6, 0x96, 0x6c, 0xb7, 0x02, 0x55, 0x97, 0x6e, 0xd7, 0x65, 0xc4, 0x23, 0xd3, 0x97, 0xed,
	0x78, 0x4b, 0xb6, 0x63, 0x31, 0xe4, 0x1e, 0x33, 0x22, 0xe5, 0x0e, 0x18, 0xd0, 0xbb, 0x90, 0x3b,
	0xf0, 0x4d, 0x76, 0x1d, 0x95, 0xed, 0xab, 0x31, 0xcd, 0xb8, 0xc5, 0x08, 0x4f, 0xab, 0x34, 0x9d,
	0xd4, 0x73, 0x9e, 0x6f, 0xfa, 0x06, 0x5d, 0x83, 0x36, 0x42, 0xbf, 0x2b, 0x53, 0x4b, 0x31, 0xf5,
	0x19, 0x29, 0x74, 0xc2, 0x6d, 0xd5, 0x09, 0x21, 0x8c, 0x03, 0xce, 0x7a, 0xe4, 0xe3, 0xa7, 0xbe,
	0xea, 0x96, 0x5f, 0x8d, 0xba, 0x65, 0x85, 0xf8, 0x5b, 0x0b, 0x4d, 0x27, 0xf5, 0xa5, 0x1e, 0x9b,
	0x38, 0x72, 0xe9, 0x4c, 0xd4, 0x55, 0xdf, 0x8b, 0xb9, 0xea, 0x02, 0x5d, 0x7a, 0x79, 0x3a, 0xa9,
	0x57, 0xc5, 0xd2, 0x2e, 0x9b, 0x8a, 0xf9, 0xef, 0x5d, 0xa8, 0xec, 0x99, 0x9e, 0xbf, 0x6b, 0x79,
	0xbe, 0xe3, 0x9e, 0xd5, 0x16, 0xa9, 0x51, 0xae, 0xa7, 0x19, 0x85, 0xb3, 0x11, 0x7f, 0x34, 0xe4,
	0x75, 0xfa, 0x3f, 0x73, 0x50, 0xe1, 0x3c, 0x9d, 0xe1, 0x89, 0xf3, 0xe2, 0x8e, 0xb6, 0x01, 0xc5,
	0xbb, 0x4f, 0xbb, 0xd8, 0x1d, 0xf1, 0xc8, 0x66, 0x16, 0xc6, 0x8c, 0x64, 0x88, 0xb9, 0x97, 0xfe,
	0xf8, 0x79, 0xf5, 0xc7, 0x75, 0x80, 0x9d, 0xc7, 0xe6, 0xb0, 0x8f, 0xdb, 0xd8, 0xeb, 0x52, 0x77,
	0x2c, 0x1b, 0x12, 0x45, 0xff, 0x9b, 0x16, 0x38, 0x1a, 0xb5, 0xc0, 0x36, 0x54, 0xd8, 0xb6, 0x3b,
	0xce, 0x78, 0xe8, 0x53, 0x8f, 0xcb, 0xb3, 0xa3, 0x31, 0xe5, 0x8e, 0xba, 0x84, 0x6e, 0xc8, 0x4c,
	0xe4, 0x7e, 0xf6, 0xac, 0x8f, 0xf8, 0x8a, 0x0c, 0x5d, 0x41, 0xef, 0xc7, 0xb6, 0x3e, 0x12, 0xfc,
	0x21, 0x03, 0xba, 0x03, 0x0b, 0x6d, 0xcb, 0xb3, 0x83, 0x05, 0x59, 0xba, 0xe0, 0xd2, 0x74, 0x52,
	0x5f, 0xec, 0x31, 0x3a, 0x5f, 0xa3, 0xb0, 0x91, 0x65, 0xfc, 0x4c, 0x6c, 0x59, 0x2e, 0x5c, 0xc6,
	0xcf, 0x2e, 0x96, 0xc9, 0x6c, 0xfa, 0xef, 0x35, 0x00, 0xa6, 0x2b, 0x3d, 0xde, 0x67, 0x59, 0xd5,
	0xff, 0x64, 0x85, 0xaa, 0x2f, 0x43, 0xfe, 0xf9, 0x42, 0xfe, 0x1d, 0x25, 0xe4, 0xbf, 0x18, 0xd3,
	0x2c, 0x74, 0x80, 0x58, 0xc4, 0xdf, 0x82, 0xb2, 0xc8, 0xb3, 0x6d, 0x86, 0x19, 0xd8, 0x46, 0x7c,
	0xe9, 0x91, 0xd5, 0x33, 0x42, 0x06, 0x39, 0x3f, 0xc0, 0xf9, 0xf3, 0x43, 0xe5, 0x1c, 0xf9, 0x41,
	0xff, 0x45, 0x0e, 0x16, 0x98, 0x9e, 0x2f, 0xb1, 0xc5, 0xe7, 0xe9, 0x62, 0xd1, 0x1d, 0xc8, 0xdf,
	0xb3, 0x6c, 0xec, 0xd5, 0x16, 0x28, 0xce, 0xac, 0xa7, 0x1c, 0x82, 0xf0, 0x50, 0x1c, 0xc0, 0xb8,
	0xf5, 0xdf, 0x64, 0x08, 0xd8, 0xec, 0x37, 0x7b, 0x3d, 0x01, 0xe5, 0x03, 0xe8, 0xae, 0xa5, 0x40,
	0xf7, 0x8c, 0x0a, 0xdd, 0x63, 0xc0, 0x3c, 0x7b, 0x3e, 0x60, 0x9e, 0x4b, 0x04, 0xe6, 0xc1, 0x31,
	0xf2, 0x29, 0xc7, 0x20, 0xca, 0xb2, 0x9f, 0xf4, 0x28, 0x8c, 0x1b, 0x35, 0xa1, 0x6c, 0x60, 0xdb,
	0x24, 0x95, 0x89, 0x57, 0x2b, 0xd0, 0xa5, 0xd7, 0x67, 0x2c, 0x15, 0xbc, 0x46, 0xb8, 0x0a, 0x2d,
	0x43, 0xb6, 0x69, 0xf5, 0x78, 0x31, 0x40, 0x7e, 0xea, 0xbf, 0xcd, 0xc0, 0x72, 0xd3, 0xed, 0x33,
	0x3f, 0x49, 0xab, 0x74, 0x1a, 0x00, 0xd4, 0x42, 0x8f, 0x4c, 0x7b, 0xcc, 0x83, 0x65, 0xf7, 0x15,
	0x43, 0xa2, 0xcd, 0xa8, 0x7a, 0xde, 0x06, 0xa4, 0x58, 0x89, 0xc9, 0xa0, 0x86, 0xd9, 0xd5, 0x8c,
	0x84, 0x39, 0xb4, 0x0d, 0x97, 0x55, 0x83, 0xb1, 0x25, 0xb4, 0x16, 0xda, 0xcd, 0x18, 0x49, 0x93,
	0x91, 0xb7, 0xb9, 0x10, 0x7d, 0x9b, 0xe3, 0x07, 0x6f, 0x15, 0xb9, 0x0b, 0xb4, 0xaa, 0x91, 0xbb,
	0x6d, 0x2d, 0x47, 0xaf, 0x51, 0xf7, 0x61, 0x49, 0xbd, 0x12, 0xb4, 0x06, 0x25, 0xf2, 0x97, 0x96,
	0xa7, 0xcc, 0x87, 0x82, 0x31, 0xb1, 0x05, 0xf9, 0xfd, 0xd0, 0xd8, 0x13, 0x6e, 0xc4, 0x87, 0x44,
	0x8b, 0x03, 0xfc, 0x84, 0xbd, 0x7d, 0x06, 0xf9, 0x29, 0xe4, 0x1c, 0x9e, 0x8d, 0x30, 0x2f, 0x08,
	0x83, 0xb1, 0xfe, 0x73, 0x0d, 0x50, 0xfc, 0x3a, 0xc9, 0x92, 0x7d, 0xd3, 0xc5, 0x43, 0x3f, 0xb8,
	0xa2, 0x60, 0x4c, 0xb6, 0x3e, 0x74, 0x46, 0x56, 0xb7, 0xd3, 0xa6, 0x5b, 0x67, 0x0d, 0x31, 0x24,
	0x33, 0xfb, 0xae, 0x35, 0x30, 0xdd, 0x33, 0xee, 0xbb, 0x62, 0x48, 0x4c, 0xb7, 0x8f, 0xdd, 0x81,
	0xe5, 0x79, 0x41, 0x61, 0x6c, 0x48, 0x14, 0xfd, 0x14, 0xf2, 0x9d, 0xb6, 0x81, 0x9f, 0xa4, 0x66,
	0xd1, 0x0d, 0x28, 0x5a, 0xc3, 0xae, 0x3d, 0xee, 0x89, 0x3c, 0x4a, 0x03, 0x9e, 0x93, 0x0c, 0xf1,
	0x83, 0x96, 0x94, 0x1e, 0x7e, 0x60, 0x7a, 0x3e, 0x76, 0xb9, 0x0e, 0x21, 0x41, 0x5c, 0x50, 0x2e,
	0xf4, 0xcc, 0x9f, 0x40, 0x95, 0x94, 0xf8, 0x61, 0xa1, 0xf9, 0x04, 0x6d, 0x40, 0xb9, 0xd9, 0xa5,
	0xef, 0x7d, 0xa0, 0x48, 0x71, 0x3a, 0xa9, 0x67, 0x4d, 0x9a, 0x81, 0xc4, 0x0c, 0x49, 0xeb, 0x7b,
	0xd6, 0xc0, 0x12, 0xa8, 0x84, 0xa6, 0x75, 0x9b, 0x10, 0x0c, 0x46, 0x47, 0x3a, 0x14, 0xbe, 0x7d,
	0x72, 0xe2, 0x61, 0x01, 0x43, 0x68, 0xc7, 0xc0, 0xa1, 0x14, 0x83, 0xcf, 0xe8, 0x3f, 0x86, 0x25,
	0xb2, 0x3d, 0xf3, 0x89, 0x0b, 0xdf, 0xfd, 0x3b, 0xb0, 0xac, 0x1e, 0xde, 0x1b, 0xa1, 0xaf, 0xab,
	0x55, 0x76, 0x2a, 0x1c, 0x27, 0x90, 0x87, 0x6d, 0x6b, 0x11, 0x76, 0x51, 0x72, 0xff, 0x49, 0x83,
	0xaa, 0x9c, 0x55, 0x88, 0xc8, 0x68, 0xa0, 0xcb, 0x6e, 0x9d, 0x49, 0x77, 0xeb, 0x6c, 0xa2, 0x5b,
	0xe7, 0x92, 0xdd, 0x3a, 0xaf, 0xba, 0x35, 0x5a, 0x85, 0xc2, 0x7e, 0xef, 0x84, 0x88, 0x61, 0x61,
	0xca, 0x47, 0x6a, 0x43, 0xa2, 0x18, 0x69, 0x48, 0xe8, 0xf7, 0x49, 0x9a, 0x0a, 0x94, 0x67, 0x06,
	0xf9, 0x8a, 0x6a, 0x90, 0x46, 0x9a, 0x41, 0xc2, 0xf7, 0x80, 0x59, 0xc2, 0x80, 0x95, 0x48, 0x50,
	0x31, 0x79, 0xef, 0xaa, 0xf2, 0x6e, 0xa4, 0xc9, 0x0b, 0x32, 0xab, 0x24, 0xf3, 0xdf, 0x34, 0x58,
	0xa3, 0x95, 0x68, 0xcc, 0xc0, 0x57, 0xe5, 0xa7, 0x94, 0x85, 0xa8, 0xf4, 0x74, 0x6e, 0x43, 0x91,
	0x26, 0x62, 0x87, 0x05, 0xc8, 0x0c, 0x00, 0x61, 0x08, 0x46, 0x84, 0x20, 0xd7, 0xb6, 0x4e, 0x4e,
	0x78, 0xe0, 0xd2, 0xdf, 0x91, 0x6c, 0x98, 0x4f, 0xca, 0x86, 0xe4, 0xc2, 0x0a, 0xe1, 0x85, 0xcd,
	0x34, 0xbe, 0xda, 0x0d, 0x2a, 0x45, 0xbb, 0x41, 0xff, 0x88, 0x1d, 0x9d, 0x98, 0xe4, 0x02, 0x8e,
	0x7e, 0xb1, 0xc7, 0x3c, 0x80, 0x55, 0xf5, 0x94, 0x7b, 0x96, 0xe7, 0xd3, 0x4b, 0x7e, 0x47, 0xf5,
	0x9b, 0x79, 0x2d, 0x0a, 0xc2, 0x2b, 0xdc, 0xe6, 0x2f, 0x19, 0xb8, 0x9c, 0xe0, 0x55, 0x31, 0xe3,
	0x6d, 0x42, 0x75, 0xc7, 0xf4, 0x4d, 0xdb, 0xe9, 0xdf, 0x1b, 0xdb, 0xf6, 0xbe, 0xe9, 0x3f, 0xe6,
	0xf1, 0x19, 0x25, 0xcf, 0x48, 0xf4, 0x57, 0xa1, 0x7c, 0xe8, 0x88, 0xe7, 0x81, 0x25, 0xda, 0x90,
	0x40, 0xfc, 0x88, 0x86, 0x3d, 0x33, 0x23, 0xfd, 0x4d, 0x42, 0x95, 0x77, 0x56, 0x79, 0xa8, 0xf2,
	0x6e, 0xaa, 0xfa, 0x64, 0x14, 0xa3, 0x4f, 0x06, 0x01, 0x42, 0x77, 0x7b, 0x96, 0x2f, 0xf1, 0x94,
	0x28, 0x4f, 0x84, 0x8a, 0xf4, 0x48, 0x57, 0x96, 0x36, 0x0a, 0xd4, 0x1e, 0x2c, 0xda, 0xe2, 0xb8,
	0x15, 0xa8, 0x57, 0xc4, 0x5b, 0x8b, 0x54, 0xff, 0x83, 0x00, 0xac, 0xea, 0x9f, 0x68, 0x24, 0xba,
	0x55, 0x40, 0xc3, 0x9f, 0xec, 0x62, 0xa7, 0xcd, 0xa0, 0x04, 0xb5, 0xeb, 0xee, 0x2b, 0x86, 0x20,
	0x5c, 0x44, 0xde, 0x6b, 0xe5, 0xc8, 0x95, 0xea, 0x3f, 0xd5, 0xc8, 0x85, 0xf7, 0x0f, 0xcc, 0x53,
	0x59, 0x39, 0x0f, 0xbd, 0xa7, 0xfa, 0xd0, 0x46, 0x12, 0xb0, 0x8b, 0x9d, 0x89, 0x7b, 0xd1, 0x9c,
	0xd0, 0xe2, 0x4f, 0x6b, 0x36, 0x7c, 0x5a, 0x7f, 0x00, 0x57, 0x89, 0x0e, 0xd8, 0xe7, 0xae, 0x11,
	0x85, 0x18, 0xcf, 0x17, 0xba, 0x71, 0xf9, 0xdf, 0x85, 0x2b, 0x4d, 0xb7, 0xdf, 0xc6, 0xf6, 0xa7,
	0x2d, 0xf8, 0x8f, 0x1a, 0x95, 0x1c, 0x22, 0xf9, 0x40, 0xb2, 0x22, 0x49, 0x8b, 0x4a, 0x92, 0x31,
	0x53, 0x26, 0x1d, 0x33, 0x65, 0x53, 0x31, 0x53, 0x6e, 0x16, 0x66, 0xca, 0xc7, 0x02, 0x80, 0x6b,
	0x5e, 0x08, 0x35, 0xff, 0x98, 0x24, 0xc9, 0xb8, 0xda, 0xff, 0x7f, 0xc5, 0x4e, 0xa1, 0x16, 0x75,
	0xad, 0xd4, 0xeb, 0xfa, 0x34, 0xf7, 0xad, 0x41, 0x81, 0xc0, 0xca, 0x78, 0xae, 0xd3, 0x9f, 0x52,
	0x8d, 0x94, 0x9c, 0x69, 0x61, 0x6f, 0xdf, 0xec, 0xe3, 0xde, 0x9c, 0x6b, 0x5e, 0x51, 0xa0, 0x97,
	0xc0, 0x5b, 0xab, 0x2a, 0xde, 0x12, 0x18, 0x2b, 0x01, 0x72, 0xfe, 0x52, 0x83, 0x05, 0xe6, 0x5e,
	0xbc, 0xa2, 0x9b, 0xbd, 0x5d, 0x7a, 0xbd, 0x18, 0xf3, 0x5c, 0x74, 0x5b, 0xd4, 0x7c, 0x39, 0x1a,
	0xdf, 0xeb, 0xf1, 0xf8, 0x16, 0x9b, 0x4a, 0x25, 0x9f, 0x7e, 0x06, 0x8b, 0x0a, 0xfd, 0x22, 0x92,
	0x18, 0x4f, 0x54, 0x3f, 0xa3, 0x70, 0x91, 0x3b, 0x06, 0x37, 0x47, 0x82, 0x3f, 0xfc, 0x8f, 0x0d,
	0xf0, 0x2b, 0x56, 0x03, 0x91, 0x74, 0x19, 0x4e, 0x7a, 0xe4, 0xa8, 0xbc, 0xbd, 0x17, 0xd4, 0x40,
	0x62, 0x3c, 0x43, 0xa9, 0xdb, 0x22, 0xc7, 0x9e, 0x53, 0x05, 0x96, 0x5c, 0xf9, 0x51, 0xf2, 0xa1,
	0x9b, 0x7c, 0xa2, 0xc1, 0x92, 0xda, 0x69, 0xf8, 0x2c, 0x01, 0x69, 0x7d, 0x17, 0xaa, 0x92, 0xad,
	0xa8, 0x7a, 0x77, 0xd4, 0xd7, 0x65, 0x7e, 0xe3, 0x84, 0xa1, 0x13, 0x2c, 0xce, 0x19, 0x40, 0x9d,
	0x2f, 0xa9, 0x82, 0xd2, 0xda, 0x48, 0xa4, 0x04, 0x11, 0xf6, 0x6b, 0xa8, 0x6d, 0x70, 0x16, 0x9a,
	0x32, 0x49, 0x7f, 0x4a, 0x90, 0x55, 0x58, 0xe7, 0xd2, 0x82, 0xeb, 0x3c, 0xe1, 0x8e, 0x20, 0x77,
	0xe0, 0xb8, 0xe2, 0x9a, 0xe9, 0xef, 0x30, 0x05, 0x64, 0x93, 0x53, 0x40, 0x4e, 0x4e, 0x01, 0xba,
	0x0e, 0xa5, 0x96, 0xe3, 0xd8, 0xf4, 0x68, 0xab, 0x50, 0x30, 0xb0, 0x37, 0xb6, 0x59, 0xa7, 0xbe,
	0x64, 0xf0, 0x91, 0x7e, 0x83, 0x84, 0x1c, 0x33, 0xe3, 0xab, 0x90, 0xed, 0xb4, 0xd9, 0xd9, 0x79,
	0xed, 0x67, 0xf5, 0x3c, 0x83, 0xd0, 0xf4, 0x43, 0x28, 0x34, 0xad, 0x1e, 0x29, 0x13, 0x6f, 0xc5,
	0xcb, 0x44, 0xd6, 0x2d, 0x63, 0xc4, 0x23, 0xb5, 0x5a, 0x54, 0xaa, 0xe2, 0x4c, 0xa4, 0x2a, 0xd6,
	0xff, 0xa0, 0x11, 0xcc, 0xc6, 0x01, 0x0e, 0xda, 0x86, 0xca, 0x03, 0x3c, 0x38, 0xc6, 0x6e, 0xec,
	0x83, 0xc2, 0x80, 0x92, 0xc5, 0x07, 0x05, 0x89, 0x09, 0xdd, 0x09, 0x3e, 0xd5, 0xca, 0x8d, 0x7a,
	0xda, 0x40, 0x17, 0xed, 0x3b, 0xde, 0x40, 0x97, 0xd9, 0xd0, 0x37, 0xa0, 0xda, 0xb6, 0xbc, 0xee,
	0x98, 0x66, 0x6f, 0xb9, 0x63, 0xbf, 0x32, 0x9d, 0xd4, 0x97, 0x7b, 0xc1, 0x14, 0x5f, 0x1c, 0x65,
	0xde, 0xfe, 0x78, 0x05, 0x8a, 0xa2, 0x9b, 0x74, 0x17, 0x40, 0x6a, 0xbd, 0xad, 0x27, 0xb6, 0xac,
	0x82, 0xf9, 0xb5, 0x2f, 0xc4, 0xe6, 0xf9, 0x33, 0xb1, 0x0f, 0x8b, 0x6a, 0x97, 0xea, 0xb5, 0xb9,
	0x18, 0x69, 0x2d, 0x5e, 0x23, 0x4b, 0xff, 0x87, 0x80, 0x5a, 0x00, 0x21, 0x46, 0x41, 0xab, 0x89,
	0x1b, 0x3f, 0x99, 0x23, 0xe3, 0x6b, 0x50, 0xdc, 0x31, 0x87, 0x8f, 0x2c, 0xfc, 0xa3, 0x54, 0x01,
	0xaf, 0xc6, 0xe8, 0x81, 0xcf, 0xb1, 0xd5, 0x04, 0x15, 0xbf, 0xc8, 0xea, 0x07, 0x50, 0x7b, 0x1f,
	0xfb, 0x0f, 0x3d, 0xec, 0x72, 0x21, 0x41, 0x68, 0x78, 0x28, 0x6e, 0x46, 0xe6, 0x9e, 0x6b, 0xb5,
	0x84, 0x7d, 0x98, 0x77, 0xdf, 0x87, 0xa5, 0xf7, 0xb1, 0x2f, 0x43, 0xe6, 0x34, 0x9d, 0xe6, 0x56,
	0xda, 0x68, 0x0f, 0xaa, 0xaa, 0x2c, 0x2f, 0x55, 0xd8, 0x6b, 0xb3, 0x84, 0x31, 0xcd, 0x1e, 0xc1,
	0x72, 0x0c, 0x30, 0x27, 0x55, 0xe7, 0x31, 0x58, 0x3d, 0xe7, 0xf2, 0x86, 0xd4, 0x80, 0xc9, 0x48,
	0xe3, 0xe6, 0x8c, 0xd6, 0xaa, 0xca, 0xba, 0xf6, 0xc6, 0x9c, 0x82, 0x2f, 0xc8, 0x9e, 0xfb, 0x70,
	0x29, 0xba, 0xdf, 0x59, 0xaa, 0x5d, 0xce, 0xf3, 0xa5, 0x1b, 0x1d, 0xc2, 0xe5, 0x50, 0x62, 0xd8,
	0xe7, 0x4d, 0x93, 0xb9, 0x31, 0xaf, 0xa5, 0xc1, 0xec, 0xfd, 0x43, 0xb8, 0x92, 0x0c, 0x08, 0x6f,
	0xce, 0x0d, 0x39, 0xc1, 0x3a, 0xc7, 0xf2, 0xdf, 0x03, 0x08, 0xcb, 0x0f, 0xf4, 0x66, 0xe2, 0x5d,
	0xa6, 0x95, 0x27, 0x73, 0x44, 0x7f, 0x98, 0x08, 0xb4, 0x5f, 0x9f, 0x9d, 0x76, 0xce, 0x2f, 0x3b,
	0xa1, 0xaa, 0x49, 0x94, 0x1d, 0xe7, 0x9b, 0x23, 0x7b, 0x07, 0xca, 0x21, 0xf0, 0xbc, 0x96, 0xa2,
	0x2e, 0x9b, 0x4e, 0x4f, 0x92, 0x1f, 0xc0, 0x82, 0x82, 0xd8, 0x1a, 0xe9, 0x17, 0xc6, 0x45, 0xcd,
	0x56, 0xaa, 0x09, 0xe5, 0x36, 0xb6, 0xb9, 0xb0, 0x17, 0xcb, 0x90, 0x06, 0x5c, 0xe1, 0x59, 0x4a,
	0x40, 0x34, 0x1e, 0x61, 0x71, 0x14, 0xa2, 0x36, 0x5c, 0x67, 0xa4, 0xaa, 0x63, 0x58, 0x95, 0xdd,
	0x5e, 0x42, 0x0c, 0x6f, 0xcc, 0xfc, 0x22, 0x12, 0x32, 0xae, 0xa5, 0x61, 0xa0, 0x20, 0x58, 0x59,
	0x3a, 0x94, 0x51, 0xe7, 0xf9, 0xd3, 0x61, 0x14, 0x7f, 0x1d, 0x42, 0x35, 0x0a, 0x61, 0xaf, 0xa7,
	0xe5, 0x2f, 0x89, 0x69, 0x8e, 0x65, 0x1f, 0xb0, 0x84, 0x6d, 0x0b, 0x47, 0xf3, 0xd0, 0x4c, 0xfe,
	0xb5, 0x6b, 0x69, 0xd1, 0xcf, 0x94, 0xbc, 0x27, 0xe7, 0x7f, 0xf6, 0xdd, 0xfc, 0xdc, 0x17, 0x2e,
	0xaf, 0xba, 0x0f, 0xcb, 0xa1, 0x1c, 0xf1, 0x05, 0x36, 0x45, 0xd2, 0x7a, 0x9a, 0x24, 0xbe, 0xae,
	0x0d, 0x8b, 0xc1, 0x25, 0xcc, 0x54, 0x69, 0x16, 0x12, 0x45, 0xbb, 0xf4, 0x35, 0x52, 0x3f, 0x09,
	0xa7, 0xc8, 0xb9, 0x96, 0x22, 0x27, 0x41, 0x1f, 0x8a, 0xc9, 0x9e, 0x57, 0x1f, 0xba, 0x48, 0xb1,
	0xf4, 0x4c, 0x31, 0x33, 0xff, 0xe7, 0x06, 0x7d, 0x1f, 0x56, 0x78, 0x68, 0x89, 0x8b, 0x64, 0x41,
	0xd0, 0x48, 0x8c, 0x2c, 0xe9, 0x4b, 0x4a, 0xc2, 0xa3, 0x1b, 0xfb, 0xdc, 0x70, 0x48, 0x63, 0x4c,
	0x22, 0x07, 0x81, 0x3b, 0x5f, 0x7c, 0x6a, 0xe4, 0xb6, 0x2e, 0xfd, 0xf9, 0xd9, 0xba, 0xf6, 0xd7,
	0x67, 0xeb, 0xda, 0xdf, 0x9f, 0xad, 0x6b, 0x1f, 0x66, 0xcd, 0x91, 0x75, 0x5c, 0xa0, 0xff, 0x24,
	0xfa, 0xe5, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xe6, 0x62, 0x63, 0x70, 0x2a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArticleClient interface {
	AddArticle(ctx context.Context, in *ArgAddArticle, opts ...grpc.CallOption) (*IDResp, error)
	UpdateArticle(ctx context.Context, in *ArgUpdateArticle, opts ...grpc.CallOption) (*EmptyStruct, error)
	DelArticle(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	CanView(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BoolResp, error)
	CanEdit(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BoolResp, error)
	GetUserCanEditArticleIDs(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDsResp, error)
	GetArticleFile(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleFileResp, error)
	GetArticleFiles(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleFilesResp, error)
	SaveArticleFiles(ctx context.Context, in *ArgSaveArticleFiles, opts ...grpc.CallOption) (*EmptyStruct, error)
	GetArticleHistoriesPaged(ctx context.Context, in *ArgArticleHistoriesPaged, opts ...grpc.CallOption) (*ArticleHistoryListResp, error)
	GetArticleHistory(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleHistoryResp, error)
	GetArticleRelations(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleRelationsResp, error)
	UpdateArticleRelation(ctx context.Context, in *ArgUpdateArticleRelation, opts ...grpc.CallOption) (*EmptyStruct, error)
	SetPrimary(ctx context.Context, in *ArgSetPrimaryArticleRelation, opts ...grpc.CallOption) (*EmptyStruct, error)
	AddArticleRelation(ctx context.Context, in *ArgAddArticleRelation, opts ...grpc.CallOption) (*EmptyStruct, error)
	DelArticleRelation(ctx context.Context, in *ArgDelArticleRelation, opts ...grpc.CallOption) (*EmptyStruct, error)
	AddRevise(ctx context.Context, in *ArgAddRevise, opts ...grpc.CallOption) (*IDResp, error)
	UpdateRevise(ctx context.Context, in *ArgUpdateRevise, opts ...grpc.CallOption) (*EmptyStruct, error)
	DelRevise(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	GetUserReviseIDsPaged(ctx context.Context, in *UserRevisesReq, opts ...grpc.CallOption) (*IDsResp, error)
	GetArticleRevisesPaged(ctx context.Context, in *ArgArticleRevisesPaged, opts ...grpc.CallOption) (*ReviseListResp, error)
	GetReviseFiles(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseFilesResp, error)
	SaveReviseFiles(ctx context.Context, in *ArgSaveReviseFiles, opts ...grpc.CallOption) (*EmptyStruct, error)
	GetAllArticles(ctx context.Context, in *EmptyStruct, opts ...grpc.CallOption) (*ArticlesResp, error)
	GetArticleInfo(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleInfo, error)
	GetArticleDetail(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleDetail, error)
	GetReviseInfo(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseInfo, error)
	GetReviseDetail(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseDetail, error)
	GetReviseStat(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseStat, error)
	GetArticleStat(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleStat, error)
	GetUserArticlesPaged(ctx context.Context, in *UserArticlesReq, opts ...grpc.CallOption) (*UserArticlesResp, error)
	GetUserArticleIDsPaged(ctx context.Context, in *UserArticlesReq, opts ...grpc.CallOption) (*IDsResp, error)
}

type articleClient struct {
	cc *grpc.ClientConn
}

func NewArticleClient(cc *grpc.ClientConn) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) AddArticle(ctx context.Context, in *ArgAddArticle, opts ...grpc.CallOption) (*IDResp, error) {
	out := new(IDResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/AddArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateArticle(ctx context.Context, in *ArgUpdateArticle, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelArticle(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/DelArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) CanView(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/CanView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) CanEdit(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BoolResp, error) {
	out := new(BoolResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/CanEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetUserCanEditArticleIDs(ctx context.Context, in *AidReq, opts ...grpc.CallOption) (*IDsResp, error) {
	out := new(IDsResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetUserCanEditArticleIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleFile(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleFileResp, error) {
	out := new(ArticleFileResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleFiles(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleFilesResp, error) {
	out := new(ArticleFilesResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SaveArticleFiles(ctx context.Context, in *ArgSaveArticleFiles, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/SaveArticleFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleHistoriesPaged(ctx context.Context, in *ArgArticleHistoriesPaged, opts ...grpc.CallOption) (*ArticleHistoryListResp, error) {
	out := new(ArticleHistoryListResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleHistoriesPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleHistory(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleHistoryResp, error) {
	out := new(ArticleHistoryResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleRelations(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleRelationsResp, error) {
	out := new(ArticleRelationsResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateArticleRelation(ctx context.Context, in *ArgUpdateArticleRelation, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/UpdateArticleRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SetPrimary(ctx context.Context, in *ArgSetPrimaryArticleRelation, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/SetPrimary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddArticleRelation(ctx context.Context, in *ArgAddArticleRelation, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/AddArticleRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelArticleRelation(ctx context.Context, in *ArgDelArticleRelation, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/DelArticleRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddRevise(ctx context.Context, in *ArgAddRevise, opts ...grpc.CallOption) (*IDResp, error) {
	out := new(IDResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/AddRevise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateRevise(ctx context.Context, in *ArgUpdateRevise, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/UpdateRevise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelRevise(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/DelRevise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetUserReviseIDsPaged(ctx context.Context, in *UserRevisesReq, opts ...grpc.CallOption) (*IDsResp, error) {
	out := new(IDsResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetUserReviseIDsPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleRevisesPaged(ctx context.Context, in *ArgArticleRevisesPaged, opts ...grpc.CallOption) (*ReviseListResp, error) {
	out := new(ReviseListResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleRevisesPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetReviseFiles(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseFilesResp, error) {
	out := new(ReviseFilesResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetReviseFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SaveReviseFiles(ctx context.Context, in *ArgSaveReviseFiles, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/service.article.Article/SaveReviseFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetAllArticles(ctx context.Context, in *EmptyStruct, opts ...grpc.CallOption) (*ArticlesResp, error) {
	out := new(ArticlesResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetAllArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleInfo(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleInfo, error) {
	out := new(ArticleInfo)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleDetail(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleDetail, error) {
	out := new(ArticleDetail)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetReviseInfo(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseInfo, error) {
	out := new(ReviseInfo)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetReviseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetReviseDetail(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseDetail, error) {
	out := new(ReviseDetail)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetReviseDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetReviseStat(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ReviseStat, error) {
	out := new(ReviseStat)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetReviseStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleStat(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ArticleStat, error) {
	out := new(ArticleStat)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetArticleStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetUserArticlesPaged(ctx context.Context, in *UserArticlesReq, opts ...grpc.CallOption) (*UserArticlesResp, error) {
	out := new(UserArticlesResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetUserArticlesPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetUserArticleIDsPaged(ctx context.Context, in *UserArticlesReq, opts ...grpc.CallOption) (*IDsResp, error) {
	out := new(IDsResp)
	err := c.cc.Invoke(ctx, "/service.article.Article/GetUserArticleIDsPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
type ArticleServer interface {
	AddArticle(context.Context, *ArgAddArticle) (*IDResp, error)
	UpdateArticle(context.Context, *ArgUpdateArticle) (*EmptyStruct, error)
	DelArticle(context.Context, *IDReq) (*EmptyStruct, error)
	CanView(context.Context, *IDReq) (*BoolResp, error)
	CanEdit(context.Context, *IDReq) (*BoolResp, error)
	GetUserCanEditArticleIDs(context.Context, *AidReq) (*IDsResp, error)
	GetArticleFile(context.Context, *IDReq) (*ArticleFileResp, error)
	GetArticleFiles(context.Context, *IDReq) (*ArticleFilesResp, error)
	SaveArticleFiles(context.Context, *ArgSaveArticleFiles) (*EmptyStruct, error)
	GetArticleHistoriesPaged(context.Context, *ArgArticleHistoriesPaged) (*ArticleHistoryListResp, error)
	GetArticleHistory(context.Context, *IDReq) (*ArticleHistoryResp, error)
	GetArticleRelations(context.Context, *IDReq) (*ArticleRelationsResp, error)
	UpdateArticleRelation(context.Context, *ArgUpdateArticleRelation) (*EmptyStruct, error)
	SetPrimary(context.Context, *ArgSetPrimaryArticleRelation) (*EmptyStruct, error)
	AddArticleRelation(context.Context, *ArgAddArticleRelation) (*EmptyStruct, error)
	DelArticleRelation(context.Context, *ArgDelArticleRelation) (*EmptyStruct, error)
	AddRevise(context.Context, *ArgAddRevise) (*IDResp, error)
	UpdateRevise(context.Context, *ArgUpdateRevise) (*EmptyStruct, error)
	DelRevise(context.Context, *IDReq) (*EmptyStruct, error)
	GetUserReviseIDsPaged(context.Context, *UserRevisesReq) (*IDsResp, error)
	GetArticleRevisesPaged(context.Context, *ArgArticleRevisesPaged) (*ReviseListResp, error)
	GetReviseFiles(context.Context, *IDReq) (*ReviseFilesResp, error)
	SaveReviseFiles(context.Context, *ArgSaveReviseFiles) (*EmptyStruct, error)
	GetAllArticles(context.Context, *EmptyStruct) (*ArticlesResp, error)
	GetArticleInfo(context.Context, *IDReq) (*ArticleInfo, error)
	GetArticleDetail(context.Context, *IDReq) (*ArticleDetail, error)
	GetReviseInfo(context.Context, *IDReq) (*ReviseInfo, error)
	GetReviseDetail(context.Context, *IDReq) (*ReviseDetail, error)
	GetReviseStat(context.Context, *IDReq) (*ReviseStat, error)
	GetArticleStat(context.Context, *IDReq) (*ArticleStat, error)
	GetUserArticlesPaged(context.Context, *UserArticlesReq) (*UserArticlesResp, error)
	GetUserArticleIDsPaged(context.Context, *UserArticlesReq) (*IDsResp, error)
}

// UnimplementedArticleServer can be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (*UnimplementedArticleServer) AddArticle(ctx context.Context, req *ArgAddArticle) (*IDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (*UnimplementedArticleServer) UpdateArticle(ctx context.Context, req *ArgUpdateArticle) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (*UnimplementedArticleServer) DelArticle(ctx context.Context, req *IDReq) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticle not implemented")
}
func (*UnimplementedArticleServer) CanView(ctx context.Context, req *IDReq) (*BoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanView not implemented")
}
func (*UnimplementedArticleServer) CanEdit(ctx context.Context, req *IDReq) (*BoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanEdit not implemented")
}
func (*UnimplementedArticleServer) GetUserCanEditArticleIDs(ctx context.Context, req *AidReq) (*IDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCanEditArticleIDs not implemented")
}
func (*UnimplementedArticleServer) GetArticleFile(ctx context.Context, req *IDReq) (*ArticleFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleFile not implemented")
}
func (*UnimplementedArticleServer) GetArticleFiles(ctx context.Context, req *IDReq) (*ArticleFilesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleFiles not implemented")
}
func (*UnimplementedArticleServer) SaveArticleFiles(ctx context.Context, req *ArgSaveArticleFiles) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveArticleFiles not implemented")
}
func (*UnimplementedArticleServer) GetArticleHistoriesPaged(ctx context.Context, req *ArgArticleHistoriesPaged) (*ArticleHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleHistoriesPaged not implemented")
}
func (*UnimplementedArticleServer) GetArticleHistory(ctx context.Context, req *IDReq) (*ArticleHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleHistory not implemented")
}
func (*UnimplementedArticleServer) GetArticleRelations(ctx context.Context, req *IDReq) (*ArticleRelationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleRelations not implemented")
}
func (*UnimplementedArticleServer) UpdateArticleRelation(ctx context.Context, req *ArgUpdateArticleRelation) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticleRelation not implemented")
}
func (*UnimplementedArticleServer) SetPrimary(ctx context.Context, req *ArgSetPrimaryArticleRelation) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimary not implemented")
}
func (*UnimplementedArticleServer) AddArticleRelation(ctx context.Context, req *ArgAddArticleRelation) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticleRelation not implemented")
}
func (*UnimplementedArticleServer) DelArticleRelation(ctx context.Context, req *ArgDelArticleRelation) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticleRelation not implemented")
}
func (*UnimplementedArticleServer) AddRevise(ctx context.Context, req *ArgAddRevise) (*IDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRevise not implemented")
}
func (*UnimplementedArticleServer) UpdateRevise(ctx context.Context, req *ArgUpdateRevise) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRevise not implemented")
}
func (*UnimplementedArticleServer) DelRevise(ctx context.Context, req *IDReq) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRevise not implemented")
}
func (*UnimplementedArticleServer) GetUserReviseIDsPaged(ctx context.Context, req *UserRevisesReq) (*IDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReviseIDsPaged not implemented")
}
func (*UnimplementedArticleServer) GetArticleRevisesPaged(ctx context.Context, req *ArgArticleRevisesPaged) (*ReviseListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleRevisesPaged not implemented")
}
func (*UnimplementedArticleServer) GetReviseFiles(ctx context.Context, req *IDReq) (*ReviseFilesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviseFiles not implemented")
}
func (*UnimplementedArticleServer) SaveReviseFiles(ctx context.Context, req *ArgSaveReviseFiles) (*EmptyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveReviseFiles not implemented")
}
func (*UnimplementedArticleServer) GetAllArticles(ctx context.Context, req *EmptyStruct) (*ArticlesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArticles not implemented")
}
func (*UnimplementedArticleServer) GetArticleInfo(ctx context.Context, req *IDReq) (*ArticleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleInfo not implemented")
}
func (*UnimplementedArticleServer) GetArticleDetail(ctx context.Context, req *IDReq) (*ArticleDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleDetail not implemented")
}
func (*UnimplementedArticleServer) GetReviseInfo(ctx context.Context, req *IDReq) (*ReviseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviseInfo not implemented")
}
func (*UnimplementedArticleServer) GetReviseDetail(ctx context.Context, req *IDReq) (*ReviseDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviseDetail not implemented")
}
func (*UnimplementedArticleServer) GetReviseStat(ctx context.Context, req *IDReq) (*ReviseStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviseStat not implemented")
}
func (*UnimplementedArticleServer) GetArticleStat(ctx context.Context, req *IDReq) (*ArticleStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleStat not implemented")
}
func (*UnimplementedArticleServer) GetUserArticlesPaged(ctx context.Context, req *UserArticlesReq) (*UserArticlesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArticlesPaged not implemented")
}
func (*UnimplementedArticleServer) GetUserArticleIDsPaged(ctx context.Context, req *UserArticlesReq) (*IDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArticleIDsPaged not implemented")
}

func RegisterArticleServer(s *grpc.Server, srv ArticleServer) {
	s.RegisterService(&_Article_serviceDesc, srv)
}

func _Article_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgAddArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/AddArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddArticle(ctx, req.(*ArgAddArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgUpdateArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateArticle(ctx, req.(*ArgUpdateArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/DelArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelArticle(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_CanView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CanView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/CanView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CanView(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_CanEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CanEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/CanEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CanEdit(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetUserCanEditArticleIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetUserCanEditArticleIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetUserCanEditArticleIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetUserCanEditArticleIDs(ctx, req.(*AidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleFile(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleFiles(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SaveArticleFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgSaveArticleFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SaveArticleFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/SaveArticleFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SaveArticleFiles(ctx, req.(*ArgSaveArticleFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleHistoriesPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgArticleHistoriesPaged)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleHistoriesPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleHistoriesPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleHistoriesPaged(ctx, req.(*ArgArticleHistoriesPaged))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleHistory(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleRelations(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateArticleRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgUpdateArticleRelation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateArticleRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/UpdateArticleRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateArticleRelation(ctx, req.(*ArgUpdateArticleRelation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SetPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgSetPrimaryArticleRelation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SetPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/SetPrimary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SetPrimary(ctx, req.(*ArgSetPrimaryArticleRelation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddArticleRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgAddArticleRelation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddArticleRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/AddArticleRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddArticleRelation(ctx, req.(*ArgAddArticleRelation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelArticleRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgDelArticleRelation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelArticleRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/DelArticleRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelArticleRelation(ctx, req.(*ArgDelArticleRelation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddRevise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgAddRevise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddRevise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/AddRevise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddRevise(ctx, req.(*ArgAddRevise))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateRevise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgUpdateRevise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateRevise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/UpdateRevise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateRevise(ctx, req.(*ArgUpdateRevise))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelRevise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelRevise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/DelRevise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelRevise(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetUserReviseIDsPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRevisesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetUserReviseIDsPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetUserReviseIDsPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetUserReviseIDsPaged(ctx, req.(*UserRevisesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleRevisesPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgArticleRevisesPaged)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleRevisesPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleRevisesPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleRevisesPaged(ctx, req.(*ArgArticleRevisesPaged))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetReviseFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetReviseFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetReviseFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetReviseFiles(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SaveReviseFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgSaveReviseFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SaveReviseFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/SaveReviseFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SaveReviseFiles(ctx, req.(*ArgSaveReviseFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetAllArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetAllArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetAllArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetAllArticles(ctx, req.(*EmptyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleInfo(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleDetail(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetReviseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetReviseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetReviseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetReviseInfo(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetReviseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetReviseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetReviseDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetReviseDetail(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetReviseStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetReviseStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetReviseStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetReviseStat(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetArticleStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleStat(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetUserArticlesPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserArticlesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetUserArticlesPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetUserArticlesPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetUserArticlesPaged(ctx, req.(*UserArticlesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetUserArticleIDsPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserArticlesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetUserArticleIDsPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.article.Article/GetUserArticleIDsPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetUserArticleIDsPaged(ctx, req.(*UserArticlesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Article_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.article.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddArticle",
			Handler:    _Article_AddArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Article_UpdateArticle_Handler,
		},
		{
			MethodName: "DelArticle",
			Handler:    _Article_DelArticle_Handler,
		},
		{
			MethodName: "CanView",
			Handler:    _Article_CanView_Handler,
		},
		{
			MethodName: "CanEdit",
			Handler:    _Article_CanEdit_Handler,
		},
		{
			MethodName: "GetUserCanEditArticleIDs",
			Handler:    _Article_GetUserCanEditArticleIDs_Handler,
		},
		{
			MethodName: "GetArticleFile",
			Handler:    _Article_GetArticleFile_Handler,
		},
		{
			MethodName: "GetArticleFiles",
			Handler:    _Article_GetArticleFiles_Handler,
		},
		{
			MethodName: "SaveArticleFiles",
			Handler:    _Article_SaveArticleFiles_Handler,
		},
		{
			MethodName: "GetArticleHistoriesPaged",
			Handler:    _Article_GetArticleHistoriesPaged_Handler,
		},
		{
			MethodName: "GetArticleHistory",
			Handler:    _Article_GetArticleHistory_Handler,
		},
		{
			MethodName: "GetArticleRelations",
			Handler:    _Article_GetArticleRelations_Handler,
		},
		{
			MethodName: "UpdateArticleRelation",
			Handler:    _Article_UpdateArticleRelation_Handler,
		},
		{
			MethodName: "SetPrimary",
			Handler:    _Article_SetPrimary_Handler,
		},
		{
			MethodName: "AddArticleRelation",
			Handler:    _Article_AddArticleRelation_Handler,
		},
		{
			MethodName: "DelArticleRelation",
			Handler:    _Article_DelArticleRelation_Handler,
		},
		{
			MethodName: "AddRevise",
			Handler:    _Article_AddRevise_Handler,
		},
		{
			MethodName: "UpdateRevise",
			Handler:    _Article_UpdateRevise_Handler,
		},
		{
			MethodName: "DelRevise",
			Handler:    _Article_DelRevise_Handler,
		},
		{
			MethodName: "GetUserReviseIDsPaged",
			Handler:    _Article_GetUserReviseIDsPaged_Handler,
		},
		{
			MethodName: "GetArticleRevisesPaged",
			Handler:    _Article_GetArticleRevisesPaged_Handler,
		},
		{
			MethodName: "GetReviseFiles",
			Handler:    _Article_GetReviseFiles_Handler,
		},
		{
			MethodName: "SaveReviseFiles",
			Handler:    _Article_SaveReviseFiles_Handler,
		},
		{
			MethodName: "GetAllArticles",
			Handler:    _Article_GetAllArticles_Handler,
		},
		{
			MethodName: "GetArticleInfo",
			Handler:    _Article_GetArticleInfo_Handler,
		},
		{
			MethodName: "GetArticleDetail",
			Handler:    _Article_GetArticleDetail_Handler,
		},
		{
			MethodName: "GetReviseInfo",
			Handler:    _Article_GetReviseInfo_Handler,
		},
		{
			MethodName: "GetReviseDetail",
			Handler:    _Article_GetReviseDetail_Handler,
		},
		{
			MethodName: "GetReviseStat",
			Handler:    _Article_GetReviseStat_Handler,
		},
		{
			MethodName: "GetArticleStat",
			Handler:    _Article_GetArticleStat_Handler,
		},
		{
			MethodName: "GetUserArticlesPaged",
			Handler:    _Article_GetUserArticlesPaged_Handler,
		},
		{
			MethodName: "GetUserArticleIDsPaged",
			Handler:    _Article_GetUserArticleIDsPaged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Creator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Creator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Creator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBArticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBArticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedBy != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x38
	}
	if m.DisableComment {
		i--
		if m.DisableComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DisableRevise {
		i--
		if m.DisableRevise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContentText) > 0 {
		i -= len(m.ContentText)
		copy(dAtA[i:], m.ContentText)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ContentText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticlesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticlesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticlesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastHistory != nil {
		{
			size, err := m.LastHistory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.DisableComment {
		i--
		if m.DisableComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.DisableRevise {
		i--
		if m.DisableRevise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.ContentText) > 0 {
		i -= len(m.ContentText)
		copy(dAtA[i:], m.ContentText)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ContentText)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageUrls) > 0 {
		for iNdEx := len(m.ImageUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImageUrls[iNdEx])
			copy(dAtA[i:], m.ImageUrls[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.ImageUrls[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChangeDesc) > 0 {
		i -= len(m.ChangeDesc)
		copy(dAtA[i:], m.ChangeDesc)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ChangeDesc)))
		i--
		dAtA[i] = 0x6a
	}
	if m.DisableComment {
		i--
		if m.DisableComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.DisableRevise {
		i--
		if m.DisableRevise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.ContentText) > 0 {
		i -= len(m.ContentText)
		copy(dAtA[i:], m.ContentText)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ContentText)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageUrls) > 0 {
		for iNdEx := len(m.ImageUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImageUrls[iNdEx])
			copy(dAtA[i:], m.ImageUrls[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.ImageUrls[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Excerpt) > 0 {
		i -= len(m.Excerpt)
		copy(dAtA[i:], m.Excerpt)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Excerpt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommentCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x20
	}
	if m.DislikeCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DislikeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.LikeCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ReviseCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ReviseCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReviseStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReviseStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReviseStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommentCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x20
	}
	if m.DislikeCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DislikeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.LikeCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ReviseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReviseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReviseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContentText) > 0 {
		i -= len(m.ContentText)
		copy(dAtA[i:], m.ContentText)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ContentText)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x52
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x48
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageUrls) > 0 {
		for iNdEx := len(m.ImageUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImageUrls[iNdEx])
			copy(dAtA[i:], m.ImageUrls[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.ImageUrls[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Excerpt) > 0 {
		i -= len(m.Excerpt)
		copy(dAtA[i:], m.Excerpt)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Excerpt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReviseDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReviseDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReviseDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ContentText) > 0 {
		i -= len(m.ContentText)
		copy(dAtA[i:], m.ContentText)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ContentText)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x52
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x48
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageUrls) > 0 {
		for iNdEx := len(m.ImageUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImageUrls[iNdEx])
			copy(dAtA[i:], m.ImageUrls[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.ImageUrls[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArgAddArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgAddArticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgAddArticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.DisableComment {
		i--
		if m.DisableComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DisableRevise {
		i--
		if m.DisableRevise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArgUpdateArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgUpdateArticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgUpdateArticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChangeDesc) > 0 {
		i -= len(m.ChangeDesc)
		copy(dAtA[i:], m.ChangeDesc)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ChangeDesc)))
		i--
		dAtA[i] = 0x32
	}
	if m.DisableComment != nil {
		{
			size := m.DisableComment.Size()
			i -= size
			if _, err := m.DisableComment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DisableRevise != nil {
		{
			size := m.DisableRevise.Size()
			i -= size
			if _, err := m.DisableRevise.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Title != nil {
		{
			size := m.Title.Size()
			i -= size
			if _, err := m.Title.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArgUpdateArticle_TitleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgUpdateArticle_TitleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TitleValue)
	copy(dAtA[i:], m.TitleValue)
	i = encodeVarintPb(dAtA, i, uint64(len(m.TitleValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ArgUpdateArticle_DisableReviseValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgUpdateArticle_DisableReviseValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.DisableReviseValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ArgUpdateArticle_DisableCommentValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgUpdateArticle_DisableCommentValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.DisableCommentValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *ArgArticleFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgArticleFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgArticleFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileType) > 0 {
		i -= len(m.FileType)
		copy(dAtA[i:], m.FileType)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileType)))
		i--
		dAtA[i] = 0x22
	}
	if m.Seq != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FileURL) > 0 {
		i -= len(m.FileURL)
		copy(dAtA[i:], m.FileURL)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileURL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArgArticleRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgArticleRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgArticleRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0x22
	}
	if m.Primary {
		i--
		if m.Primary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TopicID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x10
	}
	if m.ParentID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ParentID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x20
	}
	if m.UseMaster {
		i--
		if m.UseMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Include) > 0 {
		i -= len(m.Include)
		copy(dAtA[i:], m.Include)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Include)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserArticlesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserArticlesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserArticlesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserRevisesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRevisesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRevisesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserArticlesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserArticlesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserArticlesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleFileResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleFileResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleFileResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PdfURL) > 0 {
		i -= len(m.PdfURL)
		copy(dAtA[i:], m.PdfURL)
		i = encodeVarintPb(dAtA, i, uint64(len(m.PdfURL)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FileType) > 0 {
		i -= len(m.FileType)
		copy(dAtA[i:], m.FileType)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Seq != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileURL) > 0 {
		i -= len(m.FileURL)
		copy(dAtA[i:], m.FileURL)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleFilesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleFilesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleFilesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleRelationsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleRelationsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleRelationsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleHistoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleHistoryResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleHistoryResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Seq != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChangeDesc) > 0 {
		i -= len(m.ChangeDesc)
		copy(dAtA[i:], m.ChangeDesc)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ChangeDesc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Diff) > 0 {
		i -= len(m.Diff)
		copy(dAtA[i:], m.Diff)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Diff)))
		i--
		dAtA[i] = 0x22
	}
	if m.Updator != nil {
		{
			size, err := m.Updator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleHistoryItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleHistoryItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleHistoryItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Seq != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChangeDesc) > 0 {
		i -= len(m.ChangeDesc)
		copy(dAtA[i:], m.ChangeDesc)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ChangeDesc)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Updator != nil {
		{
			size, err := m.Updator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleHistoryListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleHistoryListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleHistoryListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleRelationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleRelationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleRelationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EditPermission) > 0 {
		i -= len(m.EditPermission)
		copy(dAtA[i:], m.EditPermission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.EditPermission)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ToTopicID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ToTopicID))
		i--
		dAtA[i] = 0x20
	}
	if m.Primary {
		i--
		if m.Primary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.CatalogFullPath) > 0 {
		i -= len(m.CatalogFullPath)
		copy(dAtA[i:], m.CatalogFullPath)
		i = encodeVarintPb(dAtA, i, uint64(len(m.CatalogFullPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArgUpdateArticleFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgUpdateArticleFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgUpdateArticleFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileType) > 0 {
		i -= len(m.FileType)
		copy(dAtA[i:], m.FileType)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Seq != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileURL) > 0 {
		i -= len(m.FileURL)
		copy(dAtA[i:], m.FileURL)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size := m.ID.Size()
			i -= size
			if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArgUpdateArticleFile_IDValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgUpdateArticleFile_IDValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPb(dAtA, i, uint64(m.IDValue))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ArgSaveArticleFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgSaveArticleFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgSaveArticleFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArgSetPrimaryArticleRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgSetPrimaryArticleRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgSetPrimaryArticleRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArgDelArticleRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgDelArticleRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgDelArticleRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArgAddArticleRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgAddArticleRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgAddArticleRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Primary {
		i--
		if m.Primary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.ParentID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ParentID))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddArticleRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddArticleRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddArticleRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Primary {
		i--
		if m.Primary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.ParentID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ParentID))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ArgUpdateArticleRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgUpdateArticleRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgUpdateArticleRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Primary {
		i--
		if m.Primary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArgArticleHistoriesPaged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgArticleHistoriesPaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgArticleHistoriesPaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArgAddRevise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgAddRevise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgAddRevise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddReviseFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReviseFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReviseFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Seq != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileURL) > 0 {
		i -= len(m.FileURL)
		copy(dAtA[i:], m.FileURL)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size := m.ID.Size()
			i -= size
			if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddReviseFile_IDValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReviseFile_IDValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPb(dAtA, i, uint64(m.IDValue))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ArgUpdateRevise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgUpdateRevise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgUpdateRevise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArgSaveReviseFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgSaveReviseFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgSaveReviseFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReviseID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ReviseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReviseFileResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReviseFileResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReviseFileResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PdfURL) > 0 {
		i -= len(m.PdfURL)
		copy(dAtA[i:], m.PdfURL)
		i = encodeVarintPb(dAtA, i, uint64(len(m.PdfURL)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FileType) > 0 {
		i -= len(m.FileType)
		copy(dAtA[i:], m.FileType)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Seq != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileURL) > 0 {
		i -= len(m.FileURL)
		copy(dAtA[i:], m.FileURL)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReviseFilesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReviseFilesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReviseFilesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReviseListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReviseListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReviseListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReviseCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ReviseCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArgArticleRevisesPaged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgArticleRevisesPaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgArticleRevisesPaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sort) > 0 {
		i -= len(m.Sort)
		copy(dAtA[i:], m.Sort)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Sort)))
		i--
		dAtA[i] = 0x12
	}
	if m.ArticleID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BoolResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoolResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IDsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IDs) > 0 {
		dAtA14 := make([]byte, len(m.IDs)*10)
		var j13 int
		for _, num1 := range m.IDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintPb(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseMaster {
		i--
		if m.UseMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AccountID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DiscussionCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DiscussionCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ArticleCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ArticleCount))
		i--
		dAtA[i] = 0x10
	}
	if m.MemberCount != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MemberCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Creator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBArticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.ContentText)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.DisableRevise {
		n += 2
	}
	if m.DisableComment {
		n += 2
	}
	if m.CreatedBy != 0 {
		n += 1 + sovPb(uint64(m.CreatedBy))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticlesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.ContentText)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.DisableRevise {
		n += 2
	}
	if m.DisableComment {
		n += 2
	}
	if m.LastHistory != nil {
		l = m.LastHistory.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Excerpt)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.ContentText)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.DisableRevise {
		n += 2
	}
	if m.DisableComment {
		n += 2
	}
	l = len(m.ChangeDesc)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviseCount != 0 {
		n += 1 + sovPb(uint64(m.ReviseCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovPb(uint64(m.LikeCount))
	}
	if m.DislikeCount != 0 {
		n += 1 + sovPb(uint64(m.DislikeCount))
	}
	if m.CommentCount != 0 {
		n += 1 + sovPb(uint64(m.CommentCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReviseStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LikeCount != 0 {
		n += 1 + sovPb(uint64(m.LikeCount))
	}
	if m.DislikeCount != 0 {
		n += 1 + sovPb(uint64(m.DislikeCount))
	}
	if m.CommentCount != 0 {
		n += 1 + sovPb(uint64(m.CommentCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReviseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Excerpt)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.ContentText)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReviseDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.ContentText)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgAddArticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.DisableRevise {
		n += 2
	}
	if m.DisableComment {
		n += 2
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgUpdateArticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.Title != nil {
		n += m.Title.Size()
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.DisableRevise != nil {
		n += m.DisableRevise.Size()
	}
	if m.DisableComment != nil {
		n += m.DisableComment.Size()
	}
	l = len(m.ChangeDesc)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgUpdateArticle_TitleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TitleValue)
	n += 1 + l + sovPb(uint64(l))
	return n
}
func (m *ArgUpdateArticle_DisableReviseValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ArgUpdateArticle_DisableCommentValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ArgArticleFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.FileURL)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovPb(uint64(m.Seq))
	}
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgArticleRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentID != 0 {
		n += 1 + sovPb(uint64(m.ParentID))
	}
	if m.TopicID != 0 {
		n += 1 + sovPb(uint64(m.TopicID))
	}
	if m.Primary {
		n += 2
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Include)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.UseMaster {
		n += 2
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserArticlesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserRevisesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserArticlesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleFileResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.FileURL)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovPb(uint64(m.Seq))
	}
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.PdfURL)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleFilesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleRelationsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleHistoryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	if m.Updator != nil {
		l = m.Updator.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Diff)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.ChangeDesc)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovPb(uint64(m.Seq))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleHistoryItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	if m.Updator != nil {
		l = m.Updator.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.ChangeDesc)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovPb(uint64(m.Seq))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPb(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPb(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleHistoryListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleRelationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.CatalogFullPath)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Primary {
		n += 2
	}
	if m.ToTopicID != 0 {
		n += 1 + sovPb(uint64(m.ToTopicID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.EditPermission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgUpdateArticleFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += m.ID.Size()
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.FileURL)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovPb(uint64(m.Seq))
	}
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgUpdateArticleFile_IDValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.IDValue))
	return n
}
func (m *ArgSaveArticleFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgSetPrimaryArticleRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgDelArticleRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgAddArticleRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	if m.ParentID != 0 {
		n += 1 + sovPb(uint64(m.ParentID))
	}
	if m.TopicID != 0 {
		n += 1 + sovPb(uint64(m.TopicID))
	}
	if m.Primary {
		n += 2
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddArticleRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentID != 0 {
		n += 1 + sovPb(uint64(m.ParentID))
	}
	if m.TopicID != 0 {
		n += 1 + sovPb(uint64(m.TopicID))
	}
	if m.Primary {
		n += 2
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgUpdateArticleRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.Primary {
		n += 2
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgArticleHistoriesPaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgAddRevise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddReviseFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += m.ID.Size()
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.FileURL)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovPb(uint64(m.Seq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddReviseFile_IDValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPb(uint64(m.IDValue))
	return n
}
func (m *ArgUpdateRevise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgSaveReviseFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviseID != 0 {
		n += 1 + sovPb(uint64(m.ReviseID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.Aid != 0 {
		n += 1 + sovPb(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReviseFileResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.FileURL)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovPb(uint64(m.Seq))
	}
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	l = len(m.PdfURL)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReviseFilesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReviseListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPb(uint64(l))
		}
	}
	if m.ReviseCount != 0 {
		n += 1 + sovPb(uint64(m.ReviseCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgArticleRevisesPaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleID != 0 {
		n += 1 + sovPb(uint64(m.ArticleID))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovPb(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoolResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IDsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IDs) > 0 {
		l = 0
		for _, e := range m.IDs {
			l += sovPb(uint64(e))
		}
		n += 1 + sovPb(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountID != 0 {
		n += 1 + sovPb(uint64(m.AccountID))
	}
	if m.UseMaster {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberCount != 0 {
		n += 1 + sovPb(uint64(m.MemberCount))
	}
	if m.ArticleCount != 0 {
		n += 1 + sovPb(uint64(m.ArticleCount))
	}
	if m.DiscussionCount != 0 {
		n += 1 + sovPb(uint64(m.DiscussionCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Creator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Creator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Creator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRevise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableRevise = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableComment = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticlesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticlesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticlesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DBArticle{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &Creator{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &ArticleStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRevise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableRevise = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableComment = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHistory == nil {
				m.LastHistory = &ArticleHistoryResp{}
			}
			if err := m.LastHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Excerpt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Excerpt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &Creator{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &ArticleStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRevise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableRevise = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableComment = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseCount", wireType)
			}
			m.ReviseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeCount", wireType)
			}
			m.DislikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReviseStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviseStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviseStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeCount", wireType)
			}
			m.DislikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReviseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Excerpt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Excerpt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &Creator{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &ReviseStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReviseDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviseDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviseDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &Creator{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &ReviseStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &ReviseFileResp{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgAddArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgAddArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgAddArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRevise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableRevise = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableComment = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &ArgArticleFile{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &ArgArticleRelation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgUpdateArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgUpdateArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgUpdateArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = &ArgUpdateArticle_TitleValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableReviseValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DisableRevise = &ArgUpdateArticle_DisableReviseValue{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCommentValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DisableComment = &ArgUpdateArticle_DisableCommentValue{b}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgArticleFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgArticleFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgArticleFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgArticleRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgArticleRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgArticleRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Primary = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Include = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMaster = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserArticlesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserArticlesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserArticlesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRevisesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRevisesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRevisesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserArticlesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserArticlesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserArticlesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ArticleInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleFileResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleFileResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleFileResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PdfURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleFilesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleFilesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleFilesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ArticleFileResp{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleRelationsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleRelationsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleRelationsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ArticleRelationResp{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleHistoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleHistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleHistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updator == nil {
				m.Updator = &Creator{}
			}
			if err := m.Updator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diff", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Diff = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleHistoryItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleHistoryItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleHistoryItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updator == nil {
				m.Updator = &Creator{}
			}
			if err := m.Updator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleHistoryListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleHistoryListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleHistoryListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ArticleHistoryItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleRelationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleRelationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleRelationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatalogFullPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CatalogFullPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Primary = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTopicID", wireType)
			}
			m.ToTopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToTopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditPermission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditPermission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &TopicStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgUpdateArticleFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgUpdateArticleFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgUpdateArticleFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &ArgUpdateArticleFile_IDValue{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgSaveArticleFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgSaveArticleFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgSaveArticleFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ArgUpdateArticleFile{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgSetPrimaryArticleRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgSetPrimaryArticleRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgSetPrimaryArticleRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgDelArticleRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgDelArticleRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgDelArticleRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgAddArticleRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgAddArticleRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgAddArticleRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Primary = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddArticleRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddArticleRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddArticleRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Primary = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgUpdateArticleRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgUpdateArticleRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgUpdateArticleRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Primary = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgArticleHistoriesPaged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgArticleHistoriesPaged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgArticleHistoriesPaged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgAddRevise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgAddRevise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgAddRevise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &AddReviseFile{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReviseFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReviseFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReviseFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &AddReviseFile_IDValue{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgUpdateRevise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgUpdateRevise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgUpdateRevise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &AddReviseFile{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgSaveReviseFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgSaveReviseFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgSaveReviseFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseID", wireType)
			}
			m.ReviseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AddReviseFile{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReviseFileResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviseFileResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviseFileResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PdfURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReviseFilesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviseFilesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviseFilesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ReviseFileResp{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReviseListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviseListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviseListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ReviseInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviseCount", wireType)
			}
			m.ReviseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgArticleRevisesPaged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgArticleRevisesPaged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgArticleRevisesPaged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleID", wireType)
			}
			m.ArticleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IDs = append(m.IDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IDs) == 0 {
					m.IDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IDs = append(m.IDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMaster = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleCount", wireType)
			}
			m.ArticleCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussionCount", wireType)
			}
			m.DiscussionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussionCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb   = fmt.Errorf("proto: integer overflow")
)
